<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sorgs</title>
  <subtitle>Sorgs&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sorgs.cn/"/>
  <updated>2019-08-15T07:17:09.398Z</updated>
  <id>http://sorgs.cn/</id>
  
  <author>
    <name>Sorgs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Handler运行机制以及问题点解答</title>
    <link href="http://sorgs.cn/post/62013/"/>
    <id>http://sorgs.cn/post/62013/</id>
    <published>2019-08-14T15:09:18.000Z</published>
    <updated>2019-08-15T07:17:09.398Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Handler机制笔记，原文地址<a href="https://mp.weixin.qq.com/s/7PAMm_FPrA0P3jf0tn3yyQ" target="_blank" rel="external">：https://mp.weixin.qq.com/s/7PAMm_FPrA0P3jf0tn3yy</a></p>
</blockquote>
<h1 id="Handler-如何运行"><a href="#Handler-如何运行" class="headerlink" title="Handler 如何运行"></a>Handler 如何运行</h1><h2 id="Handler角色分配"><a href="#Handler角色分配" class="headerlink" title="Handler角色分配"></a>Handler角色分配</h2><ul>
<li>Handler中存在四种角色</li>
</ul>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><ul>
<li>Handler用来向Looper发送消息，在Looper处理到对应的消息时，Handler再对消息进行具体的处理。上层关键API为handleMessage()，由子类自行实现处理逻辑。</li>
</ul>
<h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><ul>
<li>Looper运行在目标线程里，不断从消息队列MessageQueue读取消息，分配给Handler处理。Looper起到连接的作用，将来自不同渠道的消息，聚集在目标线程里处理。也因此Looper需要确保线程唯一。</li>
</ul>
<h2 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h2><ul>
<li>存储消息对象Message，当Looper向MessageQueue获取消息，或Handler向其插入数据时，决定消息如何提取、如何存储。不仅如此，MessageQueue还维护与Native端的连接，也是解决Looper.loop() 阻塞问题的 Java 端的控制器。</li>
</ul>
<h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><ul>
<li>Message包含具体的消息数据，在成员变量target中保存了用来发送此消息的Handler引用。因此在消息获得这行时机时，能知道具体由哪一个Handler处理。此外静态成员变量sPool，则维护了消息缓存池以复用。</li>
</ul>
<h1 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h1><ul>
<li><p>首先，需要构建消息对象。获取消息对象从Handler.obtainMessage()系列方法可以获取Message，这一系列的函数提供了相应对应于Message对象关键成员变量对应的函数参数，而无论使用哪一个方法获取，最终通过Message.obtain()获取具体的Message对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 缓存池</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Message sPool;</div><div class="line">    <span class="comment">// 缓存池当前容量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sPoolSize = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 下一节点</span></div><div class="line">    Message next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 确保同步</span></div><div class="line">        <span class="keyword">synchronized</span> (sPoolSync) &#123;</div><div class="line">            <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 缓存池不为空</span></div><div class="line">                Message m = sPool;</div><div class="line">                <span class="comment">// 缓存池指向下一个Message节点</span></div><div class="line">                sPool = m.next;</div><div class="line">                <span class="comment">// 从缓存池拿到的Message对象与缓存断开连接</span></div><div class="line">                m.next = <span class="keyword">null</span>;</div><div class="line">                m.flags = <span class="number">0</span>; <span class="comment">// clear in-use flag</span></div><div class="line">                <span class="comment">// 缓存池大小减一</span></div><div class="line">                sPoolSize--;</div><div class="line">                <span class="keyword">return</span> m;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 缓存池没有可用对象，返回新的Message()</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Message();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Message成员变量中存在类型为Message的next，可以看出Message为链表结构，而上面代码从缓存池里获取消息对象的过程可以用下图描述：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://pic.sorgs.cn/handler%E8%8E%B7%E5%8F%96message%E5%AF%B9%E8%B1%A1.webp" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></li>
<li>创建出消息之后，通过Handler将消息发送到消息队列，发送方法有很多，不一一陈列。发送有两种：</li>
</ul>
<ol>
<li>将Message对象发送到Looper。利用sendMessage()</li>
<li>发送Runnable，通过getPostMessage()将Runnable包装在Message里，表现为成员变量callback<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line">     <span class="comment">// 获取Message</span></div><div class="line">     Message m = Message.obtain();</div><div class="line">     <span class="comment">// 记住Runnale，等消息获得执行时回调</span></div><div class="line">     m.callback = r;</div><div class="line">     <span class="keyword">return</span> m;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>不管哪种方式发送，最终消息队列MessageQueue只接受到了消息对象Message。而将消息加入到消息队列，最终通过enqueueMessage()加入。</li>
<li><p>在将消息加入消息队列时，有时需要提供延迟信息delayTime，以期未来多久后执行，这个值存于 uptimeMillis。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">       <span class="comment">// Message.target 记住 Handler 以明确是由哪一个Handler来处理这个消息的</span></div><div class="line">       msg.target = <span class="keyword">this</span>;</div><div class="line">       <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">           msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 消息入队</span></div><div class="line">       <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>之后，等待Looper轮询从消息队列中读取消息进行处理。见Looper.loop()。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">// 拿到Looper</span></div><div class="line">      <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">      <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">// 没调用prepare初始化Looper，报错</span></div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 拿到消息队列</span></div><div class="line">      <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line">      ......</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (;;) &#123;</div><div class="line">          <span class="comment">// 从消息队列取出下一个信息</span></div><div class="line">          Message msg = queue.next();</div><div class="line">          <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="comment">// 消息为空，返回</span></div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          .......</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="comment">// 分发消息到Handler</span></div><div class="line">              msg.target.dispatchMessage(msg);</div><div class="line">              end = (slowDispatchThresholdMs == <span class="number">0</span>) ? <span class="number">0</span> : SystemClock.uptimeMillis();</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// 消息回收，放入缓存池</span></div><div class="line">          msg.recycleUnchecked();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Looper从MessageQueue里取出Message，Message.target则是具体的Hander，Handler.dispatchMessage()将触发具体分配逻辑。此后，将Message回收，放入缓存池。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 这个情况说明了本次消息为Runnable，触发Runnable.run()</span></div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 指定了Handler的mCallback</span></div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 普通消息处理</span></div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Handler分配消息分三种情况：</p>
</li>
</ul>
<ol>
<li>可以通过Handler发送Runnable消息到消息队列，因此handleCallback()处理这种情况</li>
<li>可以给Handler设置Callback，当分配消息给Handler时，Callback可以优先处理此消息，如果Callback.handleMessage()返回了true，不再执行Handler.handleMessage()</li>
<li>Handler.handleMessage()处理具体逻辑</li>
</ol>
<ul>
<li><p>回收Message则是通过Message.recycleUnchecked()。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">// 这里是将Message各种属性重置操作</span></div><div class="line">       ......</div><div class="line"></div><div class="line">       <span class="keyword">synchronized</span> (sPoolSync) &#123;</div><div class="line">           <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;</div><div class="line">               <span class="comment">// 缓存池还能装下，回收到缓存池</span></div><div class="line"></div><div class="line">               <span class="comment">// 下面操作将此Message加入到缓存池头部</span></div><div class="line">               next = sPool;</div><div class="line">               sPool = <span class="keyword">this</span>;</div><div class="line">               sPoolSize++;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过上面的分析，Handler的运行如下图:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://pic.sorgs.cn/handler%E8%BF%90%E8%A1%8C%E5%9B%BE.webp" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></li>
</ul>
<ol>
<li>Handler 从缓存池获取Message，发送到MessageQueue</li>
<li>Looper不断从MessageQueue读取消息，通过Message.target.dispatchMessage()触发Handler处理逻辑</li>
<li>回收Message到缓存池</li>
</ol>
<h1 id="Java端与Native端建立连接"><a href="#Java端与Native端建立连接" class="headerlink" title="Java端与Native端建立连接"></a>Java端与Native端建立连接</h1><ul>
<li>实际上，不仅仅是Java端存在Handler机制，在Native端同样存在Handler机制。他们通过MessageQueue建立了连接。</li>
<li><p>一般来说，Looper通过prepare()进行初始化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">      <span class="comment">// 保证Looper在线程唯一</span></div><div class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 将Looper放入ThreadLocal</span></div><div class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在实例化Looper时，需要确保Looper在线程里是唯一的。Handler知道自己的具体Looper对象，而Looper运行在具体的线程里并在此线程里处理消息。这也是为什么Looper能达到切换线程的目的。Looper线程唯一需要ThreadLocal来确保，ThreadLocal的原理，简单来说Thread里有类型为ThreadLocalMap的成员threadLocals，通过ThreadLocal能将相应对象放入threadLocals里通过K/V存储，如此能保证变量在线程范围内存储，其中Key为ThreadLocal&lt; T &gt; 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">      <span class="comment">// 初始化MessageQueue</span></div><div class="line">      mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">      <span class="comment">// 记住当前线程</span></div><div class="line">      mThread = Thread.currentThread();</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123;</div><div class="line">      mQuitAllowed = quitAllowed;</div><div class="line">      <span class="comment">// 与Native建立连接</span></div><div class="line">      mPtr = nativeInit();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在MessageQueue创建时，通过native方法nativeInit()与Native端建立了连接，mPtr为long型变量，存储一个地址。方法实现文件位于<code>frameworks/base/core/jni/android_os_MessageQueue.cpp</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">android_os_MessageQueue_nativeInit</span><span class="params">(JNIEnv* env, jclass clazz)</span> </span>&#123;</div><div class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">new</span> NativeMessageQueue();</div><div class="line">    <span class="keyword">if</span> (!nativeMessageQueue) &#123;</div><div class="line">        jniThrowRuntimeException(env, <span class="string">"Unable to allocate native queue"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    nativeMessageQueue-&gt;incStrong(env);</div><div class="line"></div><div class="line">    <span class="comment">// 返回给Java层的mPtr, NativeMessageQueue地址值</span></div><div class="line">    <span class="keyword">return</span> reinterpret_cast&lt;jlong&gt;(nativeMessageQueue);</div><div class="line">&#125;</div><div class="line"></div><div class="line">NativeMessageQueue::NativeMessageQueue() :</div><div class="line">        mPollEnv(NULL), mPollObj(NULL), mExceptionObj(NULL) &#123;</div><div class="line">    mLooper = Looper::getForThread();</div><div class="line">    <span class="comment">// 检查Looper 是否创建</span></div><div class="line">    <span class="keyword">if</span> (mLooper == NULL) &#123;</div><div class="line">        mLooper = <span class="keyword">new</span> Looper(<span class="keyword">false</span>);</div><div class="line">        <span class="comment">// 确保Looper唯一</span></div><div class="line">        Looper::setForThread(mLooper);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在Native端创建了NativeMessageQueue，同样也创建了Native端的Looper。在创建NativeMessageQueue后，将它的地址值返回给了Java层MessageQueue.mPtr。实际上，Native端Looper实例化时做了更多事情。Nativ端Looper文件位于<code>system/core/libutils/Looper.cpp</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">Looper::Looper(bool allowNonCallbacks) :</div><div class="line">        mAllowNonCallbacks(allowNonCallbacks), mSendingMessage(<span class="keyword">false</span>),</div><div class="line">        mPolling(<span class="keyword">false</span>), mEpollFd(-<span class="number">1</span>), mEpollRebuildRequired(<span class="keyword">false</span>),</div><div class="line">        mNextRequestSeq(<span class="number">0</span>), mResponseIndex(<span class="number">0</span>), mNextMessageUptime(LLONG_MAX) &#123;</div><div class="line">    <span class="comment">// 添加到epoll的文件描述符，线程唤醒事件的fd</span></div><div class="line">    mWakeEventFd = eventfd(<span class="number">0</span>, EFD_NONBLOCK | EFD_CLOEXEC);</div><div class="line">    LOG_ALWAYS_FATAL_IF(mWakeEventFd &lt; <span class="number">0</span>, <span class="string">"Could not make wake event fd: %s"</span>,</div><div class="line">                        strerror(errno));</div><div class="line"></div><div class="line">    <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</div><div class="line">    rebuildEpollLocked();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> Looper::rebuildEpollLocked() &#123;</div><div class="line">    .....</div><div class="line"></div><div class="line">    <span class="comment">// Allocate the new epoll instance and register the wake pipe.</span></div><div class="line">    <span class="comment">// 创建epolle实例，并注册wake管道</span></div><div class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);</div><div class="line">    LOG_ALWAYS_FATAL_IF(mEpollFd &lt; <span class="number">0</span>, <span class="string">"Could not create epoll instance: %s"</span>, strerror(errno));</div><div class="line"></div><div class="line">    struct epoll_event eventItem;</div><div class="line">    <span class="comment">// 清空，把未使用的数据区域进行置0操作</span></div><div class="line">    memset(&amp; eventItem, <span class="number">0</span>, sizeof(epoll_event)); <span class="comment">// zero out unused members of data field union</span></div><div class="line">    <span class="comment">// 监听可读事件</span></div><div class="line">    eventItem.events = EPOLLIN;</div><div class="line">    <span class="comment">// 设置作为唤醒评判的fd</span></div><div class="line">    eventItem.data.fd = mWakeEventFd;</div><div class="line">    <span class="comment">// 将唤醒事件（mWakeEventFd）添加到epoll实例，意为放置一个唤醒机制</span></div><div class="line">    <span class="keyword">int</span> result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeEventFd, &amp; eventItem);</div><div class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not add wake event fd to epoll instance: %s"</span>,</div><div class="line">                        strerror(errno));</div><div class="line"></div><div class="line">    <span class="comment">// 添加各种事件的fd到epoll实例，如键盘、传感器输入等</span></div><div class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; mRequests.size(); i++) &#123;</div><div class="line">        <span class="keyword">const</span> Request&amp; request = mRequests.valueAt(i);</div><div class="line">        struct epoll_event eventItem;</div><div class="line">        request.initEventItem(&amp;eventItem);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> epollResult = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, request.fd, &amp; eventItem);</div><div class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</div><div class="line">            ALOGE(<span class="string">"Error adding epoll events for fd %d while rebuilding epoll set: %s"</span>,</div><div class="line">                  request.fd, strerror(errno));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="如何理解epoll机制？"><a href="#如何理解epoll机制？" class="headerlink" title="如何理解epoll机制？"></a>如何理解epoll机制？</h2><ul>
<li>文件、socket、pipe(管道)等可以进行I/O操作的对象可以视为流。既然是I/O操作，则有read端读入数据，有write端写入数据。但是两端并不知道对方进行操作的时机。而epoll则能观察到哪个流发生了了I/O事件，并进行通知。</li>
<li>这个过程，就好比你在等快递，但你不知道快递什么时候来，那这时你可以去睡觉，因为你知道快递送来时一定会打个电话叫醒你，让你拿快递，接着做你想的事情。</li>
<li>epoll有效地降低了CPU的使用，在线程空间时令其休眠，等有事件到来时再讲它唤醒。</li>
<li>在知道了epoll之后，再来看上面的代码，就可以理解了。在Native端创建Looper时，会创建用来唤醒线程的fd —— <code>mWakeEventFd</code>，创建epoll实例并注册管道，清空管道数据，监听可读事件。当有数据写入mWakeEventFd描述的文件时，epoll能监听到此事件，并通知将目标线程唤醒。</li>
<li>在Java端MessageQueue.mPrt存储了Native端NativeMassageQueue的地址，可以利用NativeMassageQueue享用此机制。</li>
</ul>
<h1 id="发送数据的具体过程"><a href="#发送数据的具体过程" class="headerlink" title="发送数据的具体过程"></a>发送数据的具体过程</h1><ul>
<li><p>Handler发送消息时，最终通过MessageQueue.enqueueMessage向消息队列中插入消息，下面为具体代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">     ......</div><div class="line"></div><div class="line">     <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">         ......</div><div class="line"></div><div class="line">         <span class="comment">// 记录消息处理的时间</span></div><div class="line">         msg.when = when;</div><div class="line">         Message p = mMessages;</div><div class="line">         <span class="comment">// 唤醒线程的标志位</span></div><div class="line">         <span class="keyword">boolean</span> needWake;</div><div class="line">         <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">             <span class="comment">// 这里三种情况：</span></div><div class="line">             <span class="comment">// 1、目标消息队列是空队列</span></div><div class="line">             <span class="comment">// 2、插入的消息处理时间等于0</span></div><div class="line">             <span class="comment">// 3、插入的消息处理时间小于保存在消息队列头的消息处理时间</span></div><div class="line">             <span class="comment">// 这三种情况都插入列表头</span></div><div class="line">             msg.next = p;</div><div class="line">             mMessages = msg;</div><div class="line">             <span class="comment">// mBlocked 表示当前线程是否睡眠</span></div><div class="line">             needWake = mBlocked;</div><div class="line">         &#125; <span class="keyword">else</span> &#123;</div><div class="line">             <span class="comment">// 这里则说明消息处理时间大于消息列表头的处理时间，因此需要找到合适的插入位置</span></div><div class="line"></div><div class="line">             needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">             Message prev;</div><div class="line">             <span class="comment">// 这里的循环是找到消息的插入位置</span></div><div class="line">             <span class="keyword">for</span> (;;) &#123;</div><div class="line">                 prev = p;</div><div class="line">                 p = p.next;</div><div class="line">                 <span class="comment">// 到链表尾，或处理时间早于p的时间</span></div><div class="line">                 <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                     <span class="keyword">break</span>;</div><div class="line">                 &#125;</div><div class="line">                 <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                     <span class="comment">// 如果插入的消息在目标队列中间，是不需要检查改变线程唤醒状态的</span></div><div class="line">                     needWake = <span class="keyword">false</span>;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">             <span class="comment">// 插入到消息队列</span></div><div class="line">             msg.next = p; </div><div class="line">             prev.next = msg;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (needWake) &#123;</div><div class="line">             <span class="comment">// 唤醒线程</span></div><div class="line">             nativeWake(mPtr);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>消息队列里的消息也是以链表形式存储，存储顺序则按照处理的时间顺序。那么在向消息队列里插入数据时，存在四种情况：</p>
<ul>
<li>目标消息队列是空队列</li>
<li>插入的消息处理时间等于0</li>
<li>插入的消息处理时间小于保存在消息队列头的消息处理时间</li>
<li>插入的消息处理时间大于消息队列头的消息处理时间</li>
</ul>
</li>
<li>前三种情况，将消息插入消息队列头的位置，在这种情况下，因为不能保证当前消息是否达到了可以处理的状态，且如果此时线程是睡眠的，则需要调用nativeWake()将其线程唤醒。后一种情况，则需要找到消息的插入位置，因不影响线程状态而需要改变线程状态。插入消息如图:<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://pic.sorgs.cn/handler%E7%9A%84message%E6%8F%92%E5%85%A5.webp" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></li>
<li><p>mPtr保存了<code>NativeMessageQueue</code>的地址，所以Native可以知道具体操作<code>的NativeMessageQueue</code>，当前用它来唤醒线程，实际调用链为<code>MessageQueue.cpp.nativeWake()</code>到<code>MessageQueue.cpp.wake()</code>到<code>Looper.cpp.wake()</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">void Looper::wake() &#123;</div><div class="line">#if DEBUG_POLL_AND_WAKE</div><div class="line">    ALOGD("%p ~ wake", this);</div><div class="line">#endif</div><div class="line"></div><div class="line">    uint64_t inc = 1;</div><div class="line">    // 向管道写入一个新数据，这样管道因为发生了IO事件被唤醒</div><div class="line">    ssize_t nWrite = TEMP_FAILURE_RETRY(write(mWakeEventFd, &amp;inc, sizeof(uint64_t)));</div><div class="line">    if (nWrite != sizeof(uint64_t)) &#123;</div><div class="line">        if (errno != EAGAIN) &#123;</div><div class="line">            LOG_ALWAYS_FATAL("Could not write wake signal to fd %d: %s",</div><div class="line">                    mWakeEventFd, strerror(errno));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现也简单，向mWakeEventFd文件里写入一个数据，根据epoll机制监听到此次I/O事件，将线程唤醒。</p>
</li>
</ul>
<h1 id="消息读取"><a href="#消息读取" class="headerlink" title="消息读取"></a>消息读取</h1><ul>
<li><p>Looper不断从MessageQueue读取消息进行处理，通过MessageQueue.next()进行读取。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</div><div class="line">        <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 获取NativeMessageQueue地址失败，无法正常使用epoll机制</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 用来保存注册到消息队列中的空闲消息处理器（IdleHandler）的个数</span></div><div class="line">        <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; </div><div class="line">        <span class="comment">// 如果这个变量等于0，表示即便消息队列中没有新的消息需要处理，当前</span></div><div class="line">        <span class="comment">// 线程也不要进入睡眠等待状态。如果值等于-1，那么就表示当消息队列中没有新的消息</span></div><div class="line">        <span class="comment">// 需要处理时，当前线程需要无限地处于休眠等待状态，直到它被其它线程唤醒为止</span></div><div class="line">        <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            ......</div><div class="line"></div><div class="line">            <span class="comment">// 检查当前线程的消息队列中是否有新的消息需要处理，尝试进入休眠</span></div><div class="line">            nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                <span class="comment">// 当前时间</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">                Message prevMsg = <span class="keyword">null</span>;</div><div class="line">                <span class="comment">// mMessages 表示当前线程需要处理的消息</span></div><div class="line">                Message msg = mMessages;</div><div class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 找到有效的Message</span></div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        prevMsg = msg;</div><div class="line">                        msg = msg.next;</div><div class="line">                    &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">/**</span></div><div class="line">                     * 检查当前时间和消息要被处理的时间，如果小于当前时间，说明马上要进行处理</div><div class="line">                     */</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                        <span class="comment">// 还没达到下一个消息需要被处理的时间，计算需要休眠的时间</span></div><div class="line">                        nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// 有消息需要处理</span></div><div class="line">                        <span class="comment">// 不要进入休眠</span></div><div class="line">                        mBlocked = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                            prevMsg.next = msg.next;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 指向下一个需要处理的消息</span></div><div class="line">                            mMessages = msg.next;</div><div class="line">                        &#125;</div><div class="line">                        msg.next = <span class="keyword">null</span>;</div><div class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                        msg.markInUse();</div><div class="line">                        <span class="keyword">return</span> msg;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 没有更多消息，休眠时间无限</span></div><div class="line">                    nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                ......</div><div class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></div><div class="line">                        &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</div><div class="line">                    <span class="comment">// 获取IdleHandler数</span></div><div class="line">                    pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 没有IdleHandler需要处理，可直接进入休眠</span></div><div class="line">                    mBlocked = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</div><div class="line">                    mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</div><div class="line">                &#125;</div><div class="line">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 如果没有更多要进行处理的消息，在休眠之前，发送线程空闲消息给已注册到消息队列中的IdleHandler对象来处理</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class="line">                <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class="line">                mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></div><div class="line"></div><div class="line">                <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 处理对应逻辑，并由自己决定是否保持激活状态</span></div><div class="line">                    keep = idler.queueIdle();</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                    Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (!keep) &#123;</div><div class="line">                    <span class="comment">// 不需要存活，移除</span></div><div class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                        mIdleHandlers.remove(idler);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 重置IdleHandler数量</span></div><div class="line">            pendingIdleHandlerCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 这里置0，表示下一次循环不能马上进入休眠状态，因为IdleHandler在处理事件的时间里，</div><div class="line">             * 有可能有新的消息发送来过来，需要重新检查。</div><div class="line">             */</div><div class="line">            nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>分为两种情况处理：</p>
<ul>
<li>取到消息Message时:<ul>
<li>需要查看当前时间是否达到了Message处理的时间，如果达到了则返回，改变mMessages指向下一消息。如果没达到，则计算要达到处理的时间，还需要休眠多久，并进行休眠。</li>
</ul>
</li>
<li>没有更多Message时:<ul>
<li>当消息队列里没有消息时，则会检查是否有IdleHandler需要处理。在Handler机制里，允许添加一些事件，在线程空闲时进行处理，表现为IdleHandler，可以通过MessageQueue.addIdleHandler添加。当有IdleHandler需要处理，则在IdleHandler处理完后，线程不能马上进入休眠状态，在此期间可能已有新消息加入消息队列，需要重新做检查。如果没有IdleHandler，则可以进入休眠。</li>
</ul>
</li>
</ul>
</li>
<li><p>线程休眠调用链为<code>NativeMessageQueue.nativePollOnce()</code>到<code>NativeMessageQueue.pollOnce()</code>到<code>Looper.pollOnce()</code>到<code>Looper.pollInner()</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> Looper::pollInner(<span class="keyword">int</span> timeoutMillis) &#123;</div><div class="line">......</div><div class="line">    <span class="comment">// 这个是用来监听实例化时创建的epoll实例的文件描述符的IO读写事件</span></div><div class="line">    struct epoll_event eventItems[EPOLL_MAX_EVENTS];</div><div class="line">    <span class="comment">// 如果没有事件，进入休眠，timeoutMillis为休眠事件</span></div><div class="line">    <span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 检测是哪一个文件描述符发生了IO读写事件</div><div class="line">    */</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</div><div class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;</div><div class="line">        uint32_t epollEvents = eventItems[i].events;</div><div class="line">        <span class="keyword">if</span> (fd == mWakeEventFd) &#123;</div><div class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</div><div class="line">            <span class="comment">// 如果文件描述符为mWakeEventFd，并且读写事件类型为EPOLLIN，说明</span></div><div class="line">            <span class="comment">// 当前线程所关联的一个管道被写入了一个新的数据</span></div><div class="line">            <span class="comment">// 唤醒</span></div><div class="line">                awoken();</div><div class="line">            &#125;                </div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Java层提供了线程休眠时间timeoutMillis，通过epoll_wait()让线程进行休眠。当线程被唤醒后，查看文件描述符，如果为mWakeEventFd并且为I/O事件，则说明当前线程所关联的一个管道被写入了一个新的数据，通过awoken()处理。当前线程已是唤醒状态，awoken()则是将管道中的数据读出达到清理目的，但并不关心数据什么。核心目的是唤醒线程。</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>Handler机制更具体的原理如图：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://pic.sorgs.cn/handler%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E6%80%BB%E5%9B%BE.webp" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></li>
</ul>
<ol>
<li>Looper通过prepare()创建，借助ThreadLocal保证线程唯一，如果没有进行prepare()，调用Loop()会抛出异常;</li>
<li>Looper在实例化时创建MessageQueue，MessageQueue与NativeMessageQueue建立连接，NativeMessageQueue存储地址存于MessageQueue.mPtr。Native端也建立了Handler机制，使用epoll机制。Java端借由NativeMessageQueue能达到使用epoll机制的目的;</li>
<li>从Message缓存里获取Message，缓存为链表存储，从头出取出，并且Message在回收时也是插入头部。如果存缓存里取不到，则新建;</li>
<li>Handler向MessageQueue插入消息，如果消息插入消息队列头部，需要唤醒线程；如果插入消息队列中，无需改变线程状态;</li>
<li>Looper.loop() 不断从消息队列获取消息，消息队列获取消息时会出现两种情况。如果取到消息，但没达到处理时间，则让线程休眠；如果没有更多消息，则在处理IdleHandler事后，在考虑让线程进入休眠;</li>
<li>Message达到了可处理状态，则有Handler处理，处理时考虑三种情况，消息内容为Runnable时、设置了Handle.Callback时、普通消息时，对应调用为<code>Message.callback.run()</code> 、 <code>Callback.handleMessage()</code>、<code>Handler.handleMessage()</code>;</li>
<li>从Handler机制里，epoll可以简单理解为，当Handler机制没有消息要处理时，让线程进入休眠，当Handler机制有消息要处理时，将线程唤起。通过Native端监听mWakeEventFd的I/O事件实现。</li>
</ol>
<h1 id="疑问点"><a href="#疑问点" class="headerlink" title="疑问点"></a>疑问点</h1><h2 id="Handler如何保证运行在目标线程"><a href="#Handler如何保证运行在目标线程" class="headerlink" title="Handler如何保证运行在目标线程"></a>Handler如何保证运行在目标线程</h2><ul>
<li>Looper在实例化时通过ThreadLocal保证线程唯一。Looper运行在目标线程中，接收Handler发送的消息并进行处理。Message创建时与具体的Handler进行了关联，因此能知道由哪一个Handler进行相应。</li>
</ul>
<h2 id="Handler容易造成内存泄漏的原因"><a href="#Handler容易造成内存泄漏的原因" class="headerlink" title="Handler容易造成内存泄漏的原因"></a>Handler容易造成内存泄漏的原因</h2><ul>
<li>Message.target存有Handler的引用，以知道自身由哪一个Handler来处理。因此，当Handler为非静态内部类、或持有关键对象的其它表现形式时（如Activity常表现为Context），就引用了其它外部对象。当Message得不到处理时，被Handler持有的外部对象会一直处于内存泄漏状态。</li>
</ul>
<h2 id="loop-为什么不会阻塞，CPU为什么不会忙等"><a href="#loop-为什么不会阻塞，CPU为什么不会忙等" class="headerlink" title="loop()为什么不会阻塞，CPU为什么不会忙等"></a>loop()为什么不会阻塞，CPU为什么不会忙等</h2><ul>
<li>通过epoll机制监听文件I/O时间，在有Message需要处理时，写入数据以唤醒线程；在没有Message要处理时，让线程进入休眠状态。</li>
</ul>
<h2 id="MessageQueue如何存储"><a href="#MessageQueue如何存储" class="headerlink" title="MessageQueue如何存储"></a>MessageQueue如何存储</h2><ul>
<li>以链表存储，MessageQueue.mMessages指向头节点。</li>
</ul>
<h2 id="Message如何缓存"><a href="#Message如何缓存" class="headerlink" title="Message如何缓存"></a>Message如何缓存</h2><ul>
<li>以链表缓存，取出时从头部取出，回收时插入头部。</li>
</ul>
<h2 id="什么是线程空闲消息"><a href="#什么是线程空闲消息" class="headerlink" title="什么是线程空闲消息"></a>什么是线程空闲消息</h2><ul>
<li>Handler提供的一种机制，允许添加IdleHandler事件。并在没有更多Message要处理，要进入休眠前，让IdleHandler做具体事情，也就是线程空间时处理的事件。</li>
</ul>
<h2 id="子线程如何使用Handler机制"><a href="#子线程如何使用Handler机制" class="headerlink" title="子线程如何使用Handler机制"></a>子线程如何使用Handler机制</h2><ul>
<li>只要保证在子线程先执行Looper.prepare()再使用Looper.Loop()即可，但实际应用场景不多。顺便提一句，主线程初始化Looper操作在ActivityTread.main()里触发，简单了解即可。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Handler机制笔记，原文地址&lt;a href=&quot;https://mp.weixin.qq.com/s/7PAMm_FPrA0P3jf0tn3yyQ&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;：https://mp.weixi
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="Handler" scheme="http://sorgs.cn/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>Android每日一问笔记-哪些 Context调用 startActivity 需要设置NEW_TASK</title>
    <link href="http://sorgs.cn/post/3427/"/>
    <id>http://sorgs.cn/post/3427/</id>
    <published>2019-08-05T12:58:49.000Z</published>
    <updated>2019-08-15T01:29:03.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于<a href="https://www.wanandroid.com/article/list/0?cid=440" target="_blank" rel="external">https://www.wanandroid.com</a>每日一问的笔记，做一些整理，方便自己进行查看和记忆。</p>
<p>原文链接：<a href="https://www.wanandroid.com/wenda/show/8697" target="_blank" rel="external">https://www.wanandroid.com/wenda/show/8697</a><br>以及<a href="https://mp.weixin.qq.com/s/XtWQajY6cR-geHpPCdl-bQ" target="_blank" rel="external">nanchen的文章</a></p>
</blockquote>
<hr>
<ul>
<li>使用非 Activity 的 startActivity()的时候，都需要指定Intent.FLAG_ACTIVITY_NEW_TASK，如果没有指定，直接进行操作则会直接抛出异常</li>
<li><p>使用 applicationContext 来做 startActivity() 操作，却没有指定任何的 FLAG，但是，在 8.0 的手机上，你一定会惊讶的发现，我们并没有等到意料内的崩溃日志，而且跳转也是非常正常，这不由得和我们印象中必须加 FLAG 的结论大相径庭。然后再拿一个 9.0 的手机来尝试，马上就出现了上面的崩溃</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//SDK 26</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</div><div class="line">    warnIfCallingFromSystemProcess();</div><div class="line"></div><div class="line">    <span class="comment">// Calling start activity from outside an activity without FLAG_ACTIVITY_NEW_TASK is</span></div><div class="line">    <span class="comment">// generally not allowed, except if the caller specifies the task id the activity should</span></div><div class="line">    <span class="comment">// be launched in.</span></div><div class="line">    <span class="keyword">if</span> ((intent.getFlags()&amp;Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span></div><div class="line">            &amp;&amp; options != <span class="keyword">null</span> &amp;&amp; ActivityOptions.fromBundle(options).getLaunchTaskId() == -<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</div><div class="line">                <span class="string">"Calling startActivity() from outside of an Activity "</span></div><div class="line">                + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></div><div class="line">                + <span class="string">" Is this really what you want?"</span>);</div><div class="line">    &#125;</div><div class="line">    mMainThread.getInstrumentation().execStartActivity(</div><div class="line">            getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</div><div class="line">            (Activity) <span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//SDK 28</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(Intent intent, Bundle options)</span> </span>&#123;</div><div class="line">    warnIfCallingFromSystemProcess();</div><div class="line"></div><div class="line">    <span class="comment">// Calling start activity from outside an activity without FLAG_ACTIVITY_NEW_TASK is</span></div><div class="line">    <span class="comment">// generally not allowed, except if the caller specifies the task id the activity should</span></div><div class="line">    <span class="comment">// be launched in. A bug was existed between N and O-MR1 which allowed this to work. We</span></div><div class="line">    <span class="comment">// maintain this for backwards compatibility.</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> targetSdkVersion = getApplicationInfo().targetSdkVersion;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span></div><div class="line">            &amp;&amp; (targetSdkVersion &lt; Build.VERSION_CODES.N</div><div class="line">                    || targetSdkVersion &gt;= Build.VERSION_CODES.P)</div><div class="line">            &amp;&amp; (options == <span class="keyword">null</span></div><div class="line">                    || ActivityOptions.fromBundle(options).getLaunchTaskId() == -<span class="number">1</span>)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(</div><div class="line">                <span class="string">"Calling startActivity() from outside of an Activity "</span></div><div class="line">                        + <span class="string">" context requires the FLAG_ACTIVITY_NEW_TASK flag."</span></div><div class="line">                        + <span class="string">" Is this really what you want?"</span>);</div><div class="line">    &#125;</div><div class="line">    mMainThread.getInstrumentation().execStartActivity(</div><div class="line">            getOuterContext(), mMainThread.getApplicationThread(), <span class="keyword">null</span>,</div><div class="line">            (Activity) <span class="keyword">null</span>, intent, -<span class="number">1</span>, options);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 Context.startActivity() 的时候是一定要加上 FLAG_ACTIVITY_NEW_TASK 的，但是在 Android N 到 O-MR1，即 24~27 之间却出现了 bug，即使没有加也会正确跳转。</p>
</li>
<li>非 Activity 调用 startActivity() 的时候，我们这个 options通常是 null 的，所以在 24~27 之间的时候，误把判断条件 options == null 写成了options != null 导致进不去 if，从而不会抛出异常。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于&lt;a href=&quot;https://www.wanandroid.com/article/list/0?cid=440&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.wanandroid.com&lt;/a&gt;每
    
    </summary>
    
      <category term="Android面试" scheme="http://sorgs.cn/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="每日一问笔记" scheme="http://sorgs.cn/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%97%AE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="http://sorgs.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="http://sorgs.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>利用Retrofit+RxJava简单封装网络请求库</title>
    <link href="http://sorgs.cn/post/15217/"/>
    <id>http://sorgs.cn/post/15217/</id>
    <published>2019-08-01T08:13:35.000Z</published>
    <updated>2019-08-15T01:29:03.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>网络请求在移动端是极为常见和重要，随处可见。为此，为了避免到处使用增加内存和性能，以及方便使用和解耦，进行网络库的简单封装。</p>
</blockquote>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol>
<li>解耦：对下面使用的网络请求框架和上层网络进行解耦。方便底层可以根据业务要求换更网络请求网络也不影响到上层业务逻辑。</li>
<li>方便：对使用的场景极为方便，仅仅5行左右代码，即可完成一次网络请求以及数据处理。</li>
<li>解放：解放繁琐的线程切换，错误处理和判断，数据处理，Json的转换等，使调用方不必考虑与业务逻辑无关的事情。</li>
<li>透明：调用方对调用的函数使用起来简单，便于理解</li>
</ol>
<h1 id="Retrofit简介"><a href="#Retrofit简介" class="headerlink" title="Retrofit简介"></a>Retrofit简介</h1><ul>
<li>Retrofit，一个远近闻名的网络框架，它是由Square公司开源的。Square公司，是我们的老熟人了，很多框架都是他开源的，比如OkHttp，picasso，leakcanary等等。他们公司的很多开源库，几乎已经成为现在开发Android APP的标配。</li>
<li>简单来说，Retrofit其实是底层还是用的OkHttp来进行网络请求的，只不过他包装了一下，使得开发者在使用访问网络的时候更加方便简单高效。</li>
<li>一句话总结：Retrofit将接口动态生成实现类，该接口定义了请求方式+路径+参数等注解，Retrofit可以方便得从注解中获取这些参数，然后拼接起来，通过OkHttp访问网络。</li>
</ul>
<h1 id="Retrofit简单使用"><a href="#Retrofit简单使用" class="headerlink" title="Retrofit简单使用"></a>Retrofit简单使用</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><ul>
<li>引入retrofit2以及需要转化使用的Gson</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">implementation &apos;com.squareup.retrofit2:retrofit:2.3.0&apos;</div><div class="line">implementation &apos;com.squareup.retrofit2:converter-gson:2.3.0&apos;</div></pre></td></tr></table></figure>
<h2 id="API的interface接口"><a href="#API的interface接口" class="headerlink" title="API的interface接口"></a>API的interface接口</h2><ul>
<li>需要先定义出注解的接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Request</span> </span>&#123;</div><div class="line">    companion object &#123;</div><div class="line">        val HOST = <span class="string">"http://42.157.129.91/"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"user/sorgs"</span>)</div><div class="line">    <span class="function">fun <span class="title">getSorgs</span><span class="params">(@Query(<span class="string">"id"</span>)</span> id: String): Observable&lt;ResponseData&lt;JavaBean&gt;&gt;</span></div><div class="line"></div><div class="line">    @<span class="title">POST</span><span class="params">(<span class="string">"user/sorgs"</span>)</span></div><div class="line">    fun <span class="title">getCallTest</span><span class="params">(@Query(<span class="string">"id"</span>)</span> id: String): Call&lt;ResponseData&lt;JavaBean&gt;&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义出静态字符串HOST，用来限定请求的服务器，即BaseUrl</li>
<li>定义出接口方法，<code>@POST</code>用于指定请求的方式，包括POST，GET等。</li>
<li>方法需要定义出返回值以及接受的参数</li>
</ul>
<h2 id="创建Retrofit实例"><a href="#创建Retrofit实例" class="headerlink" title="创建Retrofit实例"></a>创建Retrofit实例</h2><ul>
<li>通过构造者方式，创建出Retrofit实例</li>
<li>baseUrl即传入服务器地址</li>
<li>addConverterFactory为转化工厂，我们需要将获取的Json直接通过Gson转化为Bean对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化Retrofit</span></div><div class="line">val request = Retrofit.Builder()</div><div class="line">        .client(client)</div><div class="line">        .baseUrl(Request.HOST)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .build()</div></pre></td></tr></table></figure>
<h2 id="API接口转换成实例"><a href="#API接口转换成实例" class="headerlink" title="API接口转换成实例"></a>API接口转换成实例</h2><ul>
<li>将刚定义的interface文件引入转化为实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val callApi = request.create(Request::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div></pre></td></tr></table></figure>
<h2 id="进行网络请求"><a href="#进行网络请求" class="headerlink" title="进行网络请求"></a>进行网络请求</h2><ul>
<li>直接调用interface定义的请求方法，调用enqueue方法进行回调Callback返回请求成功以及失败</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">callApi.getCallTest(<span class="string">"1"</span>).enqueue(object : Callback&lt;ResponseData&lt;JavaBean&gt;&gt; &#123;</div><div class="line">    <span class="function">override fun <span class="title">onFailure</span><span class="params">(call: Call&lt;ResponseData&lt;JavaBean&gt;&gt;, t: Throwable)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"sorgs"</span>, <span class="string">"btnTest3 e:$&#123;t.message&#125;"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function">override fun <span class="title">onResponse</span><span class="params">(call: Call&lt;ResponseData&lt;JavaBean&gt;&gt;,</span></span></div><div class="line">                            responseData: Response&lt;ResponseData&lt;JavaBean&gt;&gt;) &#123;</div><div class="line">        Log.i(<span class="string">"sorgs"</span>, <span class="string">"btnTest3 JavaBean:$&#123;(responseData.body()?.data as JavaBean).name&#125;"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="封装网络库"><a href="#封装网络库" class="headerlink" title="封装网络库"></a>封装网络库</h1><blockquote>
<p>上诉简单使用仅仅是demo如此写，如果放到实际业务中，还需考虑request的创建单例化，日志拦截查看，线程切换，数据处理以及错误处理</p>
</blockquote>
<h2 id="应用依赖"><a href="#应用依赖" class="headerlink" title="应用依赖"></a>应用依赖</h2><h2 id="单例建立NetWorkManager"><a href="#单例建立NetWorkManager" class="headerlink" title="单例建立NetWorkManager"></a>单例建立NetWorkManager</h2><ul>
<li>通过单例构建retrofit等</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> var retrofit: Retrofit? = <span class="keyword">null</span></div><div class="line"><span class="comment">//单例获取NetWorkManager</span></div><div class="line">val instant: <span class="function">NetWorkManager by <span class="title">lazy</span><span class="params">(mode = LazyThreadSafetyMode.SYNCHRONIZED)</span> </span>&#123; NetWorkManager() &#125;</div><div class="line">val request: Request? <span class="function">by <span class="title">lazy</span><span class="params">(mode = LazyThreadSafetyMode.SYNCHRONIZED)</span> </span>&#123;</div><div class="line">    retrofit?.create(Request::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>进行初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化必要对象和参数</div><div class="line"> * <span class="doctag">@param</span> baseUrl 基础连接</div><div class="line"> */</div><div class="line"><span class="function">fun <span class="title">init</span><span class="params">(baseUrl: String)</span> </span>&#123;</div><div class="line">    val logging = HttpLoggingInterceptor()</div><div class="line">    logging.level = <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">        HttpLoggingInterceptor.Level.BODY</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        HttpLoggingInterceptor.Level.NONE</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* val logging2 = HttpLoggingInterceptor()</span></div><div class="line">     logging2.level = HttpLoggingInterceptor.Level.HEADERS*/</div><div class="line">    <span class="comment">// 初始化okhttp</span></div><div class="line">    val client = OkHttpClient.Builder()</div><div class="line">            <span class="comment">//.addInterceptor(logging2)</span></div><div class="line">            .addInterceptor(logging)</div><div class="line">            .build()</div><div class="line">    <span class="comment">// 初始化Retrofit</span></div><div class="line">    retrofit = Retrofit.Builder()</div><div class="line">            .client(client)</div><div class="line">            .baseUrl(baseUrl)</div><div class="line">            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">            .addConverterFactory(GsonConverterFactory.create())</div><div class="line">            .build()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在初始化时候，构建HttpLoggingInterceptor，用于日志拦截。并利用BuildConfig.DEBUG进行区分，因为不希望在正式包里面也暴露出请求信息</li>
<li>日志拦截分为NONE、BASIC、HEADERS以及BODY，一般来说使用BASIC以及BODY，为了方便调试和查看，使用BODY更加方便。</li>
<li>同时addInterceptor是可以添加多个的，可以同时把BASIC和BODY添加上进行打印输出。通过client()构建到retrofit中。</li>
<li>retrofit的构造，同时加入<code>addCallAdapterFactory(RxJava2CallAdapterFactory.create())</code>,直接把RxJava引入，方便错误处理，数据处理，线程切换等</li>
</ul>
<h2 id="接口返回数据封装"><a href="#接口返回数据封装" class="headerlink" title="接口返回数据封装"></a>接口返回数据封装</h2><ul>
<li>服务器返回的数据，一般都是有严格的格式，分为code、msg和data。真实数据包含在data中，code和msg是用来进行判断这次请求的结果，这些判断我们就需要在底层直接处理好，所以直接封装起来。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * description: 接口返回数据封装.</div><div class="line"> * &#123;code:0,data:"",msg:""&#125;</div><div class="line"> * code：接口返回的code 一定不能为空</div><div class="line"> * data：接口返回具体的数据结果 可能为空</div><div class="line"> * msg：message 可用来返回接口的说明 可能为空</div><div class="line"> *</div><div class="line"> * @author Sorgs.</div><div class="line"> * Created date: 2019/7/30.</div><div class="line"> */</div><div class="line">data class ResponseData&lt;T&gt;(</div><div class="line">        var code: Int,</div><div class="line">        var data: T?,</div><div class="line">        var msg: String?</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul>
<li>错误处理分为了服务器异常和本地异常<ul>
<li>服务器异常包括404,500等</li>
<li>本地异常情况更多，包括网络错误，连接异常等</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * description: 非服务器产生的异常，比如本地无无网络请求，Json数据解析错误等等.</div><div class="line"></div><div class="line"> * @author Sorgs.</div><div class="line"> * Created date: 2019/7/30.</div><div class="line"> */</div><div class="line">class ErrorResumeFunction&lt;T&gt; : Function&lt;Throwable, ObservableSource&lt;out ResponseData&lt;T&gt;&gt;&gt; &#123;</div><div class="line">    override fun apply(throwable: Throwable): ObservableSource&lt;out ResponseData&lt;T&gt;&gt; &#123;</div><div class="line">        return Observable.error(CustomException.handleException(throwable))</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * description: 自定义异常处理，包括解析异常等其他异常.</div><div class="line"> *</div><div class="line"> * @author Sorgs.</div><div class="line"> * Created date: 2019/7/30.</div><div class="line"> */</div><div class="line">object CustomException &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 未知错误</div><div class="line">     */</div><div class="line">    const val UNKNOWN = 1000</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 解析错误</div><div class="line">     */</div><div class="line">    const val PARSE_ERROR = 1001</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 网络错误</div><div class="line">     */</div><div class="line">    const val NETWORK_ERROR = 1002</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 协议错误</div><div class="line">     */</div><div class="line">    const val HTTP_ERROR = 1003</div><div class="line"></div><div class="line">    fun handleException(e: Throwable): LocalException &#123;</div><div class="line">        val ex: LocalException</div><div class="line">        if (e is JsonParseException</div><div class="line">                || e is JSONException</div><div class="line">                || e is ParseException</div><div class="line">        ) &#123;</div><div class="line">            //解析错误</div><div class="line">            ex = LocalException(PARSE_ERROR, e.message)</div><div class="line">            return ex</div><div class="line">        &#125; else if (e is ConnectException) &#123;</div><div class="line">            //网络错误</div><div class="line">            ex = LocalException(NETWORK_ERROR, e.message)</div><div class="line">            return ex</div><div class="line">        &#125; else if (e is UnknownHostException || e is SocketTimeoutException) &#123;</div><div class="line">            //连接错误</div><div class="line">            ex = LocalException(NETWORK_ERROR, e.message)</div><div class="line">            return ex</div><div class="line">        &#125; else &#123;</div><div class="line">            //未知错误</div><div class="line">            ex = LocalException(UNKNOWN, e.message)</div><div class="line">            return ex</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">- 把异常进行封装成自己的异常处理。提前把Json转化出错，网络错误，连接异常处理出来</div><div class="line">- 再利用继承ResponseFunction进行处理服务器异常处理，然后把异常进行封装。正确的数据发送到下游</div><div class="line"></div><div class="line">```java</div><div class="line">/**</div><div class="line"> * description: 服务其返回的数据解析</div><div class="line"> * 正常服务器返回数据和服务器可能返回的exception.</div><div class="line"></div><div class="line"> * @author Sorgs.</div><div class="line"> * Created date: 2019/7/30.</div><div class="line"> */</div><div class="line">class ResponseFunction&lt;T&gt; : Function&lt;ResponseData&lt;T&gt;, ObservableSource&lt;T&gt;&gt; &#123;</div><div class="line">    override fun apply(tResponseData: ResponseData&lt;T&gt;): ObservableSource&lt;T&gt; &#123;</div><div class="line">        val code = tResponseData.code</div><div class="line">        val message = tResponseData.msg</div><div class="line">        return if (code == 200) &#123;</div><div class="line">            Observable.just(tResponseData.data)</div><div class="line">        &#125; else &#123;</div><div class="line">            Observable.error(LocalException(code, message))</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * description: 异常处理.</div><div class="line"> *</div><div class="line"> * @author Sorgs.</div><div class="line"> * Created date: 2019/7/30.</div><div class="line"> */</div><div class="line">class LocalException : Exception &#123;</div><div class="line">    var code: Int = 0</div><div class="line">    var displayMessage: String? = null</div><div class="line"></div><div class="line">    constructor(code: Int, displayMessage: String?) &#123;</div><div class="line">        this.code = code</div><div class="line">        this.displayMessage = displayMessage</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    constructor(code: Int, message: String, displayMessage: String?) : super(message) &#123;</div><div class="line">        this.code = code</div><div class="line">        this.displayMessage = displayMessage</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h2><blockquote>
<p>网络请求是需要进行放到子线程进行处理防止阻塞主线程，等待网络请求结果回来之后，再进行转化到UI线程处理数据</p>
<ul>
<li>定义切线接口,然后进行线程切换</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * description: 切换线程的线程定义</div><div class="line"></div><div class="line"> * <span class="doctag">@author</span> Sorgs.</div><div class="line"> * Created date: 2019/7/30.</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseSchedulerProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">fun <span class="title">computation</span><span class="params">()</span>: Scheduler</span></div><div class="line"></div><div class="line">    fun <span class="title">io</span><span class="params">()</span>: Scheduler</div><div class="line"></div><div class="line">    fun <span class="title">ui</span><span class="params">()</span>: Scheduler</div><div class="line"></div><div class="line">    fun &lt;T&gt; <span class="title">applySchedulers</span><span class="params">()</span>: ObservableTransformer&lt;T, T&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * description: 完成处理线程切换.</div><div class="line"></div><div class="line"> * @author Sorgs.</div><div class="line"> * Created date: 2019/7/30.</div><div class="line"> */</div><div class="line">class SchedulerProvider : BaseSchedulerProvider &#123;</div><div class="line">    <span class="function">override fun <span class="title">computation</span><span class="params">()</span>: Scheduler </span>&#123;</div><div class="line">        <span class="keyword">return</span> Schedulers.computation()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">override fun <span class="title">io</span><span class="params">()</span>: Scheduler </span>&#123;</div><div class="line">        <span class="keyword">return</span> Schedulers.io()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">override fun <span class="title">ui</span><span class="params">()</span>: Scheduler </span>&#123;</div><div class="line">        <span class="keyword">return</span> AndroidSchedulers.mainThread()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun &lt;T&gt; applySchedulers(): ObservableTransformer&lt;T, T&gt; &#123;</div><div class="line">        <span class="keyword">return</span> ObservableTransformer &#123; observable -&gt; observable.subscribeOn(io()).observeOn(ui()) &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    companion object &#123;</div><div class="line">        val schedulerProvider: <span class="function">SchedulerProvider by <span class="title">lazy</span><span class="params">(</span></span></div><div class="line">                mode = LazyThreadSafetyMode.SYNCHRONIZED) &#123; SchedulerProvider() &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="调用方使用"><a href="#调用方使用" class="headerlink" title="调用方使用"></a>调用方使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NetWorkManager.request</div><div class="line">        ?.getSorgs(<span class="string">"1"</span>)</div><div class="line">        ?.compose(ResponseTransformer.handleResult())</div><div class="line">        ?.compose(SchedulerProvider.schedulerProvider.applySchedulers())</div><div class="line">        ?.subscribe(&#123; javabean -&gt;</div><div class="line">            Log.i(<span class="string">"sorgs"</span>, <span class="string">"btnTest1 name:$&#123;javabean?.name&#125;"</span>)</div><div class="line">        &#125;, &#123; t -&gt;</div><div class="line">            Log.e(<span class="string">"sorgs"</span>, <span class="string">"btnTest1 e:$&#123;(t as LocalException).displayMessage&#125;"</span>)</div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
<ul>
<li>直接利用subscribe返回得到处理数据后的结果，拿到数据直接进行业务逻辑代码边写。对于错误，直接将服务器错误和本地异常都抛出来，由调用方选择进行处理</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul>
<li>封装成库的好处就是方便调用者，利用最简单的方式进行复杂而常用的操作。</li>
<li>同时对接口透明，对实现封装，实现对调用者最大的友好</li>
<li>demo：<a href="https://github.com/sorgs/Network" title="https://github.com/sorgs/Network" target="_blank" rel="external">https://github.com/sorgs/Network</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网络请求在移动端是极为常见和重要，随处可见。为此，为了避免到处使用增加内存和性能，以及方便使用和解耦，进行网络库的简单封装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="网络请求" scheme="http://sorgs.cn/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
      <category term="Retorfit" scheme="http://sorgs.cn/tags/Retorfit/"/>
    
      <category term="Rxjava" scheme="http://sorgs.cn/tags/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title>Android每日一问笔记-Looper.loop为什么不会阻塞掉UI线程？</title>
    <link href="http://sorgs.cn/post/35154/"/>
    <id>http://sorgs.cn/post/35154/</id>
    <published>2019-07-27T09:32:03.000Z</published>
    <updated>2019-08-15T01:29:03.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于<a href="https://www.wanandroid.com/article/list/0?cid=440" target="_blank" rel="external">https://www.wanandroid.com</a>每日一问的笔记，做一些整理，方便自己进行查看和记忆。<br>原文链接：<a href="https://www.wanandroid.com/wenda/show/8685" target="_blank" rel="external">https://www.wanandroid.com/wenda/show/8685</a></p>
</blockquote>
<hr>
<h1 id="Android中为什么主线程不会因为Looper-loop-里的死循环卡死？"><a href="#Android中为什么主线程不会因为Looper-loop-里的死循环卡死？" class="headerlink" title="Android中为什么主线程不会因为Looper.loop()里的死循环卡死？"></a>Android中为什么主线程不会因为Looper.loop()里的死循环卡死？</h1><ul>
<li>这里涉及线程，先说说说进程/线程<ul>
<li>进程：每个app运行时前首先创建一个进程，该进程是由Zygote fork出来的，用于承载App上运行的各种Activity/Service等组件。进程对于上层应用来说是完全透明的，这也是google有意为之，让App程序都是运行在Android Runtime。大多数情况一个App就运行在一个进程中，除非在AndroidManifest.xml中配置Android:process属性，或通过native代码fork进程。</li>
<li>线程：线程对应用来说非常常见，比如每次new Thread().start都会创建一个新的线程。该线程与App所在进程之间资源共享，从Linux角度来说进程与线程除了是否共享资源外，并没有本质的区别，都是一个task_struct结构体，在CPU看来进程或线程无非就是一段可执行的代码，CPU采用CFS调度算法，保证每个task都尽可能公平的享有CPU时间片。</li>
<li>有了这么准备，再说说死循环问题：<ul>
<li>对于线程既然是一段可执行的代码，当可执行代码执行完成后，线程生命周期便该终止了，线程退出。而对于主线程，我们是绝不希望会被运行一段时间，自己就退出，那么如何保证能一直存活呢？简单做法就是可执行代码是能一直执行下去的，死循环便能保证不会被退出，例如，binder线程也是采用死循环的方法，通过循环方式不同与Binder驱动进行读写操作，当然并非简单地死循环，无消息时会休眠。但这里可能又引发了另一个问题，既然是死循环又如何去处理其他事务呢？通过创建新线程的方式。</li>
<li>真正会卡死主线程的操作是在回调方法onCreate/onStart/onResume等操作时间过长，会导致掉帧，甚至发生ANR，looper.loop本身不会导致应用卡死</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="没看见哪里有相关代码为这个死循环准备了一个新线程去运转？"><a href="#没看见哪里有相关代码为这个死循环准备了一个新线程去运转？" class="headerlink" title="没看见哪里有相关代码为这个死循环准备了一个新线程去运转？"></a>没看见哪里有相关代码为这个死循环准备了一个新线程去运转？</h1><ul>
<li><p>事实上，会在进入死循环之前便创建了新binder线程，在代码ActivityThread.main()中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </div><div class="line">      .... </div><div class="line">      <span class="comment">//创建Looper和MessageQueue对象，用于处理主线程的消息 </span></div><div class="line">      Looper.prepareMainLooper(); </div><div class="line"></div><div class="line">      <span class="comment">//创建ActivityThread对象 </span></div><div class="line">      ActivityThread thread = <span class="keyword">new</span> ActivityThread(); </div><div class="line"></div><div class="line">      <span class="comment">//建立Binder通道 (创建新线程) </span></div><div class="line">      thread.attach(<span class="keyword">false</span>); </div><div class="line"></div><div class="line">      Looper.loop(); <span class="comment">//消息循环运行</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>); </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>thread.attach(false)；便会创建一个Binder线程（具体是指ApplicationThread，Binder的服务端，用于接收系统服务AMS发送来的事件），该Binder线程通过Handler将Message发送给主线程，具体过程可查看 startService流程分析，这里不展开说，简单说Binder用于进程间通信，采用C/S架构。关于binder感兴趣的朋友，可查看我回答的另一个知乎问题：<br><a href="https://www.zhihu.com/question/39440766/answer/89210950" target="_blank" rel="external">为什么Android要采用Binder作为IPC机制？ - Gityuan的回答</a></p>
</li>
<li><p>另外，ActivityThread实际上并非线程，不像HandlerThread类，ActivityThread并没有真正继承Thread类，只是往往运行在主线程，该人以线程的感觉，其实承载ActivityThread的主线程就是由Zygote fork而创建的进程。</p>
</li>
<li><p>主线程的死循环一直运行是不是特别消耗CPU资源呢？ 其实不然，这里就涉及到Linux pipe/epoll机制，简单说就是在主线程的MessageQueue没有消息时，便阻塞在loop的queue.next()中的nativePollOnce()方法里，详情见Android消息机制1-Handler(Java层)，此时主线程会释放CPU资源进入休眠状态，直到下个消息到达或者有事务发生，通过往pipe管道写端写入数据来唤醒主线程工作。这里采用的epoll机制，是一种IO多路复用机制，可以同时监控多个描述符，当某个描述符就绪(读或写就绪)，则立刻通知相应程序进行读或写操作，本质同步I/O，即读写是阻塞的。 所以说，主线程大多数时候都是处于休眠状态，并不会消耗大量CPU资源。</p>
</li>
</ul>
<h1 id="Activity的生命周期是怎么实现在死循环体外能够执行起来的？"><a href="#Activity的生命周期是怎么实现在死循环体外能够执行起来的？" class="headerlink" title="Activity的生命周期是怎么实现在死循环体外能够执行起来的？"></a>Activity的生命周期是怎么实现在死循环体外能够执行起来的？</h1><ul>
<li>ActivityThread的内部类H继承于Handler，通过handler消息机制，简单说Handler机制用于同一个进程的线程间通信。</li>
<li>Activity的生命周期都是依靠主线程的Looper.loop，当收到不同Message时则采用相应措施：在H.handleMessage(msg)方法中，根据接收到不同的msg，执行相应的生命周期。</li>
<li>比如收到msg=H.LAUNCH_ACTIVITY，则调用ActivityThread.handleLaunchActivity()方法，最终会通过反射机制，创建Activity实例，然后再执行Activity.onCreate()等方法；</li>
<li>再比如收到msg=H.PAUSE_ACTIVITY，则调用ActivityThread.handlePauseActivity()方法，最终会执行Activity.onPause()等方法。 上述过程，我只挑核心逻辑讲，真正该过程远比这复杂。</li>
<li>主线程的消息又是哪来的呢？当然是App进程中的其他线程通过Handler发送给主线程，请看接下来的内容：</li>
<li>最后，从进程与线程间通信的角度，通过一张图加深大家对App运行过程的理解：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://pic.sorgs.cn/handler_loop.jpg" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></li>
<li>system_server进程是系统进程，java framework框架的核心载体，里面运行了大量的系统服务，比如这里提供ApplicationThreadProxy（简称ATP），ActivityManagerService（简称AMS），这个两个服务都运行在system_server进程的不同线程中，由于ATP和AMS都是基于IBinder接口，都是binder线程，binder线程的创建与销毁都是由binder驱动来决定的。</li>
<li>App进程则是我们常说的应用程序，主线程主要负责Activity/Service等组件的生命周期以及UI相关操作都运行在这个线程； 另外，每个App进程中至少会有两个binder线程 ApplicationThread(简称AT)和ActivityManagerProxy（简称AMP），除了图中画的线程，其中还有很多线程，比如signal catcher线程等，这里就不一一列举。</li>
<li>Binder用于不同进程之间通信，由一个进程的Binder客户端向另一个进程的服务端发送事务，比如图中线程2向线程4发送事务；而handler用于同一个进程中不同线程的通信，比如图中线程4向主线程发送消息。</li>
<li>结合图说说Activity生命周期，比如暂停Activity，流程如下：<ul>
<li>线程1的AMS中调用线程2的ATP；（由于同一个进程的线程间资源共享，可以相互直接调用，但需要注意多线程并发问题）</li>
<li>线程2通过binder传输到App进程的线程4；</li>
<li>线程4通过handler消息机制，将暂停Activity的消息发送给主线程；</li>
<li>主线程在looper.loop()中循环遍历消息，当收到暂停Activity的消息时，便将消息分发给ActivityThread.H.handleMessage()方法，再经过方法的调用，最后便会调用到Activity.onPause()，当onPause()处理完后，继续循环loop下去。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于&lt;a href=&quot;https://www.wanandroid.com/article/list/0?cid=440&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.wanandroid.com&lt;/a&gt;每
    
    </summary>
    
      <category term="Android面试" scheme="http://sorgs.cn/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="每日一问笔记" scheme="http://sorgs.cn/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%97%AE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="http://sorgs.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="http://sorgs.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android每日一问笔记-Handler简述</title>
    <link href="http://sorgs.cn/post/5343/"/>
    <id>http://sorgs.cn/post/5343/</id>
    <published>2019-07-26T11:52:08.000Z</published>
    <updated>2019-08-15T01:29:03.843Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于每日一问的笔记，做一些整理，方便自己进行查看和记忆。<br><a href="https://mp.weixin.qq.com/s/ReSmYXFr_gH_39g9LevqlA" target="_blank" rel="external">nanchen的文章</a></p>
</blockquote>
<hr>
<h1 id="Handler-的简单使用"><a href="#Handler-的简单使用" class="headerlink" title="Handler 的简单使用"></a>Handler 的简单使用</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">    super.onCreate(savedInstanceState)</div><div class="line">    setContentView(R.layout.activity_main3)</div><div class="line">    // 请求网络</div><div class="line">    subThread.start()</div><div class="line">&#125;</div><div class="line"></div><div class="line">override fun onDestroy() &#123;</div><div class="line">    subThread.interrupt()</div><div class="line">    super.onDestroy()</div><div class="line">&#125;</div><div class="line"></div><div class="line">private val handler by lazy(LazyThreadSafetyMode.NONE) &#123; MyHandler() &#125;</div><div class="line">private val subThread by lazy(LazyThreadSafetyMode.NONE) &#123; SubThread(handler) &#125;</div><div class="line"></div><div class="line">private class MyHandler : Handler() &#123;</div><div class="line">    override fun handleMessage(msg: Message) &#123;</div><div class="line">        super.handleMessage(msg)</div><div class="line">        // 主线程处理逻辑，一般这里需要使用弱引用持有 Activity 实例，以免内存泄漏</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private class SubThread(val handler: Handler) : Thread() &#123;</div><div class="line">    override fun run() &#123;</div><div class="line">        super.run()</div><div class="line">        // 耗时操作 比如做网络请求</div><div class="line"></div><div class="line">        // 网络请求完毕，咱们就得哗哗哗通知 UI 刷新了，直接直接考虑 Handler 处理，其他方案暂时不做考虑</div><div class="line">        // 第一种方法，一般这个 data 是请求结果解析的内容</div><div class="line">        handler.obtainMessage(1,data).sendToTarget()</div><div class="line">        // 第二种方法</div><div class="line">        val message = Message.obtain() // 尽量使用 Message.obtain() 初始化</div><div class="line">        message.what = 1</div><div class="line">        message.obj = data // 一般这个 data 是请求结果解析的内容</div><div class="line">        handler.sendMessage(message)</div><div class="line">        // 第三种方法</div><div class="line">        handler.post(object : Thread() &#123;</div><div class="line">            override fun run() &#123;</div><div class="line">                super.run()</div><div class="line">                // 处理更新操作</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>上述代码非常简单，因为网络请求是一个耗时任务，所以我们新开了一个线程，并在网络请求结束解析完毕后通过 Handler 来通知主线程去更新 UI，简单采用了 3 种方式，细心的小伙伴可能会发现，其实第一种和第二种方法是一样的。就是利用 Handler 来发送了一个携带了内容 Message 对象，值得一提的是：我们应该尽可能地使用 Message.obtain() 而不是 new Message() 进行 Message 的初始化，主要是 Message.obtain() 可以减少内存的申请</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">    msg.target = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>代码出现了一个 MessageQueue，并且最终调用了 MessageQueue#enqueueMessage方法进行消息的入队</p>
<h1 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h1></li>
<li><p>MessageQueue 就是消息队列，即存放多条消息 Message 的容器，它采用的是单向链表数据结构，而非队列。它的 next() 指向链表的下一个 Message 元素。从入队消息 enqueueMessage() 的实现来看，它的主要操作其实就是单链表的插入操作.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">    <span class="comment">// ... 省略一些检查代码</span></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="comment">// ... 省略一些检查代码</span></div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">        <span class="keyword">if</span> (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">// Try to retrieve the next message.  Return if found.</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">            Message prevMsg = <span class="keyword">null</span>;</div><div class="line">            Message msg = mMessages;</div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Got a message.</span></div><div class="line">                    mBlocked = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                        prevMsg.next = msg.next;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mMessages = msg.next;</div><div class="line">                    &#125;</div><div class="line">                    msg.next = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                    msg.markInUse();</div><div class="line">                    <span class="keyword">return</span> msg;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// No more messages.</span></div><div class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="comment">// While calling an idle handler, a new message could have been delivered</span></div><div class="line">        <span class="comment">// so go back and look again for a pending message without waiting.</span></div><div class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>next() 方法其实很长，不过我们仅仅贴了极少的一部分，可以看到，里面不过是有一个<code>for (;;)</code>的无限循环，循环体内部调用了一个 nativePollOnce(long, int) 方法。这是一个 Native 方法，实际作用是通过 Native 层的 MessageQueue 阻塞当前调用栈线程 nextPollTimeoutMillis 毫秒的时间。</p>
</li>
<li>下面是 nextPollTimeoutMillis 取值的不同情况的阻塞表现：<ul>
<li>小于 0，一直阻塞，直到被唤醒；</li>
<li>等于 0，不会阻塞；</li>
<li>大于 0，最长阻塞 nextPollTimeoutMillis 毫秒，期间如被唤醒会立即返回。</li>
</ul>
</li>
<li>可以看到，最开始 nextPollTimeoutMillis 的初始化值是 0，所以不会阻塞，会直接去取 Message 对象，如果没有取到 Message 对象数据，则直接会把 nextPollTimeoutMillis 置为 -1，此时满足小于 0 的条件，会被一直阻塞，直到其他地方调用另外一个 Native 方法 nativeWake(long) 进行唤醒。如果取到值的话，会直接把得到的 Message 对象进行返回。</li>
<li>nativeWake(long) 方法在前面的 MessageQueue#enqueueMessage 方法有个调用，调用时机是在 MessageQueue 入队消息的过程中</li>
<li>Handler 发送了 Message，消息用MessageQueue进行存储，使用MessageQueue#enqueueMessage 方法进行入队，使用MessageQueue#next方法进行轮训消息。这就不免抛出了一个问题，MessageQueue#next 方法是谁调用的？没错，就是 Looper。<h1 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h1></li>
<li><p>Looper 在 Android 的消息机制中扮演着消息循环的角色，具体来说就是它会不停地从 MessageQueue 通过 next() 查看是否有新消息，如果有新消息就立刻处理，否则就任由 MessageQueue 阻塞在那里。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 分发消息给 handler 处理</span></div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line">            dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</div><div class="line">    message.callback.run();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</div></pre></td></tr></table></figure>
</li>
<li><p>先会通过 myLooper() 方法得到 Looper 对象，如果这个 Looper 返回为空的话，则直接抛出异常。否则进入到一个 for (;;) 循环中，调用 MessageQueue#next() 方法进行轮训获取 Message 对象，如果获取的 Message 对象为空，则直接退出 loop() 方法。否则直接通过 msg.target拿到 Handler 对象，并调用 Handler#dispatchMessage() 方法。</p>
</li>
<li>如果 Message 设置了 callback 则，直接调用 message.callback.run()，否则判断是否初始化了 mCallback<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1></li>
<li>ThreadLocal 是用来存储指定线程的数据的，当某些数据的作用域是该指定线程并且该数据需要贯穿该线程的所有执行过程时就可以使用 ThreadnLocal 存储数据，当某线程使用 ThreadnLocal 存储数据后，只有该线程可以读取到存储的数据，除此线程之外的其他线程是没办法读取到该数据的。</li>
<li><p>举个栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">ThreadLocal&lt;Boolean&gt; local = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"><span class="comment">// 设置初始值为true.</span></div><div class="line">local.set(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">Boolean bool = local.get();</div><div class="line">Logger.i(<span class="string">"MainThread读取的值为："</span> + bool);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Thread() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Boolean bool = local.get();</div><div class="line">        Logger.i(<span class="string">"SubThread读取的值为："</span> + bool);</div><div class="line"></div><div class="line">        <span class="comment">// 设置值为false.</span></div><div class="line">        local.set(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;.start():</div><div class="line"></div><div class="line"><span class="comment">// 主线程睡1秒，确保上方子线程执行完毕再执行下面的代码。</span></div><div class="line">Thread.sleep(<span class="number">1000</span>);</div><div class="line"></div><div class="line">Boolean newBool = local.get();</div><div class="line">Logger.i(<span class="string">"MainThread读取的新值为："</span> + newBool);</div></pre></td></tr></table></figure>
</li>
<li><p>第一条 Log 无可置疑，因为设置了值为 true，因为打印结果没什么好说的。对于第二条 Log，根据上方介绍，某线程使用 ThreadLocal 存储的数据，只能被该线程读取，因此第二条 Log 的结果是：null。紧接着在子线程中设置了 ThreadLocal 的值为 false，然后第三条 Log 将被打印，原理同上，子线程中设置了 ThreadLocal 的值并不影响主线程的数据，所以打印是 true。</p>
</li>
<li><p>实验结果证实：就算是同一个 ThreadLocal 对象，任一线程对其的 set() 和 get() 方法的操作都是相互独立互不影响的。</p>
<h1 id="Looper-myLooper"><a href="#Looper-myLooper" class="headerlink" title="Looper.myLooper()"></a>Looper.myLooper()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这就是在子线程中使用 Handler 前，必须要调用 Looper.prepare() 的原因。</p>
</li>
<li><p>可能你会疑问，我在主线程使用的时候，没有要求 Looper.prepare() 呀。<br>原来，我们在 ActivityThread 中，有去显示调用 Looper.prepareMainLooper()：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        Looper.prepareMainLooper();</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//...</span></div><div class="line">        Looper.loop();</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>我们看看 Looper.prepareMainLooper()：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于每日一问的笔记，做一些整理，方便自己进行查看和记忆。&lt;br&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/ReSmYXFr_gH_39g9LevqlA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;n
    
    </summary>
    
      <category term="Android面试" scheme="http://sorgs.cn/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="每日一问笔记" scheme="http://sorgs.cn/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%97%AE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="http://sorgs.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="http://sorgs.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android每日一问笔记-View中的getContext一定返回的是Activity对象吗？</title>
    <link href="http://sorgs.cn/post/39723/"/>
    <id>http://sorgs.cn/post/39723/</id>
    <published>2019-07-25T11:29:13.000Z</published>
    <updated>2019-08-15T01:29:03.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于<a href="https://www.wanandroid.com/article/list/0?cid=440" target="_blank" rel="external">https://www.wanandroid.com</a>每日一问的笔记，做一些整理，方便自己进行查看和记忆。</p>
<p>原文链接：<a href="https://www.wanandroid.com/wenda/show/8626" target="_blank" rel="external">https://www.wanandroid.com/wenda/show/8626</a><br>以及<br><a href="https://mp.weixin.qq.com/s/5Xj6O9wV_EnynpdnB5mJ5A" target="_blank" rel="external">nanchen的文章</a></p>
</blockquote>
<hr>
<blockquote>
<p>不一定是</p>
<h1 id="那么，在什么场景下不是呢："><a href="#那么，在什么场景下不是呢：" class="headerlink" title="那么，在什么场景下不是呢："></a>那么，在什么场景下不是呢：</h1></blockquote>
<ul>
<li>除了自己手动传不是Activity的Context进去之外，还有一种情况，就是:当使用AppCompatActivity 时。</li>
<li>我们都知道，在这个Activity里的原生控件(如TextView, ImageView等等)，当在LayoutInflater中把xml解析成View的时候，最终会经过AppCompatViewInflater的createView方法： 把这些原生控件都变成AppCompatXXX一类的！比如TextView的话，就会变成AppCompatTextView， ImageView会变成AppCompatImageView 。</li>
<li><p>当然了，这些AppCompat开头的，都是继承于被转换的那个对象的。</p>
</li>
<li><p>那重点就在这些AppCompat开头的控件了，随便打开一个他们源码，比如AppCompatImageView</p>
</li>
<li>打开之后会看到： 当它们调用父类的构造方法时，调用了TintContextWrappe</li>
<li>看这个方法的名字, wrap很明显就是包装的意思嘛，点进去wrap方法看，还会看到首先调用了shouldWrap方法： 检查一下这个context应不应该被包装。</li>
<li>如果方法返回true, 会创建一个TintContextWrapper对象(把Context传进去)，然后返回，那么，这时候，当我们调用这个View的getContext方法，自然就不是Activity了，而是它传进去的TintContextWrapper。</li>
</ul>
<h1 id="那么，究竟什么情况下，shouldWrap方法会返回true呢-Context会被包装-点开看下源码："><a href="#那么，究竟什么情况下，shouldWrap方法会返回true呢-Context会被包装-点开看下源码：" class="headerlink" title="那么，究竟什么情况下，shouldWrap方法会返回true呢(Context会被包装), 点开看下源码："></a>那么，究竟什么情况下，shouldWrap方法会返回true呢(Context会被包装), 点开看下源码：</h1><ul>
<li>如果它已经被包装过了，那么就不需要继续包装，即返回false了。</li>
<li>如果没有被包装过，并且Build.VERSION.SDK_INT&lt;21（也就是5.0之前的版本），就会返回true。</li>
</ul>
<h1 id="得出结论："><a href="#得出结论：" class="headerlink" title="得出结论："></a>得出结论：</h1><ul>
<li>当运行在5.0系统版本以下的手机，并且Activity是继承自AppCompatActivity的，那么View的getConext方法，返回的就不是Activity而是TintContextWrapper.</li>
</ul>
<hr>
<ul>
<li>首先，显而易见这个问题有不少陷阱，比如这个<code>View</code>是我们自己构造出来的，那肯定它的<code>getContext()</code>返回的是我们构造它的时候传入的 Context 类型。</li>
<li>但是<code>View.getContext()</code>它也可能返回的是<code>TintContextWrapper</code></li>
<li>直接继承 Activity 的 Activity 构造出来的<code>View.getContext()</code>返回的是当前 Activity。但是：当 View 的 Activity 是继承自 AppCompatActivity，并且在 5.0 以下版本的手机上，View.getContext() 得到的并非是 Activity，而是 TintContextWrapper。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://pic.sorgs.cn/context.jpg" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure>
<h1 id="Activity-setContentView"><a href="#Activity-setContentView" class="headerlink" title="Activity.setContentView()"></a>Activity.setContentView()</h1></li>
<li><p>看看<code>Activity.setContentView()</code>方法。不过是直接调用 Window 的实现类 PhoneWindow 的 setContentView() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">    getWindow().setContentView(layoutResID);</div><div class="line">    initWindowDecorActionBar();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>看看 PhoneWindow 的 setContentView() 是怎样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">    <span class="comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></div><div class="line">    <span class="comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></div><div class="line">    <span class="comment">// before this happens.</span></div><div class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</div><div class="line">        installDecor();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        mContentParent.removeAllViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        <span class="keyword">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</div><div class="line">                getContext());</div><div class="line">        transitionTo(newScene);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class="line">    &#125;</div><div class="line">    mContentParent.requestApplyInsets();</div><div class="line">    <span class="keyword">final</span> Callback cb = getCallback();</div><div class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</div><div class="line">        cb.onContentChanged();</div><div class="line">    &#125;</div><div class="line">    mContentParentExplicitlySet = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>假如我们没有<code>FEATURE_CONTENT_TRANSITIONS</code>标记的话，我们直接通过<code>mLayoutInflater.inflate()</code>加载出来。这个如果有 mLayoutInflater 的是在PhoneWindow 的构造方法中被初始化的。而 PhoneWindow 的初始化是在 Activity的attach() 方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Context context, ActivityThread aThread,</span></span></div><div class="line">        Instrumentation instr, IBinder token, <span class="keyword">int</span> ident,</div><div class="line">        Application application, Intent intent, ActivityInfo info,</div><div class="line">        CharSequence title, Activity parent, String id,</div><div class="line">        NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">        Window window, ActivityConfigCallback activityConfigCallback) &#123;</div><div class="line">    attachBaseContext(context);</div><div class="line">    mFragments.attachHost(<span class="keyword">null</span> <span class="comment">/*parent*/</span>);</div><div class="line">    mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, window, activityConfigCallback);</div><div class="line">    mWindow.setWindowControllerCallback(<span class="keyword">this</span>);</div><div class="line">    mWindow.setCallback(<span class="keyword">this</span>);</div><div class="line">    mWindow.setOnWindowDismissedCallback(<span class="keyword">this</span>);</div><div class="line">    mWindow.getLayoutInflater().setPrivateFactory(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 此处省略部分代码...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>所以 PhoneWindow 的 Context 实际上就是 Activity 本身</p>
</li>
<li><p>回到我们前面分析的 PhoneWindow 的 setContentView() 方法，如果有 FEATURE_CONTENT_TRANSITIONS 标记，我们直接调用了一个 transitionTo() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transitionTo</span><span class="params">(Scene scene)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mContentScene == <span class="keyword">null</span>) &#123;</div><div class="line">        scene.enter();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mTransitionManager.transitionTo(scene);</div><div class="line">    &#125;</div><div class="line">    mContentScene = scene;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Apply layout change, if any</span></div><div class="line">    <span class="keyword">if</span> (mLayoutId &gt; <span class="number">0</span> || mLayout != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// empty out parent container before adding to it</span></div><div class="line">        getSceneRoot().removeAllViews();</div><div class="line">        <span class="keyword">if</span> (mLayoutId &gt; <span class="number">0</span>) &#123;</div><div class="line">            LayoutInflater.from(mContext).inflate(mLayoutId, mSceneRoot);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mSceneRoot.addView(mLayout);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Notify next scene that it is entering. Subclasses may override to configure scene.</span></div><div class="line">    <span class="keyword">if</span> (mEnterAction != <span class="keyword">null</span>) &#123;</div><div class="line">        mEnterAction.run();</div><div class="line">    &#125;</div><div class="line">    setCurrentScene(mSceneRoot, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>还是通过这个 mContext 的 LayoutInflater 去 inflate 的布局。这个 mContext 初始化的地方是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scene <span class="title">getSceneForLayout</span><span class="params">(ViewGroup sceneRoot, <span class="keyword">int</span> layoutId, Context context)</span> </span>&#123;</div><div class="line">    SparseArray&lt;Scene&gt; scenes = (SparseArray&lt;Scene&gt;) sceneRoot.getTag(</div><div class="line">            com.android.internal.R.id.scene_layoutid_cache);</div><div class="line">    <span class="keyword">if</span> (scenes == <span class="keyword">null</span>) &#123;</div><div class="line">        scenes = <span class="keyword">new</span> SparseArray&lt;Scene&gt;();</div><div class="line">        sceneRoot.setTagInternal(com.android.internal.R.id.scene_layoutid_cache, scenes);</div><div class="line">    &#125;</div><div class="line">    Scene scene = scenes.get(layoutId);</div><div class="line">    <span class="keyword">if</span> (scene != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> scene;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        scene = <span class="keyword">new</span> Scene(sceneRoot, layoutId, context);</div><div class="line">        scenes.put(layoutId, scene);</div><div class="line">        <span class="keyword">return</span> scene;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>即 Context 来源于我们外面传入的 getContext()，这个 getContext() 返回的就是初始化的 Context 也就是 Activity 本身。</p>
</li>
</ul>
<h1 id="AppCompatActivity-setContentView"><a href="#AppCompatActivity-setContentView" class="headerlink" title="AppCompatActivity.setContentView()"></a>AppCompatActivity.setContentView()</h1><ul>
<li>AppCompatActivity 的 setContentView() 实现。这个 mDelegate 实际上是一个代理类，由 AppCompatDelegate 根据不同的 SDK 版本生成不同的实际执行类，就是代理类的兼容模式：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(@LayoutRes <span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.getDelegate().setContentView(layoutResID);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="function"><span class="keyword">public</span> AppCompatDelegate <span class="title">getDelegate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mDelegate == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.mDelegate = AppCompatDelegate.create(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.mDelegate;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Create a &#123;<span class="doctag">@link</span> android.support.v7.app.AppCompatDelegate&#125; to use with &#123;<span class="doctag">@code</span> activity&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> callback An optional callback for AppCompat specific events</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppCompatDelegate <span class="title">create</span><span class="params">(Activity activity, AppCompatCallback callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> create(activity, activity.getWindow(), callback);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AppCompatDelegate <span class="title">create</span><span class="params">(Context context, Window window,</span></span></div><div class="line">        AppCompatCallback callback) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> sdk = Build.VERSION.SDK_INT;</div><div class="line">    <span class="keyword">if</span> (BuildCompat.isAtLeastN()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplN(context, window, callback);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdk &gt;= <span class="number">23</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV23(context, window, callback);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdk &gt;= <span class="number">14</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV14(context, window, callback);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdk &gt;= <span class="number">11</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV11(context, window, callback);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppCompatDelegateImplV9(context, window, callback);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h1><ul>
<li>之所以能得到上面的结论,是因为我们在 AppCompatActivity 里面的 layout.xml 文件里面使用原生控件，比如 TextView、ImageView 等等，当在 LayoutInflater 中把 XML 解析成 View 的时候，最终会经过 AppCompatViewInflater 的 createView() 方法，这个方法会把这些原生的控件都变成 AppCompatXXX 一类。</li>
<li>包含了：<ul>
<li>RatingBar</li>
<li>CheckedTextView</li>
<li>MultiAutoCompleteTextView</li>
<li>TextView</li>
<li>ImageButton</li>
<li>SeekBar</li>
<li>Spinner</li>
<li>RadioButton</li>
<li>ImageView</li>
<li>AutoCompleteTextView</li>
<li>CheckBox</li>
<li>EditText</li>
<li>Button</li>
</ul>
</li>
<li><p>那么重点肯定就是在 AppCompat这些开头的控件了，随便打开一个源码.可以看到，关键是<code>super(TintContextWrapper.wrap(context), attrs, defStyleAttr);</code>这行代码。shouldWrap() 这个方法返回为 true 的时候，就会采用了 TintContextWrapper 这个对象来包裹了我们的 Context。如果是 5.0 以前，并且没有包装的话，就会直接返回 true。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">AppCompatTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(TintContextWrapper.wrap(context), attrs, defStyleAttr);</div><div class="line">    <span class="keyword">this</span>.mBackgroundTintHelper = <span class="keyword">new</span> AppCompatBackgroundHelper(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.mBackgroundTintHelper.loadFromAttributes(attrs, defStyleAttr);</div><div class="line">    <span class="keyword">this</span>.mTextHelper = <span class="keyword">new</span> AppCompatTextHelper(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.mTextHelper.loadFromAttributes(attrs, defStyleAttr);</div><div class="line">    <span class="keyword">this</span>.mTextHelper.applyCompoundDrawablesTints();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">wrap</span><span class="params">(@NonNull Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (shouldWrap(context)) &#123;</div><div class="line">        Object var1 = CACHE_LOCK;</div><div class="line">        <span class="keyword">synchronized</span>(CACHE_LOCK) &#123;</div><div class="line">            <span class="keyword">if</span> (sCache == <span class="keyword">null</span>) &#123;</div><div class="line">                sCache = <span class="keyword">new</span> ArrayList();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> i;</div><div class="line">                WeakReference ref;</div><div class="line">                <span class="keyword">for</span>(i = sCache.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">                    ref = (WeakReference)sCache.get(i);</div><div class="line">                    <span class="keyword">if</span> (ref == <span class="keyword">null</span> || ref.get() == <span class="keyword">null</span>) &#123;</div><div class="line">                        sCache.remove(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">for</span>(i = sCache.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">                    ref = (WeakReference)sCache.get(i);</div><div class="line">                    TintContextWrapper wrapper = ref != <span class="keyword">null</span> ? (TintContextWrapper)ref.get() : <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (wrapper != <span class="keyword">null</span> &amp;&amp; wrapper.getBaseContext() == context) &#123;</div><div class="line">                        <span class="keyword">return</span> wrapper;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            TintContextWrapper wrapper = <span class="keyword">new</span> TintContextWrapper(context);</div><div class="line">            sCache.add(<span class="keyword">new</span> WeakReference(wrapper));</div><div class="line">            <span class="keyword">return</span> wrapper;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> context;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldWrap</span><span class="params">(@NonNull Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(context <span class="keyword">instanceof</span> TintContextWrapper) &amp;&amp; !(context.getResources() <span class="keyword">instanceof</span> TintResources) &amp;&amp; !(context.getResources() <span class="keyword">instanceof</span> VectorEnabledTintResources)) &#123;</div><div class="line">        <span class="keyword">return</span> VERSION.SDK_INT &lt; <span class="number">21</span> || VectorEnabledTintResources.shouldBeUsed();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当运行在 5.0 系统版本以下的手机，并且 Activity 是继承自 AppCompatActivity 的，那么View 的 getConext() 方法，返回的就不是 Activity 而是 TintContextWrapper。</p>
<h1 id="其它情况么"><a href="#其它情况么" class="headerlink" title="其它情况么"></a>其它情况么</h1></li>
<li>上面讲述了两种非 Activity 的情况：<ul>
<li>直接构造 View 的时候传入的不是 Activity；</li>
<li>使用 AppCompatActivity 并且运行在 5.0 以下的手机上，XML 里面的 View 的 getContext() 方法返回的是 TintContextWrapper。</li>
<li>实际上，View.getContext() 和 inflate 这个 View 的 LayoutInflater 息息相关，比如 Activity 的 setContentView() 里面的 LayoutInflater 就是它本身，所以该 layoutRes 里面的 View.getContext() 返回的就是 Activity。但在使用 AppCompatActivity 的时候，值得关注的是， layoutRes 里面的原生 View 会被自动转换为 AppCompatXXX，而这个转换在 5.0 以下的手机系统中，会把 Context 转换为其包装类 TintThemeWrapper，所以在这样的情况下的 View.getContext() 返回是 TintThemeWrapper。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于&lt;a href=&quot;https://www.wanandroid.com/article/list/0?cid=440&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.wanandroid.com&lt;/a&gt;每
    
    </summary>
    
      <category term="Android面试" scheme="http://sorgs.cn/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="每日一问笔记" scheme="http://sorgs.cn/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%97%AE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="http://sorgs.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="http://sorgs.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android每日一问笔记-对于事件分发，嵌套滚动的了解</title>
    <link href="http://sorgs.cn/post/35340/"/>
    <id>http://sorgs.cn/post/35340/</id>
    <published>2019-07-16T09:31:01.000Z</published>
    <updated>2019-08-15T01:29:03.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>基于<a href="https://www.wanandroid.com/article/list/0?cid=440" target="_blank" rel="external">https://www.wanandroid.com</a>每日一问的笔记，做一些整理，方便自己进行查看和记忆。</p>
<p>原文链接：<a href="https://www.wanandroid.com/wenda/show/8463" title="https://www.wanandroid.com/wenda/show/8463" target="_blank" rel="external">https://www.wanandroid.com/wenda/show/8463</a><br>以及<br><a href="https://mp.weixin.qq.com/s/te6_xAEPnz69ZQs1d51aYw" target="_blank" rel="external">nanchen的文章</a></p>
</blockquote>
<hr>
<h1 id="事件分发原理"><a href="#事件分发原理" class="headerlink" title="事件分发原理"></a>事件分发原理</h1><ul>
<li>事件分发，其实就是一个责任链的变种，这个责任链，是一个设计模式。 </li>
<li>在Android中，当最顶层的View收到事件之后，会一级一级地往下传，在每一级View中，它们各自都有权利去处理(也就是拦截)这个事件，如果这次的事件传到了最底层的View，也没能处理的话，就会从这个最底层的View一级一级地向上传回去。<h1 id="嵌套滚动"><a href="#嵌套滚动" class="headerlink" title="嵌套滚动"></a>嵌套滚动</h1></li>
<li>这个嵌套滚动，说的应该不是普通的嵌套滚动(比如ScrollView套ListView)，而是说NestedScrollingParent和NestedScrollingChild，这两个东西，出来挺久了，可能好多同学还是觉得有点陌生，但我们在很多场景下，已经在不识不觉中使用它了，比如说CoordinatorLayout，它是一个NestedScrollingParent，还有RecycleView，它是一个NestedScrollingChild。<br>一个最常见的效果：列表向上滚动，ToolBar收起，反之，当列表向下滚动时，ToolBar随着列表的滚动出现。这个效果，用NestedScrolling来实现，可以非常简单。<h1 id="嵌套滚动原理"><a href="#嵌套滚动原理" class="headerlink" title="嵌套滚动原理"></a>嵌套滚动原理</h1></li>
<li>它的原理，很简单：在NestedScrollingChild滚动过程中，它和NestedScrollingParent会一直”保持通讯”，比如： <ul>
<li>当Child滚动之前，会通知Parent:”我要开始滚动啦，你看你要不要做点什么”。</li>
<li>当Child在滚动的时候，也会每次通知Parent:”我这次消费了xxx，你看你还要做什么”。</li>
<li>当Child滚动完成，Parent也会收到通知：”我滚动完成了”。</li>
</ul>
</li>
<li>除了手指触摸滚动的，还有惯性滚动，但原理和流程是一样的。</li>
</ul>
<h1 id="至于为什么嵌套滚动有必要存在，我觉得有以下几个原因："><a href="#至于为什么嵌套滚动有必要存在，我觉得有以下几个原因：" class="headerlink" title="至于为什么嵌套滚动有必要存在，我觉得有以下几个原因："></a>至于为什么嵌套滚动有必要存在，我觉得有以下几个原因：</h1><ul>
<li>减少工作量，比如说一些看似很复杂滚动效果，在使用NestedScrolling机制之后，就变得简单起来了。</li>
<li>降低耦合度，在NestedScrolling机制出现之前，很多与子View有滚动交互的ViewGroup，大部分处理滚动的代码，都堆积这个ViewGroup中。而推出了NestedScrolling之后，这个滚动的子View，由被动方，变成了主动方(滚动的状态都是由这个子View去决定，不再需要ViewGroup去主动判断)。 </li>
<li>增加灵活性，CoordinatorLayout的强大，相信同学们都体会到了，它可以通过设置各种不同的Behavior，来定制它的交互效果。</li>
</ul>
<hr>
<h1 id="简单介绍-View-的时间分发机制"><a href="#简单介绍-View-的时间分发机制" class="headerlink" title="简单介绍 View 的时间分发机制"></a>简单介绍 View 的时间分发机制</h1><ul>
<li><p>当然，这里也可以简单地提一下，基本的流程就是下面的伪代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) &#123;</div><div class="line">        consume = onTouchEvent(ev);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        consume = child.dispatchTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> consume;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当一个 ViewGroup 接收到一个事件的时候，首先会调用 dispatchTouchEvent() 方法进行事件分发，如果 onInterceptTouchEvent() 返回 true，则代表当前 View 会拦截事件，则直接回调 onTouchEvent() 方法进行事件处理。如果不拦截，则直接回调子 View 的 dispatchTouchEvent() 方法，如此反复，一直到最里面的子 View。</p>
</li>
<li><p>当一个点击事件产生后，它的传递过程遵循以下顺序：Activity =&gt; Window =&gt; View，即事件总是先传递给 Activity，Activity 再传递给 Window，最后 Window 再传递给顶层 DocorView，然后遵循上面的方式一直在最里层 View。</p>
</li>
<li>而处理事件则从最里层 View 不断回传给自己的外层 View，如果一直没有 View 进行处理，则直接会回传到 Activity 中。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onTouchEvent() 返回 <span class="keyword">true</span> 代表自己要处理。</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="既然都提了这么一点，也就突然想给出一些结论，参考自-Android-开发艺术探索："><a href="#既然都提了这么一点，也就突然想给出一些结论，参考自-Android-开发艺术探索：" class="headerlink" title="既然都提了这么一点，也就突然想给出一些结论，参考自 Android 开发艺术探索："></a>既然都提了这么一点，也就突然想给出一些结论，参考自 Android 开发艺术探索：</h1><ol>
<li>同一个事件序列是指从手指接触屏幕（ACTION_DOWN）的那一刻起，到手指离开屏幕（ACTION_UP）的那一刻结束，中间含不定数量的 ACTION_MOVE 事件。</li>
<li>某个 View 一旦决定拦截事件，那么这一个事件序列都只能由它处理，并且它的 onInterceptTouchEvent() 方法也不会再调用。换句话说，比如一个 ViewGroup 里面有数个子 View，一旦 ACTION_DOWN 事件从 Activity 传到这个 ViewGroup 被其拦截，则后续的 MOVE 和 UP 等事件也不会传递到里面的子 View 中。</li>
<li>如果一个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件，即 onTouchEvent() 返回为 false，那么同一事件序列中的其他事件也不会再交给它处理，直接会调用其父 View 的 onTouchEvent()。</li>
<li>如果 View 不消耗除 ACTION_DOWN 以外的其他事件，那么这个点击事件会消失，此时父元素的 onTouchEvent() 并不会被调用，并且当然 View 可以持续收到后续的事件，最终这些消失的点击事件会传递给 Activity 处理。</li>
<li>ViewGroup 默认不拦截事件，View 没有 onInterceptTouchEvent() 方法，一旦有事件传递给它，则直接会调用 onTouchEvent()，并且起默认都会消耗掉事件。除非它是不可点击的（即 clickable 和 longClickable 均为 false）。View 的 longClickable 默认都为 false，而 clickable 分情况，比如 Button 默认为 true，TextView 默认为 false。</li>
<li>View 的 enable 属性不会影响 onTouchEvent() 的默认返回值，哪怕一个 View 是 disable 状态的，只要它的 clickable 或者 longClickable 有一个为 true，那么它的 onTouchEvent() 就会返回 true。</li>
<li>requestDisallowInterceptTouchEvent() 可以在子元素中干预父元素的事件分发过程，但是无法干预 ACTION_DOWN 事件。</li>
<li>事件优先顺序：setOnTouchListener() =&gt; onTouchEvent() =&gt; onClickListener()<h1 id="处理自定义-View-中的滑动冲突"><a href="#处理自定义-View-中的滑动冲突" class="headerlink" title="处理自定义 View 中的滑动冲突"></a>处理自定义 View 中的滑动冲突</h1>— 对于大多数 Android 开发来说，处理滑动冲突好像很难，但实战一下又发现，好像也挺简单，因为这个实际上是有套路可循的。基本就两种方案：外部拦截法 &amp;&amp; 内部拦截法<h2 id="外部拦截法"><a href="#外部拦截法" class="headerlink" title="外部拦截法"></a>外部拦截法</h2></li>
</ol>
<ul>
<li><p>所谓外部拦截法，顾名思义，就是直接在父容器中直接拦截掉我们的滑动事件，让其不能进入到子元素中，这似乎和我们 RecyclerView 嵌套 RecyclerView 时禁用内部 RecyclerView 滑动有那么一丝相似之处，就是内部不处理就完事儿了。但细细品来又完全不一样，这里的外部拦截法会让内部元素根本就收不到滑动事件。</p>
</li>
<li><p>这种方法明显非常适合我们上面讲的事件分发机制。我们在接收 ACTION_MOVE 事件的时候，直接通过使 onInterceptTouchEvent() 方法返回 true 来直接拦截掉事件就可以了，伪代码想必大家也知道了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">    ev?.run &#123;</div><div class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE &amp;&amp; 父容器需要点击事件)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>代码很简单，我们仅仅需要在事件ACTION_MOVE时去处理我们的逻辑就好了，当满足我们的逻辑的时候，就拦截掉 ACTION_MOVE 事件给自己处理。</p>
</li>
<li>至于为什么不去拦截 ACTION_DOWN 和 ACTION_UP，想必大家也清楚了。上面说了，如果拦截了 ACTION_DOWN 事件，那后续的 ACTION_MOVE、ACTION_UP 等其它事件均不会在调用 onInterceptTouchEvent() 方法，会直接交给当前容器处理。而如果我们拦截掉 ACTION_UP 的话，肯定会导致子元素的点击事件无法被处理，因为大家肯定都知道一个点击事件从 ACTION_DOWN 开始，从 ACTION_UP 结束，二者缺一不可。<h2 id="内部拦截法"><a href="#内部拦截法" class="headerlink" title="内部拦截法"></a>内部拦截法</h2></li>
<li>内部拦截法相对外部拦截法会复杂一些，所以我们通常来说，都更加推荐用外部拦截法进行处理。不过，内部拦截法依然有着它非常重要的地位，具体情况有可能会遇到。</li>
<li>内部拦截法的话，需要 requestDisallowInterceptTouchEvent() 方法的支持，这个方法是干什么的呢？顾名思义，请求是否不允许拦截事件，其接收一个 boolean 参数，表示是否不允许拦截。</li>
<li><p>我们直接重写子元素的 dispatchTouchEvent() 方法，得到伪代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">    ev?.run &#123;</div><div class="line">        <span class="keyword">when</span>(action)&#123;</div><div class="line">            MotionEvent.ACTION_DOWN -&gt; parent.requestDisallowInterceptTouchEvent(<span class="literal">true</span>)</div><div class="line">            MotionEvent.ACTION_MOVE -&gt;&#123;</div><div class="line">                <span class="keyword">if</span>(满足需要让外部容器拦截事件)&#123;</div><div class="line">                    parent.requestDisallowInterceptTouchEvent(<span class="literal">false</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>我们给父容器的 requestDisallowInterceptTouchEvent() 传递的参数代表是否不允许其拦截事件，当参数为 true 的时候代表不允许拦截，为 false 的时候代表拦截。所以看起来和外部拦截法也就如出一辙了。</p>
</li>
<li>不过仅仅有这点修改还不够，我们通过前面的理论基础知道，当我们的父容器拦截掉 ACTION_DOWN 事件的时候，所有的事件都无法再传递到子元素中，自然也就不会调用上面我们写的 dispatchTouchEvent() 方法了。所以我们在内部拦截法的时候还需要重写父容器的 onInterceptTouchEvent() 方法。<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</div><div class="line">    ev?.run &#123;</div><div class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;基于&lt;a href=&quot;https://www.wanandroid.com/article/list/0?cid=440&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.wanandroid.com&lt;/a&gt;每
    
    </summary>
    
      <category term="Android面试" scheme="http://sorgs.cn/categories/Android%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="每日一问笔记" scheme="http://sorgs.cn/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%97%AE%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="http://sorgs.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔记" scheme="http://sorgs.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android中JNI调用第三方so以及头文件方式</title>
    <link href="http://sorgs.cn/post/7510/"/>
    <id>http://sorgs.cn/post/7510/</id>
    <published>2019-05-19T13:05:57.000Z</published>
    <updated>2019-08-15T01:29:03.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>有时候我们在android开发JNI的时候，会涉及到引用第三方的so和头文件引用。现在网上也有相应的资料，但是还是感觉不全和描述不清晰。这里进行整理一些，方便大家参考。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>NDK，进行JNI开发，Android studio中的NDK肯定是需要配好的。需要注意一点的是，如果上比较新的NDK版本的话，在toolchains目录会少几种，需要去下载比较旧的版本把缺失的放进去。原因大概是Google已经放弃哪几种了。这个主要是针对比较老的工程会遇得到，也会有报错信息，搜一下很容易就知道了，就不展开说了。</li>
<li>cMake和cpp。一般来说进行了JNI开发了，这些应该是有了，不再细说。只说下目录，cpp可以建一个cpp文件夹放在main文件夹下面，cMake需要放在app目录下面。详情目录结构可以参考Demo。</li>
<li><p>build.gradle</p>
<ul>
<li><p>首先是在defaultConfig闭包类添加如下内容。我这边是生成了armeabi-v7a的格式，如需要其他格式，自行添加即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">externalNativeBuild &#123;</div><div class="line">    cmake &#123;</div><div class="line">        cppFlags &quot;&quot;</div><div class="line">        abiFilters &apos;armeabi-v7a&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在android闭包下面，即最大的闭包下面添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">externalNativeBuild &#123;</div><div class="line">    cmake &#123;</div><div class="line">        path &quot;CMakeLists.txt&quot;</div><div class="line">        version &quot;3.10.2&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        // let gradle pack the shared library into apk</div><div class="line">        jniLibs.srcDirs = [&apos;src/main/jniLibs&apos;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="文件放置放置"><a href="#文件放置放置" class="headerlink" title="文件放置放置"></a>文件放置放置</h1><ul>
<li>so文件：在main目录下面建立jniLibs文件夹。然后在下面在建立armeabi-v7a文件夹，把相应的so文件放到里面。需要注意的是，在自己需要生成什么类型的so，就需要建立什么类的文件夹，然后拷入相应类型第三方so文件。</li>
<li>头文件：在cpp目录下面建立include文件夹，放入第三方头文件即可。</li>
</ul>
<h1 id="cMake编写"><a href="#cMake编写" class="headerlink" title="cMake编写"></a>cMake编写</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"># For more information about using CMake with Android Studio, read the</div><div class="line"># documentation: https://d.android.com/studio/projects/add-native-code.html</div><div class="line"></div><div class="line"># Sets the minimum version of CMake required to build the native library.</div><div class="line">cmake_minimum_required(VERSION 3.4.1)</div><div class="line"></div><div class="line"># Creates and names a library, sets it as either STATIC</div><div class="line"># or SHARED, and provides the relative paths to its source code.</div><div class="line"># You can define multiple libraries, and CMake builds them for you.</div><div class="line"># Gradle automatically packages shared libraries with your APK.</div><div class="line"></div><div class="line">add_library( # Sets the name of the library.</div><div class="line">        native-lib</div><div class="line"></div><div class="line">        # Sets the library as a shared library.</div><div class="line">        SHARED</div><div class="line"></div><div class="line">        # Provides a relative path to your source file(s).</div><div class="line">        src/main/cpp/native-lib.cpp)</div><div class="line"></div><div class="line">#动态方式加载 STATIC：表示静态的.a的库 SHARED：表示.so的库。</div><div class="line">add_library(gmpfprojectorfocusmanager_hidl SHARED IMPORTED)</div><div class="line">add_library(utils SHARED IMPORTED)</div><div class="line">add_library(hidlbase SHARED IMPORTED)</div><div class="line">add_library(hwbinder SHARED IMPORTED)</div><div class="line">add_library(hidltransport SHARED IMPORTED)</div><div class="line">add_library(hidlmemory SHARED IMPORTED)</div><div class="line">#设置要连接的so的相对路径 $&#123;CMAKE_SOURCE_DIR&#125;：表示CMake.txt的当前文件夹路径 $&#123;ANDROID_ABI&#125;：编译时会自动根据CPU架构去选择相应的库</div><div class="line">set_target_properties(gmpfprojectorfocusmanager_hidl PROPERTIES IMPORTED_LOCATION $&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;/libgmpfprojectorfocusmanager_hidl.so)</div><div class="line">set_target_properties(utils PROPERTIES IMPORTED_LOCATION $&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;/libutils.so)</div><div class="line">set_target_properties(hidlbase PROPERTIES IMPORTED_LOCATION $&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;/libhidlbase.so)</div><div class="line">set_target_properties(hwbinder PROPERTIES IMPORTED_LOCATION $&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;/libhwbinder.so)</div><div class="line">set_target_properties(hidltransport PROPERTIES IMPORTED_LOCATION $&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;/libhidltransport.so)</div><div class="line">set_target_properties(hidlmemory PROPERTIES IMPORTED_LOCATION $&#123;CMAKE_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;/libhidlmemory.so)</div><div class="line">#添加第三方头文件</div><div class="line">target_include_directories(native-lib PRIVATE $&#123;CMAKE_SOURCE_DIR&#125;/src/main/cpp/include)</div><div class="line"># Searches for a specified prebuilt library and stores the path as a</div><div class="line"># variable. Because CMake includes system libraries in the search path by</div><div class="line"># default, you only need to specify the name of the public NDK library</div><div class="line"># you want to add. CMake verifies that the library exists before</div><div class="line"># completing its build.</div><div class="line"></div><div class="line">find_library( # Sets the name of the path variable.</div><div class="line">        log-lib</div><div class="line"></div><div class="line">        # Specifies the name of the NDK library that</div><div class="line">        # you want CMake to locate.</div><div class="line">        log)</div><div class="line"></div><div class="line"># Specifies libraries CMake should link to your target library. You</div><div class="line"># can link multiple libraries, such as libraries you define in this</div><div class="line"># build script, prebuilt third-party libraries, or system libraries.</div><div class="line"></div><div class="line">target_link_libraries( # Specifies the target library.</div><div class="line">        native-lib</div><div class="line"></div><div class="line">        # Links the target library to the log library</div><div class="line">         gmpfprojectorfocusmanager_hidl</div><div class="line">         utils</div><div class="line">         hidlbase</div><div class="line">         hwbinder</div><div class="line">         hidltransport</div><div class="line">         hidlmemory</div><div class="line">        # included in the NDK.</div><div class="line">        $&#123;log-lib&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>add_library:这里主要是依赖第三方的so方式，每个so都要写一句。第一个参数是so的文件。例如libutils.so，则需要填写utils；第二个参数为STATIC：表示静态的.a的库或者SHARED：表示.so的库；第三个参数固定IMPORTED</li>
<li>set_target_properties：链接so的路径。第一个参数依然是so的名字；第二个参数填写PROPERTIES即可；第三个填写IMPORTED_LOCATION即可；第四个则需要填写so的路径，需要注意的是会根据自己的需要生成so的类型去查找相应类型的so。</li>
<li>target_include_directories：添加第三方头文件。第一个参数填写native-lib；第二个参数PRIVATE；第三个参数即头文件的文件夹路径。</li>
<li>target_link_libraries：最后需要在这里把第三方so名字加入即可。</li>
</ul>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li>在自己的cpp里面就只直接通过include引用第三的文件夹了，以及调用第三方的so文件</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol>
<li>建议按照这样的路径来放置，防止出现问题。</li>
<li>demo已经放到了github上面，可以进行参考配置。<a href="https://github.com/sorgs/NDKTest" title="https://github.com/sorgs/NDKTest" target="_blank" rel="external">https://github.com/sorgs/NDKTest</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;有时候我们在android开发JNI的时候，会涉及到引用第三方的so和头文件引用。现在网上也有相应的资料，但是还是感觉不全和描述不清晰。这里
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="so" scheme="http://sorgs.cn/tags/so/"/>
    
      <category term="NDK" scheme="http://sorgs.cn/tags/NDK/"/>
    
      <category term="JNI" scheme="http://sorgs.cn/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>github发布和维护属于自己的基础工程远程库</title>
    <link href="http://sorgs.cn/post/9217/"/>
    <id>http://sorgs.cn/post/9217/</id>
    <published>2019-03-24T10:34:24.000Z</published>
    <updated>2019-08-15T01:29:03.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>自己动手搭建一个属于自己的远程基础仓库</p>
<p>不管是开发新项目亦或者是自己写demo练练手之类的。都需要建立工程，然后开始拷贝工具类，然后在啪啦啪啦引用必须的三方库，建立Base基类等等。</p>
<p>搞了一段时间之后，觉得实在是太麻烦了，为什么我不建立一个基础工程。然后做成一个远程库，每次建立新的工程之后，直接就引用这个库。一下子自己熟手的工具类，Base基类，甚至常用一些第三方库都OK了。</p>
<p>在平时写代码的时候，也注意收集，比较顺手的东西，直接放到基础库当中去，以后对新工程简直太方便了。</p>
<p>这里只说简单说下流程遇到坑，</p>
<h1 id="建立基础库"><a href="#建立基础库" class="headerlink" title="建立基础库"></a>建立基础库</h1><ol>
<li>建立工程，再new一个module，选择android Library，然后开始编写和搭建自己想放到基础工程的东西。</li>
<li>发布到github上面</li>
<li>在github上面首页点击release-create a new releases(后续发布新版本点击draft a new release),相当于是打一个tag。在Tag version写上版本号，比如 V1.0之类的。下面可以自己随便写点描述。</li>
<li>上<a href="https://jitpack.io/" title="https://jitpack.io/" target="_blank" rel="external">https://jitpack.io/</a> ,输入自己的git仓库，点击look up即可。选择自己发布的版本，点击get it即可。</li>
<li>然后在自己新建工程引用就可以开心使用了。</li>
<li>鉴于网上很多教程，这里不再细说过程，可以直接到<a href="https://www.jianshu.com/p/49ea4fa47037" title="如何发布你的GitHub开源库" target="_blank" rel="external">https://www.jianshu.com/p/49ea4fa47037</a></li>
</ol>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote>
<p>这里想简单说下自己遇到的一些问题</p>
</blockquote>
<ol>
<li>既然是自己建立的基础工程，就不需要app目录等其他module之类的</li>
<li>一定不要在build.gradle里面配置优化压缩等<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            //Zipalign优化</div><div class="line">            zipAlignEnabled true</div><div class="line">            //去除无用资源</div><div class="line">            shrinkResources true</div><div class="line">            //签名</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">            //混淆</div><div class="line">            minifyEnabled true</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            //签名</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这些是不需要的。尤其是最优化之类的，很容易造成的问题就是，打aar包没有部分代码打进去，因为在优化之后，没有被调用的函数和类是会被忽略的，而工具类就很容易被优化处理了。混淆的也是不太需要配置，如果一定要配置混淆，则需要注意，把混淆中压缩优化等去除掉。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul>
<li>自己简单的搭建了一个基础工程，目前里面包含了一些常用的第三方库，BaseActivity，BaseFragment等。还有一些常用工具类等，比如Log，Toast等</li>
<li>欢迎大家一起维护和优化，<a href="https://github.com/sorgs/project" title="https://github.com/sorgs/project" target="_blank" rel="external">https://github.com/sorgs/project</a> 。如果能够任何地方能够帮助到您，希望可以给个start鼓励鼓励。感谢！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;自己动手搭建一个属于自己的远程基础仓库&lt;/p&gt;
&lt;p&gt;不管是开发新项目亦或者是自己写demo练练手之类的。都需要建立工程，然后开始拷贝工具类
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础工程" scheme="http://sorgs.cn/tags/%E5%9F%BA%E7%A1%80%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="远程库" scheme="http://sorgs.cn/tags/%E8%BF%9C%E7%A8%8B%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>整理系类-Java基础-Java关键字汇总</title>
    <link href="http://sorgs.cn/post/60878/"/>
    <id>http://sorgs.cn/post/60878/</id>
    <published>2019-01-02T15:03:09.000Z</published>
    <updated>2019-08-15T01:29:03.862Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>整理系类-Java基础</p>
<p>整理于<a href="https://github.com/yangchong211/YCBlogs" target="_blank" rel="external">YCBlogs</a></p>
</blockquote>
<h3 id="常见的关键字"><a href="#常见的关键字" class="headerlink" title="常见的关键字"></a>常见的关键字</h3><ul>
<li>用于定义数据类型的关键字<ul>
<li>class </li>
<li>interface    </li>
<li>byte </li>
<li>short </li>
<li>int </li>
<li>long </li>
<li>float </li>
<li>double </li>
<li>char </li>
<li>boolean </li>
<li>void               </li>
</ul>
</li>
<li>用于定义数据类型值的关键字<ul>
<li>true </li>
<li>false </li>
<li>null       </li>
</ul>
</li>
<li>用于定义流程控制的关键字<ul>
<li>if    </li>
<li>else </li>
<li>switch    </li>
<li>case </li>
<li>default </li>
<li>while </li>
<li>do </li>
<li>for </li>
<li>break    </li>
<li>continue </li>
<li>return           </li>
</ul>
</li>
<li>用于定义访问权限修饰符的关键字<ul>
<li>private    </li>
<li>protected </li>
<li>public       </li>
</ul>
</li>
<li>用于定义类，函数，变量修饰符的关键字<ul>
<li>abstract </li>
<li>final </li>
<li>static </li>
<li>synchronized   </li>
</ul>
</li>
<li>用于定义类与类之间关系的关键字<ul>
<li>extends    </li>
<li>implements           </li>
</ul>
</li>
<li>用于定义建立实例及引用实例，判断实例的关键字<ul>
<li>new    </li>
<li>this </li>
<li>super </li>
<li>instanceof   </li>
</ul>
</li>
<li>用于异常处理的关键字<ul>
<li>try    </li>
<li>catch </li>
<li>finally </li>
<li>throw    </li>
<li>throws</li>
</ul>
</li>
<li>用于包的关键字<ul>
<li>package    </li>
<li>import           </li>
</ul>
</li>
<li>其他修饰符关键字 <ul>
<li>native </li>
<li>strictfp </li>
<li>transient </li>
<li>volatile </li>
<li>assert</li>
</ul>
</li>
</ul>
<h3 id="关键字的作用说明"><a href="#关键字的作用说明" class="headerlink" title="关键字的作用说明"></a>关键字的作用说明</h3><ul>
<li>break           <ul>
<li>用在 switch 或者循环语句中，表示中断结束的意思，跳出循环直接可以结束该语句</li>
</ul>
</li>
<li>continue        <ul>
<li>用在循环语句中，表示中断结束的意思，不过跟 break 有区别，它是退出本次循环后继续执行下一次循环           </li>
</ul>
</li>
<li>return          <ul>
<li>常用功能是结束一个方法（退出一个方法），跳转到上层调用的方法</li>
</ul>
</li>
<li>interface       <ul>
<li>接口的意思，用来定义接口。</li>
</ul>
</li>
<li>static          <ul>
<li>静态修饰符，被修饰后成员被该类所有的对象所共有。也可以通过类名调用</li>
</ul>
</li>
<li>private         <ul>
<li>权限修饰符，可以修饰成员变量和成员方法，被修饰的成员只能在本类中被访问。隐藏具体实现细节，提供对外公共访问方法，提高安全性</li>
</ul>
</li>
<li>this<ul>
<li>当成员变量和局部变量名称一样时，需要用 this 修饰，谁调用这个方法,那么该方法的内部的this就代表谁，如果不适用 this ，那么局部变量隐藏了成员变量</li>
</ul>
</li>
<li>super           <ul>
<li>代表的是父类存储空间的标识(可以理解成父类的引用,可以操作父类的成员)</li>
</ul>
</li>
<li>final           <ul>
<li>由于继承中有一个方法重写的现象,而有时候我们不想让子类去重写父类的方法.这对这种情况java就给我们提供了一个关键字: final。可以修饰类，变量，成员方法。<ul>
<li>被修饰类不能被继承；</li>
<li>被修饰的方法不能被重写；</li>
<li>被修饰的变量不能被重新赋值,因为这个量其实是一个常量。</li>
<li>修饰基本数据类型，指的是值不能被改变；</li>
<li>修饰引用数据类型，指的是地址值不能被改变</li>
</ul>
</li>
</ul>
</li>
<li>finally         <ul>
<li>被finally控制的语句体一定会执行；特殊情况：在执行到finally之前jvm退出了(比如System.exit(0))</li>
<li>finally的作用:    <ul>
<li>用于释放资源，在IO流操作和数据库操作中会见到</li>
</ul>
</li>
</ul>
</li>
<li>abstract        <ul>
<li>抽象的意思，用来修饰抽象类与抽象方法</li>
<li>abstract 不能和哪些关键字共存?<ul>
<li>private：冲突，被private修饰的方法不能被子类继承,就不能被重写,而我们的抽象方法还需要被子类重写</li>
<li>final：冲突，被final修饰的方法,不能被子类重写，而我们的抽象方法还需要被子类重写</li>
<li>static：无意义，因为被static修饰的方法可以通过类名直接访问,但是我们的抽象方法没有方法体,所以这样访问没有意思</li>
</ul>
</li>
</ul>
</li>
<li>extends<ul>
<li>继承的意思，通过它可以类与类之间产生继承关系。</li>
</ul>
</li>
<li>implements      <ul>
<li>实现的意思，通过它可以让类与接口之间产生实现关系。</li>
</ul>
</li>
<li>instanceof      <ul>
<li>测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据</li>
</ul>
</li>
</ul>
<h3 id="重要关键字说明"><a href="#重要关键字说明" class="headerlink" title="重要关键字说明"></a>重要关键字说明</h3><ul>
<li>instanceof<ul>
<li>instanceof是Java的一个二元操作符，和==，&gt;，&lt;是同一类东西。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据。</li>
</ul>
</li>
</ul>
<ul>
<li><p>final，finally，finalize有什么不同？</p>
<ul>
<li><strong>final可以修饰类，方法，变量</strong></li>
<li>final修饰类代表类不可以继承拓展</li>
<li>final修饰变量表示变量不可以修改</li>
<li>final修饰方法表示方法不可以被重写</li>
<li><strong>finally则是Java保证重点代码一定要被执行的一种机制</strong><ul>
<li>可以使用 try-finally 或者 try-catch-finally 来进行类似关闭 JDBC连接、保证 unlock 锁等动作。</li>
</ul>
</li>
<li><strong>finalize 是基础类 java.lang.Object的一个方法</strong><ul>
<li>它的设计目的是保证对象在被垃圾收集前完成特定资源的回收。finalize 机制现在已经不推荐使用，并且在 JDK 9开始被标记为 deprecated。</li>
</ul>
</li>
<li><strong>final 关键字深入理解</strong><ul>
<li>可以将方法或者类声明为 final，这样就可以明确告知别人，这些行为是不许修改的。</li>
<li>如果你关注过 Java 核心类库的定义或源码， 有没有发现java.lang 包下面的很多类，相当一部分都被声明成为final class？在第三方类库的一些基础类中同样如此，这可以有效避免 API 使用者更改基础功能，某种程度上，这是保证平台安全的必要手段。</li>
<li>使用 final 修饰参数或者变量，也可以清楚地避免意外赋值导致的编程错误，甚至，有人明确推荐将所有方法参数、本地变量、成员变量声明成 final。</li>
<li>final 变量产生了某种程度的不可变（immutable）的效果，所以，可以用于保护只读数据，尤其是在并发编程中，因为明确地不能再赋值 final 变量，有利于减少额外的同步开销，也可以省去一些防御性拷贝的必要。</li>
</ul>
</li>
</ul>
</li>
<li><p>static</p>
<ul>
<li>可以用来修饰：成员变量，成员方法，代码块，内部类等。具体如下所示<ul>
<li><strong>修饰成员变量和成员方法</strong> <ul>
<li>被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。</li>
<li>被static 声明的成员变量属于静态成员变量，静态变量存放在Java内存区域的方法区。</li>
</ul>
</li>
<li><strong>静态代码块</strong> <ul>
<li>静态代码块定义在类中方法外,静态代码块在非静态代码块之前执行(静态代码块—&gt;非静态代码块—&gt;构造方法)</li>
<li>该类不管创建多少对象，静态代码块只执行一次.</li>
</ul>
</li>
<li><strong>静态内部类（static修饰类的话只能修饰内部类）</strong> </li>
<li>静态内部类与非静态内部类之间存在一个最大的区别:<ul>
<li>非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围内，但是静态内部类却没有。没有这个引用就意味着：1.它的创建是不需要依赖外围类的创建。2.它不能使用任何外围类的非static成员变量和方法。</li>
</ul>
</li>
<li><strong>静态导包(用来导入类中的静态资源，1.5之后的新特性):</strong><ul>
<li>这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理系类-Java基础&lt;/p&gt;
&lt;p&gt;整理于&lt;a href=&quot;https://github.com/yangchong211/YCBlogs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;YCBlogs&lt;/a&gt;&lt;/p&gt;
&lt;/blo
    
    </summary>
    
      <category term="Java开发" scheme="http://sorgs.cn/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java基础" scheme="http://sorgs.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Java关键字" scheme="http://sorgs.cn/tags/Java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="整理转载" scheme="http://sorgs.cn/tags/%E6%95%B4%E7%90%86%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>kotlin配合dagger2出现的问题</title>
    <link href="http://sorgs.cn/post/2500/"/>
    <id>http://sorgs.cn/post/2500/</id>
    <published>2018-10-14T05:12:03.000Z</published>
    <updated>2019-08-15T01:29:03.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近没事玩玩kotlin，随便学习了一波dagger2，打配合使用下，但是出现了些问题，记录出来</p>
</blockquote>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li>Unresolved reference: DaggerAddFavoriteComponent</li>
<li>Compilation error. See log for more details</li>
<li>Caused by: org.gradle.api.GradleException: Compilation error. See log for more details</li>
<li>org.gradle.api.tasks.TaskExecutionException: Execution failed for task ‘:app:compileDebugKotlin’.<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1></li>
<li>kotlin插件<ul>
<li>File-&gt;Settings-&gt;Plugins</li>
<li><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/1.png" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></li>
<li>记住版本号 1.2.71</li>
</ul>
</li>
<li><p>project的build.gradle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.2.71&apos;</div><div class="line">    repositories &#123;</div><div class="line">        google()</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:3.2.0&apos;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://pic.sorgs.cn/kotlin_1.png" alt="image"></p>
<ul>
<li>app目录build.gradle<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> apply plugin: &apos;kotlin-android&apos;</div><div class="line"></div><div class="line">apply plugin: &apos;kotlin-android-extensions&apos;</div><div class="line">apply plugin: &apos;kotlin-kapt&apos;</div><div class="line">kapt &#123;</div><div class="line">    generateStubs = true</div><div class="line">&#125;</div><div class="line">...</div><div class="line">dependencies &#123;</div><div class="line">implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</div><div class="line">    //一定需要用annotationProcessor</div><div class="line">    annotationProcessor &quot;com.google.dagger:dagger-compiler:2.15&quot;</div><div class="line">    implementation &apos;com.google.dagger:dagger:2.15&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近没事玩玩kotlin，随便学习了一波dagger2，打配合使用下，但是出现了些问题，记录出来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="kotlin" scheme="http://sorgs.cn/tags/kotlin/"/>
    
      <category term="dagger2" scheme="http://sorgs.cn/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>自定义签到的步骤View</title>
    <link href="http://sorgs.cn/post/388/"/>
    <id>http://sorgs.cn/post/388/</id>
    <published>2018-08-19T07:46:52.000Z</published>
    <updated>2019-08-15T01:29:03.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>*本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</p>
</blockquote>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>涉及到一个签到的步骤view</p>
<p>需求：以七天为周天，执行当天签到需要一个动画效果；签到前灰色，签到后变为绿色；每天加的分数不一定，第三天和第七天加的比较多，分数签到完成为橙色，有up标签。</p>
<ul>
<li>效果图：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/stepView.gif" alt="-" title="">
                </div>
                <div class="image-caption">-</div>
            </figure>
</li>
</ul>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul>
<li>首先是把该绘制的东西绘制到画布上，这点没什么好说，上一遍博客差不多说了怎么去绘制。</li>
<li>先根据数据绘制出静态的东西。把未签到的东西全部绘制完毕。</li>
<li>然后开始绘制动画。处理动画的方式，利用postInvalidate()引起重绘，每次画一点点的橙色进度，后面部分绘制为未签到的灰色。每次更新增加一点点橙色的进度，这样在快速的情况下，就是一个连续的动画效果</li>
</ul>
<h1 id="封装状态bean"><a href="#封装状态bean" class="headerlink" title="封装状态bean"></a>封装状态bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">StepBean</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state = state;</div><div class="line">    <span class="keyword">this</span>.number = number;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>state：封装了3个状态，代表已完成签到，当前进行的签到，和未签到</li>
<li>number：封装添加的分数</li>
</ul>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><ul>
<li>把一些具体的画笔，资源文件等初始化出来<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//已经完成的icon</span></div><div class="line">mCompleteIcon = ContextCompat.getDrawable(getContext(), R.drawable.ic_sign_finish);</div><div class="line"><span class="comment">//正在进行的icon</span></div><div class="line">mAttentionIcon = ContextCompat.getDrawable(getContext(), R.drawable.ic_sign_unfinish);</div><div class="line"><span class="comment">//未完成的icon</span></div><div class="line">mDefaultIcon = ContextCompat.getDrawable(getContext(), R.drawable.ic_sign_unfinish);</div><div class="line"><span class="comment">//UP的icon</span></div><div class="line">mUpIcon = ContextCompat.getDrawable(getContext(), R.drawable.ic_sign_up);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>初始化一些paint就不再介绍，这里就说下初始化Drawable文件，利用ContextCompat.getDrawable()把资源文件引入。因为未签到和当前签到都是属于还没有签到，所以都是展示没有签到的图标。</p>
<h1 id="测量"><a href="#测量" class="headerlink" title="测量"></a>测量</h1><ul>
<li><p>onMeasure():这里没有太多操作，仅仅把值设置下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), MeasureSpec.getSize(heightMeasureSpec));</div></pre></td></tr></table></figure>
</li>
<li><p>onSizeChanged（）:这里操作就多了一些，主要是需要确定下来图标绘制的位置，已经线段的位置。（这里的说是线段，其实就是当矩形来绘制），注释已经写了很清楚，这里不多做说明了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//图标的中中心Y点</span></div><div class="line">mCenterY = CalcUtils.dp2px(getContext(), <span class="number">28f</span>) + mIconHeight / <span class="number">2</span>;</div><div class="line"><span class="comment">//获取左上方Y的位置，获取该点的意义是为了方便画矩形左上的Y位置</span></div><div class="line">mLeftY = mCenterY - (mCompletedLineHeight / <span class="number">2</span>);</div><div class="line"><span class="comment">//获取右下方Y的位置，获取该点的意义是为了方便画矩形右下的Y位置</span></div><div class="line">mRightY = mCenterY + mCompletedLineHeight / <span class="number">2</span>;</div><div class="line"><span class="comment">//计算图标中心点</span></div><div class="line">mCircleCenterPointPositionList.clear();</div><div class="line"><span class="comment">//第一个点距离父控件左边14.5dp</span></div><div class="line"><span class="keyword">float</span> size = mIconWeight / <span class="number">2</span> + CalcUtils.dp2px(getContext(), <span class="number">14.5f</span>);</div><div class="line">mCircleCenterPointPositionList.add(size);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mStepNum; i++) &#123;</div><div class="line">    <span class="comment">//从第二个点开始，每个点距离上一个点为图标的宽度加上线段的23dp的长度</span></div><div class="line">    size = size + mIconWeight + mLineWeight;</div><div class="line">    mCircleCenterPointPositionList.add(size);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h1><p>这里对外界暴露了一个方法，传入封装好的bean的List<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置流程步数</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> stepsBeanList 流程步数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStepNum</span><span class="params">(List&lt;StepBean&gt; stepsBeanList)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (stepsBeanList == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    mStepBeanList = stepsBeanList;</div><div class="line">    mStepNum = mStepBeanList.size();</div><div class="line">    <span class="comment">//找出最大的两个值的位置</span></div><div class="line">    mMax = CalcUtils.findMax(stepsBeanList);</div><div class="line">    <span class="comment">//引起重绘</span></div><div class="line">    postInvalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>值传递进来之后调用postInvalidate()方法,引起重绘，调用draw()方法，进行再次绘制。并且把List里面的最大两个值的位置找出来，在后面方便设置UP标志。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 寻到最大两个值的位置</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] findMax(List&lt;StepBean&gt; steps) &#123;</div><div class="line">    <span class="keyword">int</span>[] value = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span>[] position = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> temValue;</div><div class="line">    <span class="keyword">int</span> temPosition;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; steps.size(); i++) &#123;</div><div class="line">        <span class="keyword">if</span> (steps.get(i).getNumber() &gt; value[<span class="number">1</span>]) &#123;</div><div class="line">            <span class="comment">//比较出大的放到value[0]中</span></div><div class="line">            value[<span class="number">1</span>] = steps.get(i).getNumber();</div><div class="line">            position[<span class="number">1</span>] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (value[<span class="number">1</span>] &gt; value[<span class="number">0</span>]) &#123;</div><div class="line">            <span class="comment">//把最大的放到value[0]中,交换位置</span></div><div class="line">            temValue = value[<span class="number">0</span>];</div><div class="line">            value[<span class="number">0</span>] = value[<span class="number">1</span>];</div><div class="line">            value[<span class="number">1</span>] = temValue;</div><div class="line">            temPosition = position[<span class="number">0</span>];</div><div class="line">            position[<span class="number">0</span>] = position[<span class="number">1</span>];</div><div class="line">            position[<span class="number">1</span>] = temPosition;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> position;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>寻找最大值，我的想法是通过一次循环找出来，采用一个数组存储的方式，时间复杂度为O(n)。可能方法并非最优，如果有更好的方式的欢迎指教~！</p>
<h1 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h1><blockquote>
<p>绘制我这里分为了两步，第一步，是传入值之后，便绘制出签到之前的View，也就是静态的。然后提供一个方法暴露出去，待调用的时候开始执行签到动画，完成动态的绘制</p>
</blockquote>
<ul>
<li>绘制签到之前的View<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isAnimation) &#123;</div><div class="line">    drawSign(canvas);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    drawUnSign(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在onDraw()方法里面，我使用isAnimation，默认为false，调用绘制未签到状态的View，待调用执行动画方法时候为true，执行另一个方法。</p>
<ul>
<li>绘制线段<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制线段</span></div><div class="line"><span class="keyword">float</span> preComplectedXPosition = mCircleCenterPointPositionList.get(i) + mIconWeight / <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (i != mCircleCenterPointPositionList.size() - <span class="number">1</span>) &#123;</div><div class="line">    <span class="comment">//最后一条不需要绘制</span></div><div class="line">    <span class="keyword">if</span> (mStepBeanList.get(i + <span class="number">1</span>).getState() == StepBean.STEP_COMPLETED) &#123;</div><div class="line">        <span class="comment">//下一个是已完成，当前才需要绘制绿色</span></div><div class="line">        canvas.drawRect(preComplectedXPosition, mLeftY, preComplectedXPosition + mLineWeight,</div><div class="line">                mRightY, mCompletedPaint);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//其余绘制灰色</span></div><div class="line">        canvas.drawRect(preComplectedXPosition, mLeftY, preComplectedXPosition + mLineWeight,</div><div class="line">                mRightY, mUnCompletedPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">我们在mCircleCenterPointPositionList里面存储了签到每个步骤的图标中心点X坐标。那么就拿出来，进行绘制。</div><div class="line">     - 线段是比图标少一个的，那么可以少画第一条或者少画最后一条(相对图标)。我采取的是最后一条不绘制。那么每条线段就在每个步骤图标的后面，获取到图标的中线点X坐标，加上图标宽度的一般，就是该线段的X坐标。其余的根据已经固定的Y坐标和线段长度绘制便可。这里主要是根据当前状态，不是已经签到了，则绘制为灰色，已经签到才绘制为绿色。</div><div class="line"> - 绘制图标</div><div class="line">``` Java</div><div class="line"><span class="comment">//绘制图标</span></div><div class="line"><span class="keyword">float</span> currentComplectedXPosition = mCircleCenterPointPositionList.get(i);</div><div class="line">Rect rect = <span class="keyword">new</span> Rect((<span class="keyword">int</span>) (currentComplectedXPosition - mIconWeight / <span class="number">2</span>),</div><div class="line">        (<span class="keyword">int</span>) (mCenterY - mIconHeight / <span class="number">2</span>),</div><div class="line">        (<span class="keyword">int</span>) (currentComplectedXPosition + mIconWeight / <span class="number">2</span>),</div><div class="line">        (<span class="keyword">int</span>) (mCenterY + mIconHeight / <span class="number">2</span>));</div><div class="line">StepBean stepsBean = mStepBeanList.get(i);</div><div class="line"><span class="keyword">if</span> (stepsBean.getState() == StepBean.STEP_UNDO) &#123;</div><div class="line">    mDefaultIcon.setBounds(rect);</div><div class="line">    mDefaultIcon.draw(canvas);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (stepsBean.getState() == StepBean.STEP_CURRENT) &#123;</div><div class="line">    mAttentionIcon.setBounds(rect);</div><div class="line">    mAttentionIcon.draw(canvas);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (stepsBean.getState() == StepBean.STEP_COMPLETED) &#123;</div><div class="line">    mCompleteIcon.setBounds(rect);</div><div class="line">    mCompleteIcon.draw(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>对于图标的绘制，也是非常简单的计算，既然已经获取到了每个图标的中心X坐标，那么根据图标的大小计算出左上角和右下角，然后根据state绘制即可。</p>
<ul>
<li>绘制分数<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制增加的分数数目</span></div><div class="line"><span class="keyword">if</span> (stepsBean.getState() == StepBean.STEP_COMPLETED) &#123;</div><div class="line">    <span class="comment">//已经完成了</span></div><div class="line">    <span class="keyword">if</span> (i == mMax[<span class="number">0</span>] || i == mMax[<span class="number">1</span>]) &#123;</div><div class="line">        <span class="comment">//是up的需要橙色</span></div><div class="line">        mTextNumberPaint.setColor(mCurrentTextColor);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//普通完成的颜色</span></div><div class="line">        mTextNumberPaint.setColor(mCompletedLineColor);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//还没签到的，颜色均为灰色</span></div><div class="line">    mTextNumberPaint.setColor(mUnCompletedLineColor);</div><div class="line">&#125;</div><div class="line">canvas.drawText(<span class="string">"+"</span> + stepsBean.getNumber(),</div><div class="line">        currentComplectedXPosition + CalcUtils.dp2px(getContext(), <span class="number">2f</span>),</div><div class="line">        mCenterY - mIconHeight / <span class="number">2</span> - CalcUtils.dp2px(getContext(), <span class="number">0.5f</span>),</div><div class="line">        mTextNumberPaint);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>对于分数，就依附在每个图标的上方，根据设计师给的标注，找出文本的左下角坐标(默认文本绘制是文本的左下角坐标)绘制。注意的是，要根据找出最大两个值的位置，如果是较大的两个，最需要为橙色</p>
<ul>
<li>绘制UP图标<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制UP</span></div><div class="line"><span class="keyword">if</span> (i == mMax[<span class="number">0</span>] || i == mMax[<span class="number">1</span>]) &#123;</div><div class="line">    <span class="comment">//需要UP才进行绘制</span></div><div class="line">    Rect rectUp =</div><div class="line">            <span class="keyword">new</span> Rect((<span class="keyword">int</span>) (currentComplectedXPosition - mUpWeight / <span class="number">2</span>),</div><div class="line">                    (<span class="keyword">int</span>) (mCenterY - mIconHeight / <span class="number">2</span> - CalcUtils.dp2px(getContext(), <span class="number">8f</span>) - mUpHeight),</div><div class="line">                    (<span class="keyword">int</span>) (currentComplectedXPosition + mUpWeight / <span class="number">2</span>),</div><div class="line">                    (<span class="keyword">int</span>) (mCenterY - mIconHeight / <span class="number">2</span> - CalcUtils.dp2px(getContext(), <span class="number">8f</span>)));</div><div class="line">    mUpIcon.setBounds(rectUp);</div><div class="line">    mUpIcon.draw(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Up图标的绘制依附在增加的分数上面，也是根据较大两个值的位置绘制，计算出左上角和右下角进行绘制。</p>
<ul>
<li>静态绘制完毕，就已经展示出来了未签到状态的View。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 执行签到动画</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> position 执行的位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startSignAnimation</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="comment">//线条从灰色变为绿色</span></div><div class="line">    isAnimation = <span class="keyword">true</span>;</div><div class="line">    mPosition = position;</div><div class="line">    <span class="comment">//引起重绘</span></div><div class="line">    postInvalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>我这里暴露出执行动画的方法，将要执行动画的位置传入。（这里要传位置是因为后台数据所致，也是可以根据state位置自行找出）。将isAnimation赋值true,调用postInvalidate()，再次调用Drwa()方法进行绘制。</p>
<ul>
<li><p>绘制线段动画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制线段</span></div><div class="line"><span class="keyword">float</span> preComplectedXPosition = mCircleCenterPointPositionList.get(i) + mIconWeight / <span class="number">2</span>;</div><div class="line"><span class="keyword">if</span> (i != mCircleCenterPointPositionList.size() - <span class="number">1</span>) &#123;</div><div class="line">    <span class="comment">//最后一条不需要绘制</span></div><div class="line">    <span class="keyword">if</span> (mStepBeanList.get(i + <span class="number">1</span>).getState() == StepBean.STEP_COMPLETED) &#123;</div><div class="line">        <span class="comment">//下一个是已完成，当前才需要绘制绿色</span></div><div class="line">        canvas.drawRect(preComplectedXPosition, mLeftY, preComplectedXPosition + mLineWeight,</div><div class="line">                mRightY, mCompletedPaint);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//其余绘制灰色</span></div><div class="line">        <span class="comment">//当前位置执行动画</span></div><div class="line">        <span class="keyword">if</span> (i == mPosition - <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//绿色开始绘制的地方,</span></div><div class="line">            <span class="keyword">float</span> endX = preComplectedXPosition + mAnimationWeight * (mCount / ANIMATION_INTERVAL);</div><div class="line">            <span class="comment">//绘制绿色</span></div><div class="line">            canvas.drawRect(preComplectedXPosition, mLeftY, endX, mRightY, mCompletedPaint);</div><div class="line">            <span class="comment">//绘制灰色</span></div><div class="line">            canvas.drawRect(endX, mLeftY, preComplectedXPosition + mLineWeight,</div><div class="line">                    mRightY, mUnCompletedPaint);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            canvas.drawRect(preComplectedXPosition, mLeftY, preComplectedXPosition + mLineWeight,</div><div class="line">                    mRightY, mUnCompletedPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对于未签到和已经签到的和上面的绘制没有太多变，仅仅在当前签到位置执行动画效果</li>
<li>定义mCount为整个动画执行分段的次数记录；ANIMATION_INTERVAL为每次动画执行的时间间隔，暂定10ms；mAnimationWeight为每次间隔中增加的长度。然后每次用根据是分度绘制的第几次算出绘制橙色的长度，然后根据线段长度减去这段长度算出灰色的长度，进行绘制。</li>
</ul>
</li>
<li><p>绘制图标，文字，up动画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (i == mPosition &amp;&amp; mCount == ANIMATION_TIME) &#123;</div><div class="line">    <span class="comment">//当前需要绘制成绿色了</span></div><div class="line">    mCompleteIcon.setBounds(rect);</div><div class="line">    mCompleteIcon.draw(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>对于这部分的绘制，变化不太多，因为需求是线段动画执行完毕，就把文本、图标变为绿色，如果是较大两个值的地方，则变为橙色(这部分代码没有太多粘贴，详情请见demo项目)</p>
<ul>
<li>计算动画执行的次数<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//记录重绘次数</span></div><div class="line">mCount = mCount + ANIMATION_INTERVAL;</div><div class="line"><span class="keyword">if</span> (mCount &lt;= ANIMATION_TIME) &#123;</div><div class="line">    <span class="comment">//引起重绘</span></div><div class="line">    postInvalidate();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//重绘完成</span></div><div class="line">    isAnimation = <span class="keyword">false</span>;</div><div class="line">    mCount = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>维护了一个mCount，记录动画分段执行的次数，当值达到了要求的动画执行时间，变停止重绘，否则，调用postInvalidate()进行重绘，增加mCount的值。</p>
<h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><ul>
<li>在activity或者dialog等里面封装List，调用<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">    mStepBeans.add(<span class="keyword">new</span> StepBean(StepBean.STEP_COMPLETED, <span class="number">2</span>));</div><div class="line">    mStepBeans.add(<span class="keyword">new</span> StepBean(StepBean.STEP_COMPLETED, <span class="number">4</span>));</div><div class="line">    mStepBeans.add(<span class="keyword">new</span> StepBean(StepBean.STEP_CURRENT, <span class="number">10</span>));</div><div class="line">    mStepBeans.add(<span class="keyword">new</span> StepBean(StepBean.STEP_UNDO, <span class="number">2</span>));</div><div class="line">    mStepBeans.add(<span class="keyword">new</span> StepBean(StepBean.STEP_UNDO, <span class="number">4</span>));</div><div class="line">    mStepBeans.add(<span class="keyword">new</span> StepBean(StepBean.STEP_UNDO, <span class="number">4</span>));</div><div class="line">    mStepBeans.add(<span class="keyword">new</span> StepBean(StepBean.STEP_UNDO, <span class="number">30</span>));</div><div class="line">    mStepView.setStepNum(mStepBeans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</div><div class="line">    mTvSign.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            mStepView.startSignAnimation(<span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul>
<li>这部分的自定义还是很简单，主要是对待动画处理上。之前拿到这个需求，完全不知道怎么去完成动画效果，请教之后才明白，就是不停的引起重绘完成。在原理上是每次多绘制一部分，但在视觉上因为快速（低于16ms）形成了动画(或许还有其他方式)。比如歌词同步也是差不多是这个原理。</li>
<li>该部分自定义View很简单，但是我感觉到自己通过不断的学习慢慢在了解到更多的方式，欢迎各位尝试！</li>
<li>代码已经放在GitHub，如果有帮助到您，希望不要忘记点颗小星星。<a href="https://github.com/sorgs/StepView" title="https://github.com/sorgs/StepView" target="_blank" rel="external">https://github.com/sorgs/StepView</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;*本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;涉
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="自定义View" scheme="http://sorgs.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
      <category term="动画" scheme="http://sorgs.cn/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>一步步自定义一个封面选择框</title>
    <link href="http://sorgs.cn/post/45123/"/>
    <id>http://sorgs.cn/post/45123/</id>
    <published>2018-05-28T13:59:04.000Z</published>
    <updated>2019-08-15T01:29:03.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>*本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</p>
</blockquote>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>很多时候我们拍摄视频用户是竖屏拍摄，但是一个视频的封面需要一个16:9的图片，并且允许用户自己选择，于是做了一个简单的自定义View，进行展示封面选择。</p>
<ul>
<li>先看看引入到项目的效果：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/dragView.gif" alt="-" title="">
                </div>
                <div class="image-caption">-</div>
            </figure>
</li>
</ul>
<h1 id="自定义View的准备"><a href="#自定义View的准备" class="headerlink" title="自定义View的准备"></a>自定义View的准备</h1><ul>
<li>首先来说自定义View就是进行绘制，绘制肯定会需要确定大小，位置以及绘制的内容。对应的既是<br>onMeasure()、onLayout（）和onDraw（）<br>来看一张自定义View的流程图，对照图进行编写，变会轻松很多。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/dragView3.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>本次主要是在滑动监听上做功夫进行绘制，即onTouchEvent()</li>
</ul>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>1.当看到这自定义View的时候，我也是一脸懵逼。然后慢慢的思考。先绘制一个东西上去，让它跟着手指动起来就好，于是有了这样的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;  </div><div class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">            moveX = event.getX();  </div><div class="line">            moveY = event.getY();  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">            setTranslationX(getX() + (event.getX() - moveX));  </div><div class="line">            setTranslationY(getY() + (event.getY() - moveY));  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.动起来之后，我们继续再看目标，可以发现，我们只需要在Y轴上移动，并且是在一个长矩形中间滑动一个小的矩形。于是就绘制一个长矩形，和一个小矩形，修改onTouchEvent()中的方法，删除和x轴相关的代码。绘制矩形使用drawRect函数，传入两个点的坐标（左上角和右下角）和画笔。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawRect(mC1X1, mC1Y1, mC1X2, mC1Y2, mChildPaint);</div></pre></td></tr></table></figure>
<p>3.这一步也不算很难。继续绘制，发现背景需要绘制一张图片，这个时候需要在调用这个View的地方传递一张Bitmap过来。于是有了这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置图片</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"bitmap can't null"</span>);</div><div class="line">    &#125;</div><div class="line">    mParentBg = bitmap;</div><div class="line">    invalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>invalidate()进行重新绘制，调用之后，流程进行onDraw()，调用绘制bitmap的函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指定图片绘制区域</span></div><div class="line">Rect src = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, mParentBg.getWidth(), mParentBg.getHeight());</div><div class="line"><span class="comment">// 指定图片在屏幕上显示的区域</span></div><div class="line">Rect dst = <span class="keyword">new</span> Rect(mPX1, mPY1, mPX2, mPY2);</div><div class="line">canvas.drawBitmap(mParentBg, src, dst, <span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<ul>
<li>先简单说明一下，mParentBg即为Bitmap对象，先获取要绘制的背景图片的大小，这里当然是把整个背景图绘制进行，然后显示的位置，即为矩形的位置，依然是左上角和右下角。我们不需要给图片着色，所以paint传null即可。</li>
</ul>
<ol>
<li>完成这几部之后，觉得很不错，大功告成，这篇文章到此为止了。问题来了，本想中间的选择矩形绘制为透明的，长矩形即父控件矩形绘制一个半透明的。但是发现，根本没有作用，绘制透明的就好像没有绘制一样。</li>
<li>于是，又开始认真思考。中间选择部分是透明的，也就是相当于没有绘制。那么就把父控件分为两个变化的子控件矩形，根据中间选择区域的变化，调整上下两个子控件矩形的大小。</li>
</ol>
<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>1.初始化。根据上面的分析之后，开始编码。首先是要定义一些初始化的东西，于是在构造函数中调用init：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"></div><div class="line">    mContext = context;</div><div class="line"></div><div class="line">    mChildPaint = <span class="keyword">new</span> Paint();</div><div class="line">    mChildPaint.setColor(context.getResources().getColor(R.color.colorT));</div><div class="line">    mChildPaint.setStyle(Paint.Style.FILL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义了绘制两个子控件的画笔，设置了抗锯齿和半透明带黑色蒙层的颜色</li>
</ul>
<p>2.大小确定。根据流程肯定是测量出自定义View的大小：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    mParentHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    mScreenWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    <span class="comment">//父控件宽度 16:9的宽</span></div><div class="line">    mParentWidth = mParentHeight * <span class="number">9</span> / <span class="number">16f</span>;</div><div class="line">    <span class="comment">//选中区域高度</span></div><div class="line">    mChildHeight = mParentWidth * <span class="number">9</span> / <span class="number">16f</span>;</div><div class="line">    initCalc();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们首先获取到了view的宽高，然后去进行父控件的宽高和子控件的宽高<ul>
<li>首先来说，父控件的高度肯定就是整个view的高度，而宽度的话，因为要求是16:9，所以根据高度计算出宽度</li>
<li>有了父控件的宽度，也便有了中间选择矩形的宽度，也是要求16:9,所以根据比例计算出来高度大小</li>
</ul>
</li>
<li>获取到一些宽高之后，便马上进行对坐标点的计算。首先来看一张图</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/dragView1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>这是我优化之前的一张草图。首先来说，绘制矩形只需要知道左上角和右下角的坐标。<ul>
<li>如图，第一个状态，是子控件1是0，也就是左上角即为父控件的左上角，右下角即为父控件的左上角，而这个状态中，子控件2呈现最大的状态，左上角的仅仅为父控件的减去一个选择区域的大小，右下角即为父控件的右下角。</li>
<li>中间的状态进行变化，子控件1的左上角和子控件2的右下角始终和父控件一样，不进行变化。而这里只有上下滑动，所以，变化的仅仅为Y轴上面。根据Android的坐标系来说，Y轴向下为正方向。也就是子控件1的右下角的Y坐标和子控件2的左上角的Y坐标进行加减手指滑动的距离，然后进行重绘，即可达到绘制效果。</li>
<li>第三个状态便是当滑到最底部的时候，原理和第一个状态类似，子控件1达到最大，左下角的坐标仅仅减去选择区域的高度；子控件2为0，左上角为父控件的左下角，右下角为父控件的右下角。</li>
</ul>
</li>
<li>搞清楚这些之后，开始计算初始化的坐标点：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 坐标点的计算</div><div class="line">     * X轴基本不变，变化的是Y轴</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCalc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//计算父控件的位置点</span></div><div class="line">        mPX1 = (<span class="keyword">int</span>) (mScreenWidth / <span class="number">2f</span> - mParentWidth / <span class="number">2f</span>);</div><div class="line">        mPY1 = <span class="number">0</span>;</div><div class="line">        mPX2 = (<span class="keyword">int</span>) (mScreenWidth / <span class="number">2f</span> + mParentWidth / <span class="number">2f</span>);</div><div class="line">        mPY2 = (<span class="keyword">int</span>) (mParentHeight);</div><div class="line"></div><div class="line">        <span class="comment">//刚开始子控件1的位置点</span></div><div class="line">        mC1X1 = mPX1;</div><div class="line">        mC1Y1 = mPY1;</div><div class="line">        mC1X2 = mPX2;</div><div class="line">        mC1Y2 = mPY1;</div><div class="line"></div><div class="line">        <span class="comment">//刚开始子控件2的位置点</span></div><div class="line">        mC2X1 = mPX1;</div><div class="line">        mC2Y1 = (<span class="keyword">int</span>) (mChildHeight);</div><div class="line">        mC2X2 = mPX2;</div><div class="line">        mC2Y2 = mPY2;</div><div class="line">    &#125;</div><div class="line">``` </div><div class="line"></div><div class="line"></div><div class="line">- 值得注意的是，我们需要把控件摆放到屏幕中间，所以，左上角的X便是屏幕宽度除以<span class="number">2</span>减去计算出来的父控件宽度除以<span class="number">2</span>。右下角同理是加上父控件宽度除以<span class="number">2</span>。</div><div class="line"></div><div class="line"><span class="number">3</span>.位置确定。坐标计算完毕，进行设置view的大小：</div><div class="line"></div><div class="line">``` <span class="function">Java</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> &#123;</div><div class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        setMeasuredDimension((<span class="keyword">int</span>) mParentWidth, (<span class="keyword">int</span>) mParentHeight);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里调用setMeasuredDimension（）将我们计算好的宽高设置上去</li>
</ul>
<p>5.绘制。因为我们这边已经通过坐标来进行了位置的确定，所以直接调用onDraw()进行绘制：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    <span class="comment">//绘制父控件</span></div><div class="line"></div><div class="line">    <span class="comment">// 指定图片绘制区域</span></div><div class="line">    Rect src = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, mParentBg.getWidth(), mParentBg.getHeight());</div><div class="line">    <span class="comment">// 指定图片在屏幕上显示的区域</span></div><div class="line">    Rect dst = <span class="keyword">new</span> Rect(mPX1, mPY1, mPX2, mPY2);</div><div class="line">    canvas.drawBitmap(mParentBg, src, dst, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="comment">//绘制子控件1</span></div><div class="line">    canvas.drawRect(mC1X1, mC1Y1, mC1X2, mC1Y2, mChildPaint);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//绘制子控件2</span></div><div class="line">    canvas.drawRect(mC2X1, mC2Y1, mC2X2, mC2Y2, mChildPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里的基本都在分析的时候已经进行了说明，没有太多要说的地方。mParentBg即为传入Bitmap对象。</li>
</ul>
<p>6.划动事件。要进行划动了，心里开始莫名的紧张，这部分是最不好进行控制。还是先看图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/dragView2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<ul>
<li>MotionEvent.ACTION_DOWN:<ul>
<li>首先我们肯定是有一个拖拽范围的。因为我们只能拖选择框的地方才能有效。所以，图上右边紫色我写了可选中范围。<ul>
<li>在X轴上面，没的说，很好办，就在父控件的宽度内。</li>
<li>但是在Y轴上面的话，需要动态根据选择框的位置进行变化了。</li>
<li>一开始，我进行判断划动的时候，写死了区域。不在这个区域直接不进行划动监听。这样也是可以做到，但是效果并不好。第一点，当手指从不可选中区域划入到可选中的时候，这样会响应事件，表现出来的便是选择区域突然跳到手指最开始落下的地方(从上往下划动)；第二点，从可选中区域划动到不可选中区域，这样不会响应时间，效果表现出来好像划不动一样。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//手指按下</span></div><div class="line"><span class="comment">//记录按下的距离</span></div><div class="line"><span class="keyword">float</span> beginY = event.getY();</div><div class="line"><span class="keyword">if</span> (beginY &lt; mC1Y2) &#123;</div><div class="line">    <span class="comment">//起始点在选择框上部，不做反应</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (beginY &gt; mC1Y2 + mChildHeight) &#123;</div><div class="line">    <span class="comment">//起始点在选择框下部，不做反应</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>- 我们记录手指按下的Y坐标，进行判断，如果小于了子控件1的右下角Y坐标，说明按下的时候在选择框的上面，那么不做反应，针对上述第一点。如果按下距离在子控件2的右下角加上一个可选取与的高度，那么说明按下的点再选择框的下部，那已经超出了可选范围，也不做反应。
</code></pre><ul>
<li>说完了可拖拽区域，现在来看一下划动的距离变化。其实这部分在分析的时候也说了，主要是就是加减手指移动的距离便可。<ul>
<li>要计算距离，这里需要减去一个按下的距离和可选区域的上边框的差值，否则，选择框会跳一下，然后以上边框为基准线进行改变，这显然不是我们想要的结果：</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//记录按下的位置和选择区域的上边距的差</span></div><div class="line">mDistanceY = beginY - mC1Y2;</div></pre></td></tr></table></figure>
<ul>
<li>MotionEvent.ACTION_MOVE:<ul>
<li>我们手指移动的距离为event.getY() - beginY。而我们实际要计算的是画在图中右边一点的实际移动的改变值，便是event.getY() - mDistanceY。event.getY()是指距离父控件的上边距，减去之前算好的mDistanceY，便可以比较精确得出实际移动的距离。可能还是会有疑问，为什么这样计算出来的距离会多一部分手指按下的距离和可选区域上边距的距离。因为我们这边是改变的子控件1和2的大小，子控件1是以右下角的Y，也可以理解为可选区域上边这根线绘制。如果不算手指和可选区域上边距的距离，那么效果就是划动起来，可选区域就会跳一下，然后以可选区域上边这根线在划动，而手指按下的时候明明和上边是有一定距离的。这部分可以尝试去掉进行感受。（感觉文字功底不好，有点扯不清，逃~）简单来说，反正就是要记录下手指按下距离可选区域上边的距离，在移动完之后，手指还是要距离可选区域同样的距离。嗯，就是这样，喵。</li>
<li>这样就完工了。等等，不急。我们的可选区域肯定是不能划出父控件哒。也就是说可选区域上面不能划出父控件的上面，下面也不能划出父控件的下面的。<ul>
<li>往上划动。需要判断下子控件1右下角的Y不能小于0，即不能小于了父控件的Y，超过了则保持状态一。</li>
<li>往下划动。需要判断下子控件1右下角的Y不能大于父控件高度减去一个可选区域的高度，超过了则保持状态三。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//往上滑动</span></div><div class="line"><span class="keyword">if</span> (mC1Y2 &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">//防止顶部超过出</span></div><div class="line">    <span class="comment">//子控件1为0</span></div><div class="line">    mC1Y2 = <span class="number">0</span>;</div><div class="line">    <span class="comment">//子控件2为最大</span></div><div class="line">    mC2Y1 = (<span class="keyword">int</span>) (mSelectHeight);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mC1Y2 &gt; mParentHeight - mSelectHeight) &#123;</div><div class="line">    <span class="comment">//防止底部超过</span></div><div class="line">    <span class="comment">//子控件1为最大</span></div><div class="line">    mC1Y2 = (<span class="keyword">int</span>) (mParentHeight - mSelectHeight);</div><div class="line">    <span class="comment">//子控件2为0</span></div><div class="line">    mC2Y1 = (<span class="keyword">int</span>) (mParentHeight);</div></pre></td></tr></table></figure>
<ul>
<li>最后执行一下重绘。invalidate()<ul>
<li>最后来一个完整的onTouchEvent()的代码，其实上诉已经说完了</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="comment">//有效触控范围(X轴，Y轴另外判断)</span></div><div class="line">    <span class="keyword">if</span> (mC1X1 &lt;= event.getRawX() &amp;&amp; event.getRawX() &lt;= mC1X1 + mParentWidth) &#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                <span class="comment">//手指按下</span></div><div class="line">                <span class="comment">//记录按下的距离</span></div><div class="line">                <span class="keyword">float</span> beginY = event.getY();</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (beginY &lt; mC1Y2) &#123;</div><div class="line">                    <span class="comment">//起始点在选择框上部，不做反应</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beginY &gt; mC1Y2 + mSelectHeight) &#123;</div><div class="line">                    <span class="comment">//起始点在选择框下部，不做反应</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">//记录按下的位置和选择区域的上边距的差</span></div><div class="line">                mDistanceY = beginY - mC1Y2;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line"></div><div class="line">                <span class="comment">//mC1Y1和mC2Y2始终不变</span></div><div class="line">                <span class="comment">//更改子控件坐标</span></div><div class="line">                mC1Y2 = (<span class="keyword">int</span>) (event.getY() - mDistanceY);</div><div class="line"></div><div class="line">                mC2Y1 = (<span class="keyword">int</span>) (event.getY() - mDistanceY + mSelectHeight);</div><div class="line"></div><div class="line">                <span class="comment">//往上滑动</span></div><div class="line">                <span class="keyword">if</span> (mC1Y2 &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">//防止顶部超过出</span></div><div class="line"></div><div class="line">                    <span class="comment">//子控件1为0</span></div><div class="line">                    mC1Y2 = <span class="number">0</span>;</div><div class="line"></div><div class="line">                    <span class="comment">//子控件2为最大</span></div><div class="line">                    mC2Y1 = (<span class="keyword">int</span>) (mSelectHeight);</div><div class="line"></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mC1Y2 &gt; mParentHeight - mSelectHeight) &#123;</div><div class="line">                    <span class="comment">//防止底部超过</span></div><div class="line"></div><div class="line">                    <span class="comment">//子控件1为最大</span></div><div class="line">                    mC1Y2 = (<span class="keyword">int</span>) (mParentHeight - mSelectHeight);</div><div class="line">                    <span class="comment">//子控件2为0</span></div><div class="line">                    mC2Y1 = (<span class="keyword">int</span>) (mParentHeight);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//重新绘制</span></div><div class="line">                invalidate();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                <span class="comment">//手指抬起</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                <span class="comment">//事件取消</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>7.后续处理。后续处理的话，和项目不一样就不一样的，我们项目是把可选区域的坐标绝对值给后台，后台截取。demo里面是利用Android的截图，然后传去可选区域的坐标截取出来，但是这样分辨率肯定比较低，不太适合做封面。然后就是截取的话，需要注意下有个状态栏高度。（这里有个小坑的地方，就是Android截图系统只有能一张，需要重新加载才能获取新的截图，因为项目没有用到这个，所以没有深入研究，如果有知道的，麻烦赐教，感谢）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">    View screenView = activity.getWindow().getDecorView();</div><div class="line">    screenView.setDrawingCacheEnabled(<span class="keyword">true</span>);</div><div class="line">    screenView.buildDrawingCache();</div><div class="line"></div><div class="line">    <span class="comment">//获取屏幕整张图</span></div><div class="line">    Bitmap bitmap = screenView.getDrawingCache();</div><div class="line">    <span class="comment">//截图指定部分</span></div><div class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">        bitmap = Bitmap.createBitmap(bitmap, mC1X1, mC1Y2 + getStatusBarHeight(),</div><div class="line">                (<span class="keyword">int</span>) mParentWidth, (<span class="keyword">int</span>) mSelectHeight);</div><div class="line">    &#125;</div><div class="line">    invalidate();</div><div class="line">    <span class="keyword">return</span> bitmap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取状态栏高度</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> resourceId = mContext.getResources().getIdentifier(<span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</div><div class="line">    <span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</div><div class="line">        result = mContext.getResources().getDimensionPixelSize(resourceId);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ol>
<li>demo已经放到了github：<a href="https://github.com/sorgs/DragView" title="https://github.com/sorgs/DragView" target="_blank" rel="external">https://github.com/sorgs/DragView</a>上面了，如果能帮到您的话，还麻烦动动小指头给个小星星，万分感谢了！</li>
<li>本人才疏学浅，仅仅是一个还差一个多月才毕业的应届生，写的比较简单，请大家见谅。如果有什么纰漏和不对的地方，感谢指出。</li>
<li>对自定义View安利一个学习的地方：<a href="http://www.gcssloop.com/customview/CustomViewIndex/" title="http://www.gcssloop.com/customview/CustomViewIndex/" target="_blank" rel="external">http://www.gcssloop.com/customview/CustomViewIndex/</a>，GcsSloop大佬的系列，很受教！</li>
<li>最后就是我最想说的。其实很多东西看起来很复杂，但是慢慢静下心去做还是可以做出来的。虽然这个很简单，但是我们老大说让我研究下的时候，我也是一脸懵逼啊。心里想，这，我怎么能做得出来。反正研究嘛，做不出来还有老大撑腰。就是就一步一步来尝试，先让动起来，然后再慢慢靠近需求，最后优化。最终发现还是弄出来了。写这篇博客的主要目的就是给自己和大家说这个道理，不畏惧，一步步来！</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;*本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;很
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="自定义View" scheme="http://sorgs.cn/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
      <category term="969" scheme="http://sorgs.cn/tags/969/"/>
    
      <category term="滑动事件" scheme="http://sorgs.cn/tags/%E6%BB%91%E5%8A%A8%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想读书笔记-2</title>
    <link href="http://sorgs.cn/post/45310/"/>
    <id>http://sorgs.cn/post/45310/</id>
    <published>2018-01-26T06:39:16.000Z</published>
    <updated>2019-08-15T01:29:03.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>第一章对象导论(1.7-1.13)</p>
</blockquote>
<h1 id="1-7伴随多态的可互换对象"><a href="#1-7伴随多态的可互换对象" class="headerlink" title="1.7伴随多态的可互换对象"></a>1.7伴随多态的可互换对象</h1><ul>
<li>在处理类型的层次结构时，经常想把一个对象不当做它所属的特定类型来对待，而是将其当做其基类的对象来对待。</li>
<li>这样的代码是不会受添加新类型的影响，而且添加新类型是扩展一个面向对象程序以便处理新情况的最常用方式。</li>
<li>在java中，动态绑定是默认行为，不需要添加额外的关键字来实现多态。</li>
</ul>
<h1 id="1-8单根继承结构"><a href="#1-8单根继承结构" class="headerlink" title="1.8单根继承结构"></a>1.8单根继承结构</h1><ul>
<li>在单根继承结构中的所有对象都具有一个共用接口，所以他们归根结底到底都是相同的基本类型。</li>
<li>单根接口保证所有对象都具备某些功能。</li>
<li>对象都可以很容易地在堆上创建。</li>
</ul>
<h1 id="1-9容器"><a href="#1-9容器" class="headerlink" title="1.9容器"></a>1.9容器</h1><ul>
<li>不同容器提供了不同类型的接口和外部行为。</li>
<li>不同的容器对于某些操作具有不同的效率。</li>
<li>除非确切知道所要处理的对象的类型，否则向下转型几乎是不安全的。</li>
</ul>
<h1 id="1-10对象的创建和生命期"><a href="#1-10对象的创建和生命期" class="headerlink" title="1.10对象的创建和生命期"></a>1.10对象的创建和生命期</h1><ul>
<li>将对象置于堆栈（它们有时候被称为自动变量或限域变量）或静态存储区内来实现。这种方式将存储空间分配和释放置于优先考虑的位置，某些情况下这样控制非常有价值。但是也牺牲了灵活性。</li>
<li>第二种方式是在被称为堆的内存池中动态地创建对象。这种方式中，知道运行时才知道需要多少对象，它们生命周期如何，以及它们的具体类型是什么。</li>
<li>java完全采用了动态内存分配方式，每当想要创建新对象时，就要使用new关键字来构建此对象的动态实例。</li>
</ul>
<h1 id="1-11异常处理：处理错误"><a href="#1-11异常处理：处理错误" class="headerlink" title="1.11异常处理：处理错误"></a>1.11异常处理：处理错误</h1><ul>
<li>异常处理将错误处理直接置于编程语言中，有时甚至置于操作系统中。异常是一种对象，它从出错地点被“抛出”，并被专门设计用来处理特定类型错误的相应的异常处理器“捕获”。</li>
<li>异常提供了一种从错误状态进行可靠恢复的途径。</li>
<li>异常处理不是面向对象的特征。异常处理在面向对象语言之前就已经存在了。</li>
</ul>
<h1 id="1-12并发编程"><a href="#1-12并发编程" class="headerlink" title="1.12并发编程"></a>1.12并发编程</h1><ul>
<li>在程序中，这些彼此独立运行的部分称之为线程，上述概念被称为“并发”。</li>
<li>通常，线程只是一种为单一处理器分配执行时间的手段。</li>
</ul>
<h1 id="1-13Java与Internet"><a href="#1-13Java与Internet" class="headerlink" title="1.13Java与Internet"></a>1.13Java与Internet</h1><ul>
<li>它解决了万维网上的程序设计问题。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一章对象导论(1.7-1.13)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-7伴随多态的可互换对象&quot;&gt;&lt;a href=&quot;#1-7伴随多态的可互换对象&quot; class=&quot;headerlink&quot; title=&quot;1.7伴随多态的可互换对象&quot;
    
    </summary>
    
      <category term="java" scheme="http://sorgs.cn/categories/java/"/>
    
    
      <category term="JAVA学习" scheme="http://sorgs.cn/tags/JAVA%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JAVA编程思想读书笔记_1</title>
    <link href="http://sorgs.cn/post/4506/"/>
    <id>http://sorgs.cn/post/4506/</id>
    <published>2018-01-25T07:08:25.000Z</published>
    <updated>2019-08-15T01:29:03.854Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>第一章对象导论(1.1-1.6)</p>
</blockquote>
<h1 id="1-1抽象过程"><a href="#1-1抽象过程" class="headerlink" title="1.1抽象过程"></a>1.1抽象过程</h1><ul>
<li>程序员必须建立起在机器模型（位于“解空间”内，这是你对问题建模的地方，例如计算机）和实际待解决问题的模型（位于“解空间”内，这是问题存在的地方，例如一项物业）之前的关联。</li>
<li>面向对象五个基本特征：<ul>
<li>万物皆对象</li>
<li>程序是对象的集合，它们通过发消息来告知彼此所要做的。</li>
<li>每个对象都有自己的由其他对象所构成的存储。</li>
<li>每个对象都拥有其类型。</li>
<li>某一特定的内类型的所有对象都可以接受同样的消息。 </li>
</ul>
</li>
<li>更加简洁的描述：对象具有状态、行为和标识。这意味着每一个对象都可以拥有内部数据（它们给出了该对象的状态）和方法（它们产生行为），并且每一个对象都可以唯一地与其他对象区分开来，具体来说，就是每一个对象在内存中都有一个唯一的地址。</li>
</ul>
<h1 id="1-2每个对象都有一个接口"><a href="#1-2每个对象都有一个接口" class="headerlink" title="1.2每个对象都有一个接口"></a>1.2每个对象都有一个接口</h1><ul>
<li>具有相同的特征和行为的对象所归属的类的一部分。</li>
<li>在程序执行期间具有相同特征（数据元素）和行为（功能）的对象集合，所以一个类实际上就是一个数据类型。</li>
<li>面向对象程序设计的挑战之一，就是在问题空间的元素和解空间的对象之间创建一对一的映射。</li>
<li>每个对象都只能满足某些请求，这些请求由对象的接口（interface）所定义，决定接口的便是类型。</li>
<li>为了向对象发送消息，需要声明对象的名称，并以圆点连接一个消息请求。</li>
</ul>
<h1 id="1-3每个对象都提供服务"><a href="#1-3每个对象都提供服务" class="headerlink" title="1.3每个对象都提供服务"></a>1.3每个对象都提供服务</h1><ul>
<li>高内聚是软件设计的基本质量要求之一，这意味着一个软件构建（例如一个对象，当然它也有可能是指一个方法或一个对象库）的各个方面“组合”得很好。</li>
</ul>
<h1 id="1-4被隐藏的具体实现"><a href="#1-4被隐藏的具体实现" class="headerlink" title="1.4被隐藏的具体实现"></a>1.4被隐藏的具体实现</h1><ul>
<li>访问控制的第一个存在原因就是让客户端程序员无法触及他们也不应该触及的部分——这些部分对数据类型的内部操作来说是必需的，但并不是用户解决特定问题所需要的接口的一部分。</li>
<li>访问控制的第二个存在原因就是允许库设计者可以改变类内部的工作方式不用担心会影响到客户端程序员。</li>
<li>Java用三个关键字在类的内部设定边界：public、private、protected。</li>
<li>还有一种默认访问权限，通常称为包访问权限，类可以访问在同一个包（库构件）中的其它类的成员，但是在包之外，这些成员如同指定了private一样。</li>
</ul>
<h1 id="1-5复用具体实现"><a href="#1-5复用具体实现" class="headerlink" title="1.5复用具体实现"></a>1.5复用具体实现</h1><ul>
<li>复用是面向对象程序设计所提供的最了不起的优点之一。</li>
</ul>
<h1 id="1-6-继承"><a href="#1-6-继承" class="headerlink" title="1.6 继承"></a>1.6 继承</h1><ul>
<li>一个基类包含其所有导出类型所共享的特性和行为。可以创建一个基类来表示系统中某些对象的核心概念，从基类类型中导出其他类型，来表示此核心可以被实现的各种不同方式。</li>
<li>导出类与基类具有相同的类型。</li>
<li>想要覆盖某个方法，可以直接在导出类中创建该方法的新定义即可。</li>
<li>判断是否继承，就是要确定是否可以用is-a来描述来描述类之间的关系，并使之具有实际意义。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第一章对象导论(1.1-1.6)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-1抽象过程&quot;&gt;&lt;a href=&quot;#1-1抽象过程&quot; class=&quot;headerlink&quot; title=&quot;1.1抽象过程&quot;&gt;&lt;/a&gt;1.1抽象过程&lt;/h1&gt;&lt;u
    
    </summary>
    
      <category term="java" scheme="http://sorgs.cn/categories/java/"/>
    
    
      <category term="JAVA学习" scheme="http://sorgs.cn/tags/JAVA%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Android动态图片选择的一种简单实现方式</title>
    <link href="http://sorgs.cn/post/3403/"/>
    <id>http://sorgs.cn/post/3403/</id>
    <published>2018-01-20T12:20:08.000Z</published>
    <updated>2019-08-15T01:29:03.842Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很久没有更新博客了，以后还是决定每个月来更新一遍。本次到来的是一个常用的场景，比如我们在发朋友圈的时候，我们可以选择多张照片，也可以删除之前选择的，但是最多一般会有个上限，达到上限之后一般添加的就消失了。这里给出一个简单的实现思路。</p>
</blockquote>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><ul>
<li>我们还是先看看效果图<ul>
<li>首先是没有图片的时候</li>
</ul>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Android%E5%8A%A8%E6%80%81%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%20%280%29.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure> 
<ul>
<li>然后我们选择两张图片</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Android%E5%8A%A8%E6%80%81%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%20%282%29.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>选可以点图片右上交的×删除一张</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Android%E5%8A%A8%E6%80%81%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%20%281%29.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>最后是选择6张，继续添加标志消失（我这里上限是6张，后面读者可以更新代码自己设置上限）</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Android%E5%8A%A8%E6%80%81%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%20%283%29.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ul>
<li>这里简单的提供一种实现方式</li>
<li>我这里是利用RecyclerView来实现，接下来具体看下<ul>
<li>首先是主布局文件，其实就是一个RecyclerView</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/rl_repair"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line">``` </div><div class="line"></div><div class="line"></div><div class="line">  - 然后主要逻辑代码在adapter，我们先看看adapter的布局</div><div class="line"> </div><div class="line"></div><div class="line">``` xml</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">    <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_add"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/bg_scan"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_photo"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_remove"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_delete"</span></div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"visible"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这部分代码没有什么要说的，主要是用RelativeLayout里面包裹3个ImageView，一个用图片右上角显示的删除，一个是添加新图片，还有一个是用来展示选择的图片</li>
<li>接下来是adapter的逻辑部分代码了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mList.size() &gt;= MAX_SIZE) &#123;</div><div class="line">        <span class="comment">//最多6张</span></div><div class="line">        holder.ivAdd.setVisibility(View.GONE);</div><div class="line">        holder.ivRemove.setVisibility(View.GONE);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        holder.ivPhoto.setVisibility(View.VISIBLE);</div><div class="line">        holder.ivPhoto.setVisibility(View.VISIBLE);</div><div class="line">        holder.ivRemove.setVisibility(View.VISIBLE);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (getItemViewType(position) == TYPE_ADD) &#123;</div><div class="line">        holder.ivRemove.setVisibility(View.GONE);</div><div class="line">        holder.ivPhoto.setVisibility(View.GONE);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        holder.ivRemove.setVisibility(View.VISIBLE);</div><div class="line">        holder.ivAdd.setVisibility(View.GONE);</div><div class="line">        holder.ivPhoto.setVisibility(View.VISIBLE);</div><div class="line">        holder.ivPhoto.setImageBitmap(BitmapFactory.decodeFile(mList.get(position)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不难看出，这里利用setVisibility来进行操作，更具数据来显示那些或者隐藏哪些。当我们的数目大于等于6的时候，我们就需要删除和添加隐藏起来。</li>
<li>别忘了，我们一开始就需要有添加的图片，所以我们的size应该是</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mList.size() + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>数目应该要多加一个，然后应该注意到了我们的getItemViewType()方法了，这里我们进入看下</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (position == getItemCount() - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> TYPE_ADD;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> TYPE_PIC;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>没错，这里就是用来区别是那种类型的方法，我们这里有两个类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_ADD = <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_PIC = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<ul>
<li>然后我们根据传入的postion来区分，如果position==我们的总数-1，那就说明我们这里显示添加图片，否则就显示展示的图片。为什么要减一个的原因就是最后总是要显示添加，除非达到了上限。然后回到我们的onBindViewHolder()代码中，就很简单了，当需要展示添加的时候，就把展示图片和删除的GONE，当需要展示图片的时候，就需要把添加隐藏，其余的展示出来</li>
<li>然后我们还需要监听点击事件，用来增加或者是删除</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OnItemClickListener itemClickListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 继续添加图片接口</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemAddClick</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除已经添加的图片接口</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> position 删除的position</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onItemRemoveClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>写一个点击事件的接口，两个方法，一个是添加，一个删除</li>
<li>然后注册监听</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</div><div class="line">        context = parent.getContext();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">final</span> ViewHolder viewHolder = <span class="keyword">new</span> ViewHolder(LayoutInflater.from(context).inflate(R.layout.item_photo, parent, <span class="keyword">false</span>));</div><div class="line"></div><div class="line">    viewHolder.ivAdd.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            itemClickListener.onItemAddClick();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    viewHolder.ivRemove.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            itemClickListener.onItemRemoveClick(viewHolder.getAdapterPosition());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> viewHolder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在构造函数当中把接口进行注册</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TakePhotoAdapter</span><span class="params">(List&lt;String&gt; mList, OnItemClickListener itemClickListener)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mList = mList;</div><div class="line">    <span class="keyword">this</span>.itemClickListener = itemClickListener;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后就是我们的页面的逻辑代码，先把adapter的接口引入implementsTakePhotoAdapter.OnItemClickListener</li>
<li>然后就是两个接口中的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemAddClick</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//添加照片</span></div><div class="line">    mTakePhoto = getTakePhoto();</div><div class="line">    mTakePhoto.onPickFromCapture(configCompress());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemRemoveClick</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="comment">//删除照片</span></div><div class="line">    mPhotoList.remove(position);</div><div class="line">    mTakePhotoAdapter.notifyDataSetChanged();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看到每次对图片操作了，我们需要进行刷新。这里图片的添加可以不是我们的重点，大家可以去用第三方库，我这里使用的是TakePhoto这个库。</li>
<li>然后我们这边对RecyclerView进行注册就OK了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rlRepair.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>, <span class="number">3</span>));</div><div class="line">mTakePhotoAdapter = <span class="keyword">new</span> TakePhotoAdapter(mPhotoList, <span class="keyword">this</span>);</div><div class="line">rlRepair.setAdapter(mTakePhotoAdapter);</div></pre></td></tr></table></figure>
<ul>
<li>这里用的是GridLayoutManager，并设置每行3个，读者可以更具情况自己设置</li>
<li>差不多就是这么多内容了，很简单的东西。如果有不对或者更好的方式，欢迎指教</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很久没有更新博客了，以后还是决定每个月来更新一遍。本次到来的是一个常用的场景，比如我们在发朋友圈的时候，我们可以选择多张照片，也可以删除之前选择的，但是最多一般会有个上限，达到上限之后一般添加的就消失了。这里给出一个简单的实现思路。&lt;/p&gt;
&lt;/b
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="动态选择图片" scheme="http://sorgs.cn/tags/%E5%8A%A8%E6%80%81%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87/"/>
    
      <category term="朋友圈" scheme="http://sorgs.cn/tags/%E6%9C%8B%E5%8F%8B%E5%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>关于MediaRecorder中的setAudioEncoder和setOutputFormat</title>
    <link href="http://sorgs.cn/post/20591/"/>
    <id>http://sorgs.cn/post/20591/</id>
    <published>2017-11-18T13:44:12.000Z</published>
    <updated>2019-08-15T01:29:03.859Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很久没有更新博客了，最近实习一直挺忙的。最近做的项目有关使用了录音类<a href="https://developer.android.com/reference/android/media/MediaRecorder.html" target="_blank" rel="external">MediaRecorder</a>。其中有个setAudioEncoder设置编解码器和setOutputFormat和输出格式。不太明白这之间有什么约束，但是总觉得不可能是随便设置的但是Google怎么都搜不到这方面相关的，于是去稍微了解了下编码解码器的区别以及它的输出容器。这里自己记录下，也方便大家有个了解。</p>
</blockquote>
<h1 id="MediaRecorder-OutputFormat先看看包含的格式-总计8个"><a href="#MediaRecorder-OutputFormat先看看包含的格式-总计8个" class="headerlink" title="MediaRecorder.OutputFormat先看看包含的格式(总计8个)"></a><a href="https://developer.android.com/reference/android/media/MediaRecorder.OutputFormat.html" target="_blank" rel="external">MediaRecorder.OutputFormat</a>先看看包含的格式(总计8个)</h1><ul>
<li>AAC_ADTS<ul>
<li>.aac </li>
</ul>
</li>
<li>AMR_NB<ul>
<li>.3gp </li>
</ul>
</li>
<li>AMR_WB<ul>
<li>.3gp </li>
</ul>
</li>
<li>DEFAULT</li>
<li>MPEG_2_TS<ul>
<li>.ts</li>
</ul>
</li>
<li>MPEG_4<ul>
<li>.mp4</li>
<li>.m4a </li>
</ul>
</li>
<li>RAW_AMR（此常数在API级别16中已被弃用）<ul>
<li>.3gp</li>
</ul>
</li>
<li>THREE_GPP<ul>
<li>.3gp</li>
</ul>
</li>
<li>WEBM<ul>
<li>.ogg</li>
<li>mkv <h1 id="MediaRecorder-AudioEncoder先看看包含的编解码器（总计7个）"><a href="#MediaRecorder-AudioEncoder先看看包含的编解码器（总计7个）" class="headerlink" title="MediaRecorder.AudioEncoder先看看包含的编解码器（总计7个）"></a><a href="https://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html" target="_blank" rel="external">MediaRecorder.AudioEncoder</a>先看看包含的编解码器（总计7个）</h1><ul>
<li>AAC（AAC低复杂度（AAC-LC）音频编解码器）</li>
<li>AAC_ELD（增强型低延迟AAC（AAC-ELD）音频编解码器）</li>
<li>AMR_NB（AMR（窄带）音频编解码器）</li>
<li>AMR_WB（AMR（宽带）音频编解码器）</li>
<li>DEFAULT</li>
<li>HE_AAC（高效率AAC（HE-AAC）音频编解码器）</li>
<li>VORBIS（Ogg Vorbis音频编解码器）<h1 id="这就介绍完了，到这里我们可以关闭网页了。放下砖，让我慢慢说，我们稍微深入的去看看这些编解码的东西"><a href="#这就介绍完了，到这里我们可以关闭网页了。放下砖，让我慢慢说，我们稍微深入的去看看这些编解码的东西" class="headerlink" title="这就介绍完了，到这里我们可以关闭网页了。放下砖，让我慢慢说，我们稍微深入的去看看这些编解码的东西"></a>这就介绍完了，到这里我们可以关闭网页了。放下砖，让我慢慢说，我们稍微深入的去看看这些编解码的东西</h1></li>
<li>AAC</li>
<li>采用了全新的算法进行编码，更加高效，具有更高的“性价比”。</li>
<li>优点：相对于mp3，AAC格式的音质更佳，文件更小。</li>
<li>缺点：AAC属于有损压缩的格式。</li>
</ul>
</li>
</ul>
</li>
<li>其设计目标是替代原有MP3编码标准，在与MP3在相似的码率下希望质量优于MP3。这一目标已达到并且由ISO和IEC标准组织标准化在MPEG-2和MPEG-4中。</li>
<li>支持的文件类型/容器格式<ul>
<li>•3GPP<ul>
<li>.3gp</li>
</ul>
</li>
<li>•MPEG-4<ul>
<li>.mp4</li>
<li>.m4a</li>
</ul>
</li>
<li>•ADTS原始AAC<ul>
<li>.aac（在Android 3.1+中解码，在Android 4.0+中编码，不支持ADIF）</li>
<li>ADTS（Audio Data Transport Stream）：这种格式的特征是它有一个同步的字的比特流，解码器可以在这个流中任何开始位置开始。 </li>
<li>DAIF：模拟数据交换模式</li>
</ul>
</li>
<li>•MPEG-TS<ul>
<li>.ts （not seekable，Android 3.0+）</li>
</ul>
</li>
</ul>
</li>
<li>然后还有大致3个版本<ul>
<li>AAC_LC<ul>
<li>AAC低复杂度（AAC_LC）音频编解码器</li>
<li>设计用于数字电视，AAC_LC用于存储空间和计算能力有限的情况。</li>
<li>AAC-LC是充分利用心理声学原理，对人类对音频信号的感知存在不相干性和统计冗余的特性，最大程度的减少用于表达信号的比特数据，实现音频信号快速有效地压缩，而不再追求输出信号和原始信号相似度。</li>
<li><a href="https://www.zhihu.com/question/20629995" target="_blank" rel="external">重要技术点</a></li>
<li>支持从8到48 kHz的标准采样率的单声道/立体声/ 5.0 / 5.1内容。</li>
</ul>
</li>
<li>HE_AAC<ul>
<li>高效率AAC（HE-AAC）音频编解码器</li>
<li>分为两个版本<ul>
<li>HE_AACV1（编码器 Android4.1+）<ul>
<li>支持从8到48 kHz的标准采样率的单声道/立体声/ 5.0 / 5.1内容。</li>
</ul>
</li>
<li>HE_AACV2（增强的AAC+）<ul>
<li>支持从8到48 kHz的标准采样率的立体声/ 5.0 / 5.1内容。</li>
</ul>
</li>
<li>对比与AAC_LC<ul>
<li>同等音频，音频文件体积（低码率下比较明显）：AAC_LC &gt; HE_AAC</li>
<li>算法复杂度：AAC_LC &lt; HE_AAC</li>
<li><a href="http://blog.csdn.net/leixiaohua1020/article/details/11971419" target="_blank" rel="external">更加详细的性能对比</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://archive.eet-china.com/www.eet-china.com/ART_8800673925_675277_NT_f94a6648.HTM" target="_blank" rel="external">AAC_ELD</a><ul>
<li>增强型低延迟AAC（AAC-ELD）音频编解码器</li>
<li>编码器:（Android 4.1+）</li>
<li>解码器：（Android 4.1+）</li>
<li>支持从16到48 kHz的标准采样率的单声道/立体声内容</li>
<li>能提供跟CD一样的音频质量，让用户获得无与伦比的通信体验。是唯一被广泛采用的全高清语音技术。<ul>
<li>AMR_NB</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>AMR（窄带）音频编解码器</li>
<li>主要用于第三代移动通信 W-CDMA 系统中</li>
<li>AMR-NB 支持八种速率模式。使其以更加智能的方式解决信源和信道编码的速率分配问题,根据无线信道和传输状况来自适应地选择一种编码模式进行传输,使得无线资源的配置与利用更加灵活有效。<ul>
<li>模式 0(4.75kbit/s)</li>
<li>模式 1(5.15kbit/s)</li>
<li>模式 2(5.90kbit/s)</li>
<li>模式 3(6.70kbit/s)</li>
<li>模式 4(7.40kbit/s)</li>
<li>模式 5(7.95kbit/s)</li>
<li>模式 6(10.2kbit/s)</li>
<li>模式 7(12.2kbit/s)</li>
</ul>
</li>
<li>在8kHz采样时为4.75至12.2 kbps</li>
<li>支持的文件类型/容器格式<ul>
<li>3GPP<ul>
<li>.3gp<ul>
<li>AMR_WB</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>AMR（宽带）音频编解码器</li>
<li>作为第三代移动通信系统使用的语音编解码算法</li>
<li>AMR-WB 音频带宽在 50Hz-7000Hz,相对于 200Hz-3400Hz 为宽带,支持九种速率模式<ul>
<li>模式 0(6.60kbit/s)</li>
<li>模式 1(8.85kbit/s)</li>
<li>模式 2(12.65kbit/s)</li>
<li>模式 3(14.25kbit/s)</li>
<li>模式 4(15.85kbit/s)</li>
<li>模式 5(18.25kbit/s)</li>
<li>模式 6(19.85kbit/s)</li>
<li>模式 7(23.05kbit/s)</li>
<li>模式 8(23.85kbit/s)</li>
</ul>
</li>
<li>采用的是代数码激励线性预测编码(Algebraic Code ExcitedLinear Prediction,简称 ACELP),其已被 3GPP选定为GSM和3G无线W-CDMA的宽带编码器,并将应用于IP电话、第三代移动通信、ISDN 宽带电话、ISDN 可视电话和电视会议等领域,这标志着无线和有线业务第一次采用同样的编码器。 </li>
<li>9个速率从6.60 kbit / s到23.85 kbit / s采样@ 16kHz</li>
<li>支持的文件类型/容器格式<ul>
<li>3GPP<ul>
<li>.3gp</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://blog.csdn.net/lusonglin121/article/details/9333095" target="_blank" rel="external">AMR_WB和AMR_NB更多详情</a><ul>
<li>VORBIS</li>
</ul>
</li>
<li>Ogg Vorbis音频编解码器。</li>
<li>Ogg Vorbis是一种新的音频压缩格式，类似于MP3等现有的音乐格式。</li>
<li>它是完全免费、开放和没有专利限制的。</li>
<li>支持多声道。</li>
<li>更低的码率和文件体积。</li>
<li>Ogg Vorbis文件的扩展名是.ogg。</li>
<li>现在创建的OGG文件可以在未来的任何播放器上播放，因此，这种文件格式可以不断地进行大小和音质的改良，而不影响旧有的编码器或播放器。</li>
<li>支持的文件类型/容器格式<ul>
<li>•Ogg<ul>
<li>.ogg</li>
</ul>
</li>
<li>•Matroska<ul>
<li>.mkv （Android 4.0+） </li>
<li>Matroska是一种新的多媒体封装格式，它可将多种不同编码的视频及16条以上不同格式的音频和不同语言的字幕流封装到一个Matroska Media文件当中。也是其中一种开放源代码的多媒体封装格式。<h1 id="总结说明"><a href="#总结说明" class="headerlink" title="总结说明"></a>总结说明</h1><ul>
<li>通过以上整理，我们在使用mediaRecord的时候，就不会盲目去设置AudioEncoder和OutputFormat了，而是根据实际情况来使用。</li>
<li>设置的支持的文件类型/容器格式请参考<a href="https://developer.android.com/guide/topics/media/media-formats.html" target="_blank" rel="external">Google官方文档</a>。</li>
<li>整理的笔记如果错误的地方，请一起交流讨论共同进步，谢谢。</li>
<li>以上资料均来自网络整理，如有侵权请告知。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很久没有更新博客了，最近实习一直挺忙的。最近做的项目有关使用了录音类&lt;a href=&quot;https://developer.android.com/reference/android/media/MediaRecorder.html&quot; target=
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="MediaRecorder" scheme="http://sorgs.cn/tags/MediaRecorder/"/>
    
      <category term="MediaRecorder.setAudioEncoder" scheme="http://sorgs.cn/tags/MediaRecorder-setAudioEncoder/"/>
    
      <category term="MediaRecorder.setOutputFormat" scheme="http://sorgs.cn/tags/MediaRecorder-setOutputFormat/"/>
    
      <category term="setAudioEncoder and setOutputFormat" scheme="http://sorgs.cn/tags/setAudioEncoder-and-setOutputFormat/"/>
    
  </entry>
  
  <entry>
    <title>第三方登录之支付宝登录</title>
    <link href="http://sorgs.cn/post/12778/"/>
    <id>http://sorgs.cn/post/12778/</id>
    <published>2017-08-06T13:02:00.000Z</published>
    <updated>2019-08-15T01:29:03.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>公司一个需求让做一个支付宝的第三方登录，注意，是登录不是支付。也很简单，这里我自己记录下大家没有说的问题。</p>
</blockquote>
<ul>
<li>首先，支付宝登录和其他第三方登录不太一样，相比麻烦一点。一般第三方登录我们用shareSDK就好，但是支付宝不行。查看官方文档，大部分就是去讲什么支付，没有怎么说怎么登陆。</li>
<li>而且官方文档还有少许错误</li>
</ul>
<ul>
<li>首先是我们先请求后台，给我们一个验证信息，我这里使用的网络请求框架是android-async-http。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/QQ%E6%88%AA%E5%9B%BE20170826173305.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>然后获取的信息类似这样</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/QQ%E6%88%AA%E5%9B%BE20170826174839.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>然后调用支付宝的函数<br>这个函数必须是异步调用，获取到用户信息之后，在利用handler发送到主线程进行登录</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/QQ%E6%88%AA%E5%9B%BE20170826175136.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>大概就是怎么多内容了。还是很基础的东西而已</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;公司一个需求让做一个支付宝的第三方登录，注意，是登录不是支付。也很简单，这里我自己记录下大家没有说的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先，支付宝登录和其他第三方登录不太一样，相比麻烦一点。一般第三方登录我们用share
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>属性动画的研究——多级菜单展开</title>
    <link href="http://sorgs.cn/post/29596/"/>
    <id>http://sorgs.cn/post/29596/</id>
    <published>2017-07-26T08:33:11.000Z</published>
    <updated>2019-08-15T01:29:03.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很久都没有更新博客了，之前一直忙着参加挑战杯，然后就是期末考试，再然后在室友的乱带节奏下准备找实习。现在找到了一份实习工作，老大还在给新项目打框架，让我先研究下动画，说是后面会用到，就忙里偷闲玩demo</p>
</blockquote>
<ul>
<li>是看imooc上面的一个大神的课程-<a href="http://www.imooc.com/learn/263" title="Android属性动画赏析" target="_blank" rel="external">http://www.imooc.com/learn/263</a>。讲的很nice，然后我就继续深入了一点点，完善了demo而已。<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.sorgs.cn/%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB_%E8%8F%9C%E5%8D%95%E5%B1%95%E5%BC%80.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul>
<li>首先是采用了属性动画的方式<ul>
<li>在x和y上面做手脚去变化坐标 </li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PropertyValuesHolder Y, X;</div><div class="line">           <span class="comment">//设置动画</span></div><div class="line">           Y = PropertyValuesHolder.ofFloat(<span class="string">"translationY"</span>, y);</div><div class="line">           X = PropertyValuesHolder.ofFloat(<span class="string">"translationX"</span>, x);</div><div class="line"></div><div class="line">           <span class="comment">//添加动画集合</span></div><div class="line">           ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(imageViewList.get(i), X, Y);</div></pre></td></tr></table></figure>
<ul>
<li>然后是两个动画一起</li>
<li>使用抖动效果（使用了BounceInterpolator）[可能gif有些看不出来]<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为控件增加自由落体动画效果</span></div><div class="line">           animator.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="计算坐标"><a href="#计算坐标" class="headerlink" title="计算坐标"></a>计算坐标</h1><p>我们的展开是一个半圆的扇形，那么肯定就是利用数学函数来进行计算，如图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.sorgs.cn/%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB_%E8%8F%9C%E5%8D%95%E5%B1%95%E5%BC%80%E8%AF%B4%E6%98%8E.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>从上面到下面，x是从最大到0，y是从0到最大<br>每一个点的坐标就是根据圆心角来计算<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要扩散的角度 以180度为例</span></div><div class="line">            <span class="keyword">float</span> angle = (<span class="keyword">float</span>) (Math.PI * <span class="number">180</span> / <span class="number">180</span>);</div><div class="line"></div><div class="line">            <span class="comment">//计算偏移的x,y坐标</span></div><div class="line">            x = (<span class="keyword">float</span>) (n * Math.sin(angle / (res.length - <span class="number">1</span>) * count));</div><div class="line">            y = (<span class="keyword">float</span>) (n * Math.cos(angle / (res.length - <span class="number">1</span>) * count));</div></pre></td></tr></table></figure></p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><ul>
<li>布局</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_h"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/h"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_g"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/g"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_f"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/f"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_e"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/e"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_d"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/d"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_c"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/c"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_b"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/b"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_a"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/ImageView"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/a"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>抽取的属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ImageView"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>50dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>50dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:paddingLeft"</span>&gt;</span>5dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:paddingTop"</span>&gt;</span>5dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sorgs.animtest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</div><div class="line"><span class="keyword">import</span> android.animation.PropertyValuesHolder;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.animation.BounceInterpolator;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] res = &#123;R.id.iv_a, R.id.iv_b, R.id.iv_c, R.id.iv_d, R.id.iv_e, R.id.iv_f, R.id.iv_g, R.id.iv_h&#125;;</div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; imageViewList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 菜单打开或者关闭的标志</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> re : res) &#123;</div><div class="line">            <span class="comment">//循环添加每个控件</span></div><div class="line">            ImageView imageView = (ImageView) findViewById(re);</div><div class="line">            <span class="comment">//为每个控件添加点击事件</span></div><div class="line">            imageView.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">            <span class="comment">//将每个控件添加到List中</span></div><div class="line">            imageViewList.add(imageView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.iv_a:</div><div class="line">                <span class="keyword">if</span> (flag) &#123;</div><div class="line">                    startAnim();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    emdAnim();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="comment">//点击其他按钮，弹出toast</span></div><div class="line">                Toast.makeText(getApplication(), <span class="string">"click"</span> + view.getId(), Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 关闭菜单动画</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">emdAnim</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; res.length; i++) &#123;</div><div class="line">            PropertyValuesHolder Y, X;</div><div class="line">            <span class="comment">//X Y 都回归原点</span></div><div class="line">            Y = PropertyValuesHolder.ofFloat(<span class="string">"translationY"</span>, <span class="number">0</span>);</div><div class="line">            X = PropertyValuesHolder.ofFloat(<span class="string">"translationX"</span>, <span class="number">0</span>);</div><div class="line">            ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(imageViewList.get(i), X, Y);</div><div class="line"></div><div class="line">            <span class="comment">//设置动画执行时间</span></div><div class="line">            animator.setDuration(<span class="number">500</span>);</div><div class="line">            <span class="comment">//每个控件之间的延时，形成每个按钮依次出现</span></div><div class="line">            animator.setStartDelay(i * <span class="number">300</span>);</div><div class="line">            <span class="comment">//为控件增加自由落体动画效果</span></div><div class="line">            animator.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</div><div class="line">            <span class="comment">//执行动画</span></div><div class="line">            animator.start();</div><div class="line">            <span class="comment">//重置flag</span></div><div class="line">            flag = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 打开菜单动画</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAnim</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//扩散的距离，获取控件的高度的2倍</span></div><div class="line">        <span class="keyword">float</span> x, y, n = imageViewList.get(<span class="number">0</span>).getMeasuredHeight() * <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; res.length; i++) &#123;</div><div class="line">            <span class="keyword">int</span> count = res.length - i;</div><div class="line">            <span class="comment">//需要扩散的角度 以180度为例</span></div><div class="line">            <span class="keyword">float</span> angle = (<span class="keyword">float</span>) (Math.PI * <span class="number">180</span> / <span class="number">180</span>);</div><div class="line"></div><div class="line">            <span class="comment">//计算偏移的x,y坐标</span></div><div class="line">            x = (<span class="keyword">float</span>) (n * Math.sin(angle / (res.length - <span class="number">1</span>) * count));</div><div class="line">            y = (<span class="keyword">float</span>) (n * Math.cos(angle / (res.length - <span class="number">1</span>) * count));</div><div class="line"></div><div class="line">            PropertyValuesHolder Y, X;</div><div class="line">            <span class="comment">//设置动画</span></div><div class="line">            Y = PropertyValuesHolder.ofFloat(<span class="string">"translationY"</span>, y);</div><div class="line">            X = PropertyValuesHolder.ofFloat(<span class="string">"translationX"</span>, x);</div><div class="line"></div><div class="line">            <span class="comment">//添加动画集合</span></div><div class="line">            ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(imageViewList.get(i), X, Y);</div><div class="line"></div><div class="line">            <span class="comment">//设置动画执行时间</span></div><div class="line">            animator.setDuration(<span class="number">500</span>);</div><div class="line">            <span class="comment">//每个控件之间的延时，形成每个按钮依次出现</span></div><div class="line">            animator.setStartDelay(i * <span class="number">300</span>);</div><div class="line">            <span class="comment">//为控件增加自由落体动画效果</span></div><div class="line">            animator.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</div><div class="line">            <span class="comment">//执行动画</span></div><div class="line">            animator.start();</div><div class="line">            <span class="comment">//重置flag</span></div><div class="line">            flag = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很久都没有更新博客了，之前一直忙着参加挑战杯，然后就是期末考试，再然后在室友的乱带节奏下准备找实习。现在找到了一份实习工作，老大还在给新项目打框架，让我先研究下动画，说是后面会用到，就忙里偷闲玩demo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Sorgs天气app开发</title>
    <link href="http://sorgs.cn/post/50314/"/>
    <id>http://sorgs.cn/post/50314/</id>
    <published>2017-05-20T06:02:18.000Z</published>
    <updated>2019-08-15T01:29:03.856Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>看完了郭霖大神我第一行代码（第二版）,最后书上那个案例，我也用来了实现了一下。修改了一点</p>
</blockquote>
<p>#主要是完成了天气的更新和生活的建议</p>
<ul>
<li><p>修改后台为3个小时更新</p>
</li>
<li><p>修改进入app首先根据定位来决定当地的天气，不再是手动选择</p>
</li>
<li><p>侧边栏可以选择查看中国不同城市的天气，点击还可以根据定位回到当前地区</p>
</li>
<li><p>做了一点简单的美化，当然背景图片还是必应的图片，每天更新</p>
</li>
</ul>
<p>#代码就不贴了，先看看效果图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Screenshot_20170515-212616.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Screenshot_20170515-202616.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Screenshot_20170515-210005.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/Screenshot_20170515-210016.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>第一个图本来是需要这些权限的，是为了后面接入广告准备的</li>
</ul>
<p><a href="http://zhushou.360.cn/detail/index/soft_id/3841779" target="_blank" rel="external">求下载啊！！！</a></p>
<p>最后还是要给出github地址，<a href="https://github.com/sorgs/SorgsWeather.git" target="_blank" rel="external">本项目开源</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看完了郭霖大神我第一行代码（第二版）,最后书上那个案例，我也用来了实现了一下。修改了一点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#主要是完成了天气的更新和生活的建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改后台为3个小时更新&lt;/p&gt;
&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android开发中屏幕的适配问题 px pd sp之间的转换工具</title>
    <link href="http://sorgs.cn/post/32369/"/>
    <id>http://sorgs.cn/post/32369/</id>
    <published>2017-03-28T02:31:28.000Z</published>
    <updated>2019-08-15T01:29:03.843Z</updated>
    
    <content type="html"><![CDATA[<p>在Android开发中，美工妹子给我的图片都是px的单位，但是这个但是这个单位在程序中并不好，不能够自动适配。所以需要我们手动转换为dp。</p>
<p>#关于DP,PD,SP<br>PPI = Pixels per inch，每英寸上的像素数,即 “像素密度”</p>
<p>ppi的运算方式是：<br>PPI = √（长度像素数² + 宽度像素数²） / 屏幕对角线英寸数</p>
<p>dp：Density-independent pixels，以160PPI屏幕为标准，则1dp=1px，</p>
<p>dp和px的换算公式 ：<br>dp*ppi/160 = px。比如1dp x 320ppi/160 = 2px。</p>
<p>sp：Scale-independent pixels，它是安卓的字体单位，以160PPI屏幕为标准，当字体大小为 100%时， 1sp=1px。</p>
<p>sp 与 px 的换算公式：sp*ppi/160 = px</p>
<p>得出：</p>
<p>px = dp*ppi/160<br>dp = px / (ppi / 160)</p>
<p>px = sp*ppi/160<br>sp = px / (ppi / 160)</p>
<p>dp ≈ sp</p>
<p>#程序<br>所以我就需要按计算机计算咯。但是我怎么可能手动呢，于是我就写了一个C艹的可以执行文件。帮助计算。都是些垃圾代码。不敢私藏，拿出来分享，有需要改进的就随便改。（改了给我说说，一起用）</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PX_PD</span><span class="params">(<span class="keyword">float</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">float</span> a;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入px："</span>;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; a;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"dp =  "</span> &lt;&lt; a / b &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PD_PX</span><span class="params">(<span class="keyword">float</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">float</span> a;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入pd："</span>;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; a;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"dx =  "</span> &lt;&lt; a * b &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"------------------------------------------------------------------------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"author：sorgs.如有需要改进的地方欢迎提出QQ：1042746391"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">" 由于开发Android程序员，美工妹子给的图片的单位和程序单位不一致，所以产生需要转换。(所有数据基于标准)"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"dp是虚拟像素，在不同的像素密度的设备上会自动适配,这里就采用标准的就OK。（sp和dp基本一样）"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"在mdpi分辨率，像素密度为160，1dp=1px"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"在hdpi分辨率，像素密度为240，1dp=1.5px"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"在xhdpi分辨率，像素密度为320，1dp=2px"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"在xxhdpi分辨率，像素密度为480，1dp=3px"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"计算公式：1dp*像素密度/160 = 实际像素数"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"------------------------------------------------------------------------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">	</div><div class="line">number3:</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入需要转化的形式：1(px-&gt;dp) 2(dp-&gt;px)"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; i;</div><div class="line">	<span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</div><div class="line">	number1:</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入需要计算的分辨率: 1(mdpi) 2(hdpi) 3(xhdpi) 4(xxhdpi)"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">int</span> j;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; j;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</div><div class="line">			PX_PD(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">2</span>) &#123;</div><div class="line">			PX_PD(<span class="number">1.5</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">3</span>) &#123;</div><div class="line">			PX_PD(<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">4</span>) &#123;</div><div class="line">			PX_PD(<span class="number">3</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"貌似输入有误呢"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">			<span class="keyword">goto</span> number1;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;<span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</div><div class="line">	number2:</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入需要计算的分辨率: 1(mdpi) 2(hdpi) 3(xhdpi) 4(xxhdpi)"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">int</span> j;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; j;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</div><div class="line">			PX_PD(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">2</span>) &#123;</div><div class="line">			PX_PD(<span class="number">1.5</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">3</span>) &#123;</div><div class="line">			PX_PD(<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (j == <span class="number">4</span>) &#123;</div><div class="line">			PX_PD(<span class="number">3</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"貌似输入有误呢"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">			<span class="keyword">goto</span> number2;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入有误哦！"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">goto</span> number3;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后放上源码地址：<a href="https://github.com/sorgs/DP_PX.git" target="_blank" rel="external">https://github.com/sorgs/DP_PX.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android开发中，美工妹子给我的图片都是px的单位，但是这个但是这个单位在程序中并不好，不能够自动适配。所以需要我们手动转换为dp。&lt;/p&gt;
&lt;p&gt;#关于DP,PD,SP&lt;br&gt;PPI = Pixels per inch，每英寸上的像素数,即 “像素密度”&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android studio 报错 error opening trace file: Permission denied (13)</title>
    <link href="http://sorgs.cn/post/36822/"/>
    <id>http://sorgs.cn/post/36822/</id>
    <published>2017-03-04T05:46:37.000Z</published>
    <updated>2019-08-15T01:29:03.838Z</updated>
    
    <content type="html"><![CDATA[<p>关于这个报错，其实是Android 4.1（16）在Android studio 2.3产生的。</p>
<p> 具体原因是因为Android 6.0之后的动态申请权限。很明显，这句话的意思是权限不足。<br>在Android studio 升级到了2.3之后，4.1的模拟器本来不需要动态权限的，估计是个bug吧（个人猜测），因为5.1是完美运行的。</p>
<p>关于动态申请权限，这里就不再赘述，百度一搜一大把。反正养成动态申请权限的习惯是好多 。这里给出一个大神写的动态申请权限的demo。</p>
<p><a href="https://github.com/Android-Mu/Android6.0Authority.git" target="_blank" rel="external"><br>https://github.com/Android-Mu/Android6.0Authority.git</a></p>
<p>具方法很多的，参考这demo就很不错了，写的很具体。</p>
<p>谨以此记录我调试一天的bug。</p>
<p>顺便放上我的拙劣代码，见笑了！（部分代码，SD卡的权限）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 检查权限</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckPermission</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(SplashActivity.<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)</div><div class="line">                != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            <span class="comment">//权限不足就需要去申请，上下文，需要申请的权限，请求码（唯一就行）</span></div><div class="line">            ActivityCompat.requestPermissions(SplashActivity.<span class="keyword">this</span></div><div class="line">                    , <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            downloadApk();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 回调的权限请求结果，是否同意都会调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> requestCode  请求码</div><div class="line">     * <span class="doctag">@param</span> permissions  申请的权限</div><div class="line">     * <span class="doctag">@param</span> grantResults 结果</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode</span></span></div><div class="line">            , @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults) &#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                downloadApk();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ToastUtil.show(getApplicationContext(), <span class="string">"权限不足，不能更新，下次开启请允许权限，如没有弹出，请到设置中心开启权限"</span>);</div><div class="line">                enterHome();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于这个报错，其实是Android 4.1（16）在Android studio 2.3产生的。&lt;/p&gt;
&lt;p&gt; 具体原因是因为Android 6.0之后的动态申请权限。很明显，这句话的意思是权限不足。&lt;br&gt;在Android studio 升级到了2.3之后，4.1的模拟
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Windows网络编程-简单的多线程聊天室</title>
    <link href="http://sorgs.cn/post/6290/"/>
    <id>http://sorgs.cn/post/6290/</id>
    <published>2016-11-25T13:05:20.000Z</published>
    <updated>2019-08-15T01:29:03.856Z</updated>
    
    <content type="html"><![CDATA[<p>实验室系统：Windows10<br>实验室IDE：VS2012</p>
<h1 id="创建MFC文件项目"><a href="#创建MFC文件项目" class="headerlink" title="创建MFC文件项目"></a>创建MFC文件项目</h1><p>文件-&gt;新建-&gt;项目</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125124944150" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后根据图片进行操作</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125125500692" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125125508873" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125125549529" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125125559271" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125125606014" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>注意的地方：<br>1.取消union库<br>2.勾选上Windows套接字，让系统自动帮我们生成<br>3.选择Dlog</p>
<h1 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h1><p>点开工具箱</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125125835477" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>建立两个主框，一个用来接收数据，一个用来发送数据</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125130144141" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>再在主框里面建立3个edit，一个用来显示发送来的数据，一个用来显示自己发送的数据，下面那个用来显示要发送的数据</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125130414157" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>最后删掉原有，并加一个按钮为发送，添加一个ip控制</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125130529361" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><h2 id="加载套接字数据库"><a href="#加载套接字数据库" class="headerlink" title="加载套接字数据库"></a>加载套接字数据库</h2><p>先手到我们的cpp中，因为我们之前选择了Windows套接字库，所以会给我们生成好</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125180252352" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们也可以让系统提示我们是否加载失败</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CWinApp::InitInstance();  <span class="comment">//去加载套接字库，需要包含一个Afxsock.h的头文件，就不需要去链接套接字库  </span></div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (!AfxSocketInit())  </div><div class="line">    &#123;  </div><div class="line">        AfxMessageBox(<span class="string">"Load socket"</span>); <span class="comment">//利用AfxMessageBox弹出提示  </span></div><div class="line">        <span class="keyword">return</span> FALSE;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接着我们去查看是包含了头文件</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125181118261" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>看到这个说明没有问题<br>然后我们去头文件中去定义。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125183505959" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="然后我们去写初始化的函数体"><a href="#然后我们去写初始化的函数体" class="headerlink" title="然后我们去写初始化的函数体"></a>然后我们去写初始化的函数体</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125183549960" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">BOOL CSorgsDlg::InitSocket()&#123;  <span class="comment">//套接字本身的初始化  </span></div><div class="line">    <span class="comment">//指定地址族，类型（给予UDT的数据包套接字），0(系统自己选择合适的协议)  </span></div><div class="line">    msocket = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);<span class="comment">//msocket：私有权限的套接字描述符  </span></div><div class="line">  </div><div class="line">    <span class="keyword">if</span> (INVALID_SOCKET == msocket) <span class="comment">//判断套接字是否创建失败  </span></div><div class="line">    &#123;  </div><div class="line">        MessageBox(<span class="string">"create socket false"</span>);  </div><div class="line">        <span class="keyword">return</span> FALSE;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//作为接收端，需要绑定端口和地址上  </span></div><div class="line">    SOCKADDR_IN acceptSock; <span class="comment">//定义地址结构体的变量  </span></div><div class="line">    acceptSock.sin_family = AF_INET;  <span class="comment">//地址族  </span></div><div class="line">    acceptSock.sin_port = htons(<span class="number">6000</span>);<span class="comment">//设定端口 用htons转换  </span></div><div class="line">    acceptSock.sin_addr.S_un.S_addr = htonl(INADDR_ANY); <span class="comment">//接受发送到本地任何IP地址的数据 htonl转换  </span></div><div class="line">  </div><div class="line">    <span class="comment">//进行绑定  </span></div><div class="line">    <span class="keyword">int</span> retval = <span class="number">0</span>; <span class="comment">//定义整理变量用来判断  </span></div><div class="line">    bind(msocket,(SOCKADDR *)&amp;acceptSock,<span class="keyword">sizeof</span>(SOCKADDR));  </div><div class="line">    <span class="keyword">if</span> (SOCKET_ERROR == retval)  </div><div class="line">    &#123;  </div><div class="line">        closesocket(msocket); <span class="comment">//关闭套接字  </span></div><div class="line">        MessageBox(<span class="string">"bind false"</span>);  </div><div class="line">        <span class="keyword">return</span> FALSE;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> TRUE;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写完了我们的函数，我们需要去设置加载它的地方。</p>
<p>在这个函数中去调用我么的初始化套接字函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL CSorgsChatDlg::OnInitDialog()</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125184101295" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h2><p>现在开始接收端的程序，为解决CreateThread中的LPVOID只能传递一个参数值的问题，我们首先去头文件穿件一个一个结构体</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125184423073" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义结构体,解决CreateThread中的LPVOID只能传递一个参数值的问题  </span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RECVPARAM</span>  </span></div><div class="line">&#123;  </div><div class="line">    SOCKET sock;<span class="comment">//定义一个套接字类型的变量  </span></div><div class="line">    HWND hwnd;<span class="comment">//定义一个窗口类型的变量  </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="定义套接字的指针"><a href="#定义套接字的指针" class="headerlink" title="定义套接字的指针"></a>定义套接字的指针</h3><p>接下来去定义套接字的指针和串口句柄（现在刚刚调用初始化套接字函数的下面）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125185505045" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">RECVPARAM *mRecvParam = <span class="keyword">new</span> RECVPARAM; <span class="comment">//定义一个指针  </span></div><div class="line">mRecvParam-&gt;sock = msocket; <span class="comment">//初始化我们创建的套接字  </span></div><div class="line">mRecvParam-&gt;hwnd = m_hWnd; <span class="comment">//初始化我们窗口 mhWnd里面保存了和这个类相关的窗口的句柄  </span></div><div class="line">  </div><div class="line"><span class="comment">//调用CteateThread常见线程  </span></div><div class="line"><span class="comment">//NULL,0：和调用线程使用一样的大小,线程函数的地址，（强转）参数，创建的标记（一旦创建立即运行），线程ID  </span></div><div class="line">HANDLE mThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,Threadpro,(LPVOID)mRecvParam,<span class="number">0</span>,<span class="literal">NULL</span>);  </div><div class="line">CloseHandle(mThread); <span class="comment">//将线程句柄关闭 同时递减线程类和对象的使用基数</span></div></pre></td></tr></table></figure>
<p>为了使用完全使用面向对象的方式，我们去头文件进行定义</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125185849819" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当创建线程的时候。运行时代码需要去调用这个线程函数从而启动线程  </span></div><div class="line"><span class="comment">//而我们为了不设置为全局函数设置为CSorgsChatDlg类的成员函数（完全面向对象的思想编程）  </span></div><div class="line"><span class="comment">//而要想调用这个成员函数，必须去定义一个CSorgsChatDlg的对象  </span></div><div class="line"><span class="comment">//对于运行时代码来说，并不知道要定义那个对象或者说不知道怎么去定义  </span></div><div class="line"><span class="comment">//所以我们就像这个成员函数设置为静态  </span></div><div class="line"><span class="function"><span class="keyword">static</span> DWORD WINAPI <span class="title">Threadpro</span><span class="params">(LPVOID mlpvpid)</span></span>; <span class="comment">//定义为静态，不属于那一个对象，只属于这个类本身</span></div></pre></td></tr></table></figure>
<h2 id="Threadpro"><a href="#Threadpro" class="headerlink" title="Threadpro"></a>Threadpro</h2><p>然后开始编写Threadpro函数体</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125191638297" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="发送消息的函数"><a href="#发送消息的函数" class="headerlink" title="发送消息的函数"></a>发送消息的函数</h2><p>然后就是去编写发送消息的函数<br>先去我们的MFC界面双击发送按钮，生成点击事件按钮<br>并右键属性，去知道我们的显示发送和显示接收数据的ID号</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125204202203" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> CSorgsDlg::OnBnClickedButton1()  </div><div class="line">&#123;  </div><div class="line">    DWORD dwIP;  </div><div class="line">    ((CIPAddressCtrl*)GetDlgItem(IDC_IPADDRESS1))-&gt;GetAddress(dwIP);<span class="comment">//IP控件的ID  </span></div><div class="line">  </div><div class="line">    SOCKADDR_IN ToSock;<span class="comment">//定义地址结构体变量  </span></div><div class="line">    ToSock.sin_family = AF_INET;  <span class="comment">//地址族  </span></div><div class="line">    ToSock.sin_port = htons(<span class="number">6000</span>);<span class="comment">//设定端口 用htons转换  </span></div><div class="line">    ToSock.sin_addr.S_un.S_addr= htonl(dwIP);  </div><div class="line">  </div><div class="line">    CString strSend;  </div><div class="line">  </div><div class="line">    GetDlgItemText(IDC_EDIT4,strSend);<span class="comment">//发送框里面ID，获取里面的内容  </span></div><div class="line">  </div><div class="line">    <span class="comment">//套接字，发送的buffer,长度（多发送一个字节），标记，地址结构体的指针，地址结构体的长度  </span></div><div class="line">    sendto(msocket,strSend,strSend.GetLength()+<span class="number">1</span>,<span class="number">0</span>,(SOCKADDR*)&amp;ToSock,<span class="keyword">sizeof</span>(SOCKADDR));<span class="comment">//发送  </span></div><div class="line">  </div><div class="line">    SetDlgItemText(IDC_EDIT4,<span class="string">""</span>);<span class="comment">//发送之后将发送框的内容置空  </span></div><div class="line">  </div><div class="line">    <span class="comment">//显示自己发送框的数据设置  </span></div><div class="line">    CString strto;  </div><div class="line">    GetDlgItemText(IDC_EDIT3,strto);<span class="comment">//获取文本，ID号，存放数据的地方  </span></div><div class="line">    strto +=<span class="string">"\r\n"</span>; <span class="comment">//增加换行  </span></div><div class="line">    strto +=<span class="string">"帅帅的自己说:"</span>;  </div><div class="line">    strto += strSend;  </div><div class="line">    SetDlgItemText(IDC_EDIT3,strto);<span class="comment">//将数据放回编辑框  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消息响应"><a href="#消息响应" class="headerlink" title="消息响应"></a>消息响应</h2><p>然后我们在去编写消息响应函数<br>在头文件中写入函数声明</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125204533783" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="消息映射"><a href="#消息映射" class="headerlink" title="消息映射"></a>消息映射</h2><p>然后去编写消息映射</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125204712572" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后去写函数体</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125205034629" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//消息响应函数  </span></div><div class="line"><span class="comment">//LRESULT，32位整形数，常常用于回调函数  </span></div><div class="line">LRESULT CSorgsDlg::MRecvData(WPARAM wParam,LPARAM lParam)&#123;  </div><div class="line">    CString str = (<span class="keyword">char</span>*)lParam;  </div><div class="line">    CString strTemp;<span class="comment">//接收久的数据   </span></div><div class="line">  </div><div class="line">    GetDlgItemText(IDC_EDIT2,strTemp);<span class="comment">//获取显示发送框ID号，存放数据的地方  </span></div><div class="line">  </div><div class="line">    str += <span class="string">"\r\n"</span>; <span class="comment">//增加换行  </span></div><div class="line">    str +=strTemp;  </div><div class="line">  </div><div class="line">    SetDlgItemText(IDC_EDIT2,str);<span class="comment">//将数据放回编辑框  </span></div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> TRUE;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自此，我们代码编写完毕</p>
<h1 id="优化控件"><a href="#优化控件" class="headerlink" title="优化控件"></a>优化控件</h1><h2 id="使显示框分行"><a href="#使显示框分行" class="headerlink" title="使显示框分行"></a>使显示框分行</h2><p>右键属性把Multiline设置为true</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125205338235" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="按钮回车发送和不显示按钮"><a href="#按钮回车发送和不显示按钮" class="headerlink" title="按钮回车发送和不显示按钮"></a>按钮回车发送和不显示按钮</h2><p>右键按钮属性</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125205535113" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>这里我们使用127.0.0.1回环地址进行测试</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161125205716444" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这样就说明没有问题了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验室系统：Windows10&lt;br&gt;实验室IDE：VS2012&lt;/p&gt;
&lt;h1 id=&quot;创建MFC文件项目&quot;&gt;&lt;a href=&quot;#创建MFC文件项目&quot; class=&quot;headerlink&quot; title=&quot;创建MFC文件项目&quot;&gt;&lt;/a&gt;创建MFC文件项目&lt;/h1&gt;&lt;p&gt;文件
    
    </summary>
    
      <category term="Windows网络编程" scheme="http://sorgs.cn/categories/Windows%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Windows网络编程" scheme="http://sorgs.cn/tags/Windows%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="聊天室" scheme="http://sorgs.cn/tags/%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    
      <category term="多线程" scheme="http://sorgs.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android两个android两个activity之间相互传递数据之装备选择（书上案例）</title>
    <link href="http://sorgs.cn/post/6825/"/>
    <id>http://sorgs.cn/post/6825/</id>
    <published>2016-11-21T03:00:58.000Z</published>
    <updated>2019-08-15T01:29:03.841Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个是书上的一个案例，我将其完善了一点而已</p>
</blockquote>
<h1 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h1><p>显示创建一个xml的主界面</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"sorgs.com.selectequipment.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/pet_imgv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/body"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/pet_dialog_tv"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"25dp"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"主人，快给小宝宝购买装备吧"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TableLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"生命值："</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"14sp"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/progressBar1"</span></div><div class="line">                <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"2"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tv_life_progress"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"0"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#000000"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"攻击力："</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"14sp"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/progressBar2"</span></div><div class="line">                <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"2"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tv_attack_progress"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"0"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#000000"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TableRow</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"敏捷："</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"14sp"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ProgressBar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/progressBar3"</span></div><div class="line">                <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"2"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tv_speed_progress"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">                <span class="attr">android:text</span>=<span class="string">"0"</span></div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">                <span class="attr">android:textColor</span>=<span class="string">"#000000"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_master"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"click1"</span></div><div class="line">        <span class="attr">android:drawablePadding</span>=<span class="string">"3dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"主人购买装备"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/btn_baby"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"click2"</span></div><div class="line">            <span class="attr">android:drawablePadding</span>=<span class="string">"3dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"小宝宝购买装备"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"14sp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在创建一个购买装备购买的页面</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/r1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"30dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_name"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"商品名称"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_life"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"13sp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"生命值"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_attack"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"13sp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"攻击力"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_speed"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"13sp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"速度"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><p>然后创建一个Itemfnfo类，用来封装装备信息</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121104948757" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>接着写代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sorgs.com.domain;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/11/20.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> acctack;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> life;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> speed;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemInfo</span><span class="params">(String name, <span class="keyword">int</span> acctack, <span class="keyword">int</span> life, <span class="keyword">int</span> speed)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.acctack = acctack;</div><div class="line">        <span class="keyword">this</span>.life = life;</div><div class="line">        <span class="keyword">this</span>.speed = speed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAcctack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> acctack;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcctack</span><span class="params">(<span class="keyword">int</span> acctack)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.acctack = acctack;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLife</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> life;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLife</span><span class="params">(<span class="keyword">int</span> life)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.life = life;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> speed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpeed</span><span class="params">(<span class="keyword">int</span> speed)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.speed = speed;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"["</span> + <span class="string">"name='"</span> + name + <span class="string">", acctack="</span> + acctack + <span class="string">", life="</span> + life</div><div class="line">                + <span class="string">", speed="</span> + speed + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后创建一个shopactivity，用来展示主人装备信息的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sorgs.com.selectequipment.sorgs.com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> sorgs.com.domain.ItemInfo;</div><div class="line"><span class="keyword">import</span> sorgs.com.selectequipment.R;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/11/20.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ItemInfo itemInfo;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_shop);</div><div class="line"></div><div class="line">        itemInfo = <span class="keyword">new</span> ItemInfo(<span class="string">"金剑"</span>,<span class="number">100</span>,<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">        findViewById(R.id.r1).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        TextView mLifeTV = (TextView) findViewById(R.id.tv_life);</div><div class="line">        TextView mNameTV = (TextView) findViewById(R.id.tv_name);</div><div class="line">        TextView mSpeedTV = (TextView) findViewById(R.id.tv_speed);</div><div class="line">        TextView mAttackTV = (TextView) findViewById(R.id.tv_attack);</div><div class="line">        <span class="comment">//TextView 显示字符串，这里传入int值编译不会报错，运行会出错</span></div><div class="line">        mLifeTV.setText(<span class="string">"生命值+"</span>+itemInfo.getLife());</div><div class="line">        mNameTV.setText(itemInfo.getName());</div><div class="line">        mSpeedTV.setText(<span class="string">"敏捷度+"</span>+itemInfo.getSpeed());</div><div class="line">        mAttackTV.setText(<span class="string">"攻击力+"</span>+itemInfo.getAcctack());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId())&#123;</div><div class="line">                <span class="keyword">case</span> R.id.r1:</div><div class="line">                    Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">                    intent.putExtra(<span class="string">"equipment"</span>,itemInfo);</div><div class="line">                    setResult(<span class="number">1</span>,intent);  <span class="comment">//设置请求码</span></div><div class="line">                    finish();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再建立一个shopactivity2，用来放宝宝购买装备</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sorgs.com.selectequipment.sorgs.com;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> sorgs.com.domain.ItemInfo;</div><div class="line"><span class="keyword">import</span> sorgs.com.selectequipment.R;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/11/20.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopActivity2</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ItemInfo itemInfo;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_shop);</div><div class="line"></div><div class="line">        itemInfo = <span class="keyword">new</span> ItemInfo(<span class="string">"银剑"</span>,<span class="number">50</span>,<span class="number">10</span>,<span class="number">10</span>);</div><div class="line">        findViewById(R.id.r1).setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        TextView mLifeTV = (TextView) findViewById(R.id.tv_life);</div><div class="line">        TextView mNameTV = (TextView) findViewById(R.id.tv_name);</div><div class="line">        TextView mSpeedTV = (TextView) findViewById(R.id.tv_speed);</div><div class="line">        TextView mAttackTV = (TextView) findViewById(R.id.tv_attack);</div><div class="line">        <span class="comment">//TextView 显示字符串，这里传入int值编译不会报错，运行会出错</span></div><div class="line">        mLifeTV.setText(<span class="string">"生命值+"</span>+itemInfo.getLife());</div><div class="line">        mNameTV.setText(itemInfo.getName());</div><div class="line">        mSpeedTV.setText(<span class="string">"敏捷度+"</span>+itemInfo.getSpeed());</div><div class="line">        mAttackTV.setText(<span class="string">"攻击力+"</span>+itemInfo.getAcctack());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.r1:</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">                intent.putExtra(<span class="string">"equipment"</span>,itemInfo);</div><div class="line">                setResult(<span class="number">2</span>,intent);  <span class="comment">//设置请求码</span></div><div class="line">                finish();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后编写我们的主函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sorgs.com.selectequipment;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.ProgressBar;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> sorgs.com.domain.ItemInfo;</div><div class="line"><span class="keyword">import</span> sorgs.com.selectequipment.sorgs.com.ShopActivity;</div><div class="line"><span class="keyword">import</span> sorgs.com.selectequipment.sorgs.com.ShopActivity2;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ProgressBar mProgressBar1;</div><div class="line">    <span class="keyword">private</span> ProgressBar mProgressBar2;</div><div class="line">    <span class="keyword">private</span> ProgressBar mProgressBar3;</div><div class="line">    <span class="keyword">private</span> TextView mLifeTV;</div><div class="line">    <span class="keyword">private</span> TextView mAttackTV;</div><div class="line">    <span class="keyword">private</span> TextView mSpeedTV;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mLifeTV = (TextView) findViewById(R.id.tv_life_progress);</div><div class="line">        mAttackTV = (TextView) findViewById(R.id.tv_attack_progress);</div><div class="line">        mSpeedTV = (TextView) findViewById(R.id.tv_speed_progress);</div><div class="line"></div><div class="line">        initProgress(); <span class="comment">//初始化进度条</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initProgress</span><span class="params">()</span> </span>&#123;</div><div class="line">        mProgressBar1 = (ProgressBar) findViewById(R.id.progressBar1);</div><div class="line">        mProgressBar2 = (ProgressBar) findViewById(R.id.progressBar2);</div><div class="line">        mProgressBar3 = (ProgressBar) findViewById(R.id.progressBar3);</div><div class="line"></div><div class="line">        mProgressBar1.setMax(<span class="number">1000</span>);  <span class="comment">//设置最大的值1000</span></div><div class="line">        mProgressBar2.setMax(<span class="number">1000</span>);</div><div class="line">        mProgressBar3.setMax(<span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click1</span><span class="params">(View view)</span></span>&#123; <span class="comment">//开启新的activity并且想获取他的返回值</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ShopActivity.class);</div><div class="line">        startActivityForResult(intent,<span class="number">1</span>); <span class="comment">//返回请求结果，请求码为1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click2</span><span class="params">(View view)</span></span>&#123; <span class="comment">//开启新的activity并且想获取他的返回值</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ShopActivity2.class);</div><div class="line">        startActivityForResult(intent,<span class="number">2</span>); <span class="comment">//返回请求结果，请求码为2</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;<span class="comment">//获取ShopActivity的装备信息</span></div><div class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (resultCode==<span class="number">1</span>)&#123; <span class="comment">//判断结果码是否等于1，等于1为主人添加装备</span></div><div class="line">                <span class="keyword">if</span> (requestCode == <span class="number">1</span>)&#123;</div><div class="line">                    ItemInfo info = (ItemInfo) data.getSerializableExtra(<span class="string">"equipment"</span>);</div><div class="line">                    updateProgress(info); <span class="comment">//更新ProgressBar的值</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (requestCode == <span class="number">2</span>)&#123;<span class="comment">//判断结果码是否等于2，等于2为宝宝添加装备，</span></div><div class="line">                <span class="keyword">if</span> (requestCode == <span class="number">2</span>)&#123;</div><div class="line">                    ItemInfo info = (ItemInfo) data.getSerializableExtra(<span class="string">"equipment"</span>);</div><div class="line">                    updateProgress2(info); <span class="comment">//更新ProgressBar的值</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateProgress2</span><span class="params">(ItemInfo info)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> progress1 = mProgressBar1.getProgress();</div><div class="line">        <span class="keyword">int</span> progress2 = mProgressBar2.getProgress();</div><div class="line">        <span class="keyword">int</span> progress3 = mProgressBar3.getProgress();</div><div class="line"></div><div class="line">        mProgressBar1.setProgress(progress1+info.getLife());</div><div class="line">        mProgressBar2.setProgress(progress2+info.getAcctack());</div><div class="line">        mProgressBar3.setProgress(progress3+info.getSpeed());</div><div class="line"></div><div class="line">        mLifeTV.setText(mProgressBar1.getProgress()+<span class="string">""</span>);</div><div class="line">        mAttackTV.setText(mProgressBar2.getProgress()+<span class="string">""</span>);</div><div class="line">        mSpeedTV.setText(mProgressBar3.getProgress()+<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateProgress</span><span class="params">(ItemInfo info)</span> </span>&#123; <span class="comment">//更新ProgressBar的值</span></div><div class="line">        <span class="keyword">int</span> progress1 = mProgressBar1.getProgress();</div><div class="line">        <span class="keyword">int</span> progress2 = mProgressBar2.getProgress();</div><div class="line">        <span class="keyword">int</span> progress3 = mProgressBar3.getProgress();</div><div class="line"></div><div class="line">        mProgressBar1.setProgress(progress1+info.getLife());</div><div class="line">        mProgressBar2.setProgress(progress2+info.getAcctack());</div><div class="line">        mProgressBar3.setProgress(progress3+info.getSpeed());</div><div class="line"></div><div class="line">        mLifeTV.setText(mProgressBar1.getProgress()+<span class="string">""</span>);</div><div class="line">        mAttackTV.setText(mProgressBar2.getProgress()+<span class="string">""</span>);</div><div class="line">        mSpeedTV.setText(mProgressBar3.getProgress()+<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>最后一步，去配置清单里面去配置一下</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121105843457" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121105957397" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121110007241" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121110018538" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是书上的一个案例，我将其完善了一点而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;xml&quot;&gt;&lt;a href=&quot;#xml&quot; class=&quot;headerlink&quot; title=&quot;xml&quot;&gt;&lt;/a&gt;xml&lt;/h1&gt;&lt;p&gt;显示创建一个xml的
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android两个android两个activity之间相互传递数据</title>
    <link href="http://sorgs.cn/post/50165/"/>
    <id>http://sorgs.cn/post/50165/</id>
    <published>2016-11-21T02:34:39.000Z</published>
    <updated>2019-08-15T01:29:03.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个案例是书上的习题，我发生来了一点改变而已</p>
</blockquote>
<h1 id="xml："><a href="#xml：" class="headerlink" title="xml："></a>xml：</h1><p>这是第一个xml，很简单的两个tv和ed加一个btn</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"sorgs.com.datepass.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/regisrt_username"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"22dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"80dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"用户名："</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/et_name"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:hint</span>=<span class="string">"请输入您的姓名"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"14dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/regisrt_userage"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/regisrt_username"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"10dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"80dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"用户名："</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/et_age"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:hint</span>=<span class="string">"请输入您的年龄"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"14dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_send"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/regisrt_userage"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"发送"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>再来看看第二个，就显示第一个页面传过来的数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"恭喜您，"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_1"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"来到这个世界："</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_2"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_return"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/text"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"24dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"返回"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA:"></a>JAVA:</h1><p>接下来就是java的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sorgs.com.datepass;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button btn1;</div><div class="line">    <span class="keyword">private</span> EditText etname;</div><div class="line">    <span class="keyword">private</span> EditText etage;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        btn1 = (Button) findViewById(R.id.btn_send);</div><div class="line">        etage = (EditText) findViewById(R.id.et_age);</div><div class="line">        etname = (EditText) findViewById(R.id.et_name);</div><div class="line"></div><div class="line">        btn1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  <span class="comment">//用户点击按钮提交数据</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                pssDate();</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pssDate</span><span class="params">()</span></span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainActivity2.class);<span class="comment">//创建Intent对象，启动MainActivity2</span></div><div class="line"></div><div class="line">        intent.putExtra(<span class="string">"name"</span>,etname.getText().toString().trim());  <span class="comment">//将数据存入Intent对象</span></div><div class="line">        intent.putExtra(<span class="string">"age"</span>,etage.getText().toString().trim());</div><div class="line">        startActivity(intent);</div><div class="line">        finish();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就是第二个页面的java了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sorgs.com.datepass;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/11/20.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity2</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tv1;</div><div class="line">    <span class="keyword">private</span> TextView tv2;</div><div class="line">    <span class="keyword">private</span> Button btn2;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_date);</div><div class="line"></div><div class="line">        tv1 = (TextView) findViewById(R.id.tv_1);</div><div class="line">        tv2 = (TextView) findViewById(R.id.tv_2);</div><div class="line">        btn2 = (Button) findViewById(R.id.btn_return);</div><div class="line"></div><div class="line">        Intent intent1 = getIntent();<span class="comment">//获取Intent对象</span></div><div class="line"></div><div class="line">        <span class="comment">//取出对key中的值</span></div><div class="line">        String name = intent1.getStringExtra(<span class="string">"name"</span>);</div><div class="line">        String age = intent1.getStringExtra(<span class="string">"age"</span>);</div><div class="line">        <span class="comment">//设置到对的控件中</span></div><div class="line">        tv1.setText(name + <span class="string">"!"</span>);</div><div class="line">        tv2.setText(age + <span class="string">"年。"</span>);</div><div class="line"></div><div class="line">        btn2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                updata();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updata</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent2 = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainActivity.class);</div><div class="line">        startActivity(intent2);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>第二个页面做了一个跳转回第一个页面的处理</p>
<p>最后一定记得在配置里面配置一下</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121103240121" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>来看看效果</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121103259809" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161121103313715" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个案例是书上的习题，我发生来了一点改变而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;xml：&quot;&gt;&lt;a href=&quot;#xml：&quot; class=&quot;headerlink&quot; title=&quot;xml：&quot;&gt;&lt;/a&gt;xml：&lt;/h1&gt;&lt;p&gt;这是第一个
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>android隐式意图开启系统照相机</title>
    <link href="http://sorgs.cn/post/21426/"/>
    <id>http://sorgs.cn/post/21426/</id>
    <published>2016-11-20T11:21:24.000Z</published>
    <updated>2019-08-15T01:29:03.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>由于书上是转到另一个页面，我是用真机，所以直接打开相机</p>
</blockquote>
<p>先是<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"sorgs.com.opencamera.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--layout_centerHorizontal将控件置于水平方向的中心位置</span></div><div class="line">        layout_centerVertical让这个相对布局，处于它父控件的垂直方向的中心--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/openCamera"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"打开相机"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后是java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> sorgs.com.opencamera;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Button button = (Button) findViewById(R.id.openCamera);</div><div class="line"></div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">                intent.setAction(<span class="string">"android.media.action.IMAGE_CAPTUER"</span>);</div><div class="line">                intent.addCategory(<span class="string">"android.intent.category.DEFAULT"</span>);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后需要再配置清单里弄一下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"androd.media.action.IMAGE_CAPTURE"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161120191903552" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于书上是转到另一个页面，我是用真机，所以直接打开相机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先是&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向基础笔记—Android NDK开发4之Android studio NDK自动编译</title>
    <link href="http://sorgs.cn/post/16045/"/>
    <id>http://sorgs.cn/post/16045/</id>
    <published>2016-11-17T08:41:09.000Z</published>
    <updated>2019-08-15T01:29:03.848Z</updated>
    
    <content type="html"><![CDATA[<p>这部分就是最后的部分了，为什么要写Android studio呢。大家知道，eclipse 到了现在，已经不被Google支持了，所以现在最好的开发就是利用Android studio。虽然说，网上有很多类似的教程了。但是我都一一试过了，并不是太详细，还有些少许错误。所以，我在这里写出详细的过程，大家笑笑就好。但是新生我这个劝一句，最好做一遍，这个很重要。<br>我们用Android studio创建一个app工程，我这建立的是17。<br>切换到project模式。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102231512560" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后这个工程上右键，选择open module settings<br>然后配置环境</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102231737145" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>设置好了之后，我们去看看是否设置成功呢</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102232008070" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>确认之后，就该我们去写代码了。<br>为了方便，我直接把hello world的textview改为动了一下</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102232139525" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>之后我们在这里创建一个类</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102232255667" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>之后写下如下代码</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161103091946570" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>之后build一下工程</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102232639566" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后去查看时候生成这个文件</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161103092018479" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果有的话Terminal输入指令：<br>cd app/build/intermediates/classes/debug</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102232904083" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>再输入：<br>javah -jni sorgs.com.hellondk.NDKtest</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161103092133619" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>看到这个文件，就说明OK了。<br>然后在src/main下新建文件夹jni,把生成的.h文件移到jni文件夹下面去，新建一个c类随便取一个名字</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102235254303" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>一定不要选这个</p>
<p>写上这些代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sorgs_com_hellondk_NDKtest.h"</span>  </span></div><div class="line">  </div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_sorgs_com_hellondk_NDKtest_getString</span>  </span></div><div class="line">        <span class="params">(JNIEnv *env, jobject obj)</span>&#123;  </div><div class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">"you are successful!"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161103092531452" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后我们还需要去gradle.properties文件末尾添加android.useDeprecatedNdk=true</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102234249979" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>再然后</p>
<p>然后在app文件下得build.gradle -&gt;defaultConfig括号内添加如下代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ndk &#123;      </div><div class="line">   moduleName <span class="string">"test"</span>          <span class="comment">//生成的so名字，一定要和So的名称一致，这里就是test)  </span></div><div class="line">   abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span> <span class="comment">//输出指定三种abi体系结构下的so库，随便写一个就行，主要是看模拟器。也可以都写上&#125;</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161103092657528" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后再去主函数写代码了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161103094552444" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后build一下，去尝试运行看看效果</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161103094939454" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/%E8%B9%AD%E8%B9%AD%E8%B9%AD.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分就是最后的部分了，为什么要写Android studio呢。大家知道，eclipse 到了现在，已经不被Google支持了，所以现在最好的开发就是利用Android studio。虽然说，网上有很多类似的教程了。但是我都一一试过了，并不是太详细，还有些少许错误。所以，
    
    </summary>
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ndk" scheme="http://sorgs.cn/tags/ndk/"/>
    
      <category term="gcc" scheme="http://sorgs.cn/tags/gcc/"/>
    
      <category term="sdk" scheme="http://sorgs.cn/tags/sdk/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向基础笔记—Android NDK开发3之使用ndk-build工具手动编译</title>
    <link href="http://sorgs.cn/post/31148/"/>
    <id>http://sorgs.cn/post/31148/</id>
    <published>2016-11-17T08:35:10.000Z</published>
    <updated>2019-08-15T01:29:03.848Z</updated>
    
    <content type="html"><![CDATA[<p>做这个之前，必须把android.bat的环境配置进去</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102210522583" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后我们使用android list看看Android SDK种所有的SDK版本</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102210702755" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我在这里选择了Android-17<br>输入如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android create project -n NDKtest -p NDTtest -t android-17 -k com.sorgs.NDKtest -a MyActiviry</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102211258507" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个命令可以根据默认Activity文件名自动生成java文件，并生成AndroidMenifest.xml</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102211549703" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>之后我们在跟目录下建立一个文件夹jni。然后把C文件放进去。然后开始编写Android.mk<br>这里说明一下<br>ndk-build使用Android.mk和Application.mk作为脚本文件<br>Application.mk是可选的，是用来描述原生程序本身用到的一些特性。<br>Android.mk文件是工程的编译脚本，描述了编译原生程序所需的编译选项、头文件、源文件以及依赖库<br>所以我们这里暂时只需要编写Android.mk</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102213352962" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:14px;color:#ff9900;"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>LOCAL_PATH := $(call my-dir)  </div><div class="line">  </div><div class="line">include $(CLEAR_VARS)  </div><div class="line">  </div><div class="line">LOCAL_ARM_MODE := arm  </div><div class="line">LOCAL_MODULE    := NDKtest  </div><div class="line">LOCAL_SRC_FILES := NDKtest.c  </div><div class="line">include $(BUILD_EXECUTABLE)<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后把它也放到jni里面</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102213614997" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后我们到NDKtest的目录下，输入ndk-build<br>之后等待命令的完成。<br>完成之后会在libs/armeabi等一系列的文件夹里生成NDKtest可执行文件。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102213857188" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后我们把文件push到手机中去</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102220113139" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>想要运行它，就的给它权限。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102220527535" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102220536953" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>使用之前的 adb shell /data/NDKtest命令或者在adb shell里面使用./NDKtest都可以！</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102220630255" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102220630255" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>总结：<br>在这篇里面，难度不算太大。重要的是要会只要配置好环境，会一些基本的Linux命令就是OK的。剩下的就是多去思考了。比如我在成功之前，失败了很多次。善于思考才能解决问题。<br>最后给出下载的地方，大家可以参考：<br>链接：<a href="http://pan.baidu.com/s/1hsHjRik" target="_blank" rel="external">http://pan.baidu.com/s/1hsHjRik</a> 密码：uqvh</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做这个之前，必须把android.bat的环境配置进去&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;
    
    </summary>
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ndk" scheme="http://sorgs.cn/tags/ndk/"/>
    
      <category term="gcc" scheme="http://sorgs.cn/tags/gcc/"/>
    
      <category term="sdk" scheme="http://sorgs.cn/tags/sdk/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向基础笔记—Android NDK开发1环境的配置及介绍</title>
    <link href="http://sorgs.cn/post/3280/"/>
    <id>http://sorgs.cn/post/3280/</id>
    <published>2016-11-17T08:29:38.000Z</published>
    <updated>2019-08-15T01:29:03.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>有句话，叫做开发的能力决定逆向的能力。为了更好的去研究so，我整理了非虫大侠的书的NDK开发。把书中的老版本更新一下，并把不清楚的地方搞清楚。写一个NDK系类的基础教程。如有不对的地方，还请大神扶正。<br>虽然看起来这些很简单，但是实际动手去做</p>
</blockquote>
<p>分别为：<br>1.环境的配置<br>2.利用gcc编译器（交叉工具链）手动编译和Linux Ubuntu系统下的交叉工具链手动编译<br>3.使用ndk-build工具手动编译和.Android studio NDK编译</p>
<h1 id="一"><a href="#一" class="headerlink" title="一."></a>一.</h1><p>使用的系统 Windows10<br>工具：java version “1.8.0_60”<br>           NDK：android-ndk-r13<br>           Android studio 1.5.0<br>          SDK<br>Java的话，直接百度即可<br>NDK和Android studio给一个下的地方：一个安卓工具集合的网站：<a href="http://androiddevtools.cn/" target="_blank" rel="external">http://androiddevtools.cn/</a></p>
<p>使用的系统Linux ubuntu-16.04<br>工具：java version “1.8.0_60”<br>           NDK：android-ndk-r13<br>           SDK</p>
<h1 id="二-配置环境"><a href="#二-配置环境" class="headerlink" title="二.配置环境"></a>二.配置环境</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161031213820909" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>参照我的方式把SDK，JAVA，DNK的环境配置带环境变量中去。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161031214535583" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>成功的效果图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161031214610914" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>java的</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161031214704271" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其实Windows的环境是很好装的，只要是Linux，真是各种百度。<br>关于Java的话，请参考这里：<a href="http://blog.csdn.net/qq_24349189/article/details/53000869" target="_blank" rel="external">http://blog.csdn.net/qq_24349189/article/details/53000869</a><br>然后就是NDK环境<br>首先还是去给的网址把包下下来，然后我们放到Linux下面，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sorgs@sorgs-VirtualBox:$ sudo unzip android-ndk-r13-linux-x86_64.zip</div></pre></td></tr></table></figure></p>
<p>之后把环境配置进去<br>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sorgs@sorgs-VirtualBox:/home/tools$ sudo gedit /etc/profile</div></pre></td></tr></table></figure></p>
<p>写上这个</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102202056189" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sorgs@sorgs-VirtualBox:/home/tools$ sudo source /etc/profile</div></pre></td></tr></table></figure></p>
<p>使环境变量生效<br>之后我们来看看是否成功<br>可以输入make<br>和ndk-build</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102202045051" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>已经成功</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/c3a2cfb64cfa6899bf2b8c58a60524fc.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有句话，叫做开发的能力决定逆向的能力。为了更好的去研究so，我整理了非虫大侠的书的NDK开发。把书中的老版本更新一下，并把不清楚的地方搞清楚。写一个NDK系类的基础教程。如有不对的地方，还请大神扶正。&lt;br&gt;虽然看起来这些很简单，但是实际动手去做&lt;
    
    </summary>
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ndk" scheme="http://sorgs.cn/tags/ndk/"/>
    
      <category term="gcc" scheme="http://sorgs.cn/tags/gcc/"/>
    
      <category term="linux" scheme="http://sorgs.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向基础笔记—Android NDK开发2之Windows下的gcc手动编译（交叉连编译）和利Linux Ubuntu系统下的交叉工具链手动编译</title>
    <link href="http://sorgs.cn/post/33150/"/>
    <id>http://sorgs.cn/post/33150/</id>
    <published>2016-11-17T08:18:25.000Z</published>
    <updated>2019-08-15T01:29:03.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、交叉工具链"><a href="#一、交叉工具链" class="headerlink" title="一、交叉工具链"></a>一、交叉工具链</h1><p>这些工具都在NDK的路径下：E:\Android\android-ndk-r13\toolchains\arm-linux-androideabi-4.9\prebuilt\windows-x86_64\bin<br>这些工具的前缀均为arm-linux-androideabi，可以直接使用他们来编写NDK原生程序<br>Windows和Linux平台使用的gcc都是一样的，命令参数也是一样的：<br>arm-linux-androideabi-addr2line  //将程序地址转换为文件名和行号<br>arm-linux-androideabi-ar  // 建立、修改、提取归档文件<br>arm-linux-androideabi-as  //gas汇编器<br>arm-linux-androideabi-c++  //工具链中arm-linux-androideabi-g++.exe的一个拷贝<br>arm-linux-androideabi-c++filt  //连接器使用它过滤符号，防止重载函数冲突<br>arm-linux-androideabi-cpp  //C++程序编译工具<br>arm-linux-androideabi-g++  //C++程序编译工具<br>arm-linux-androideabi-gcc-4.9.x //工具链中arm-linux-androideabi-gcc.exe的一个拷贝<br>arm-linux-androideabi-gcc  //C程序编译工具<br>arm-linux-androideabi-gcov  //程序覆盖度测量工具，记录代码的执行路径<br>arm-linux-androideabi-gdb  //调试工具<br>arm-linux-androideabi-gprof  //程序性能测量工具<br>arm-linux-androideabi-ld  //连接器，用于生成可执行程序<br>arm-linux-androideabi-nm  //列出目标文件中的符号<br>arm-linux-androideabi-objcopy  //复制目标文件中的内容到另一种类型的目标文件中<br>arm-linux-androideabi-objdump  //输出目标文件的信息<br>arm-linux-androideabi-ranlib  //产生归档文件索引，并将其保存到这个归档文件中<br>arm-linux-androideabi-readelf  //显示elf格式可执行文件的信息<br>arm-linux-androideabi-run  //ARM程序模拟器<br>arm-linux-androideabi-size  //列出目标文件每一段的大小及总体的大小<br>arm-linux-androideabi-strings  //输出目标文件的可打印字符串<br>arm-linux-androideabi-strip  //去除目标文件中的符号信息<br>以上摘录之《Android软件安全与逆向分析》</p>
<h1 id="二、编写C-程序"><a href="#二、编写C-程序" class="headerlink" title="二、编写C++程序"></a>二、编写C++程序</h1><p>我这里习惯使用VS2012，大家可以按自己的习惯。记事本都可以。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101153603493" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </div><div class="line">       <span class="built_in">printf</span>(<span class="string">"Hello,you are successful ！"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三、编写makefile"><a href="#三、编写makefile" class="headerlink" title="三、编写makefile"></a>三、编写makefile</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161031225550739" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>注意：1.斜杠的方向（千万不要弄反了，这个很重要！！！）<br>     2.把我makefile中 的//以及后面的内容删除！<br>     3.一定记得先配置环境<br>最后给这个makefile文档</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">NDK_ROOT=E:/Android/android-ndk-r13  </div><div class="line">TOOLCHAINS_ROOT=$(NDK_ROOT)/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64  </div><div class="line">TOOLCHAINS_PREFIX=$(TOOLCHAINS_ROOT)/bin/arm-linux-androideabi  </div><div class="line">TOOLCHAINS_INCLUDE=$(TOOLCHAINS_ROOT)/lib/gcc/arm-linux-androideabi/4.9.x/include-fixed  </div><div class="line">  </div><div class="line">PLATFORM_ROOT=$(NDK_ROOT)/platforms/android-17/arch-arm  </div><div class="line">PLATFORM_INCLUDE=$(PLATFORM_ROOT)/usr/include  </div><div class="line">PLATFORM_LIB=$(PLATFORM_ROOT)/usr/lib  </div><div class="line">  </div><div class="line">MODULE_NAME=HelloNDK  </div><div class="line">RM=del  </div><div class="line">  </div><div class="line">FLAGS=-I$(TOOLCHAINS_INCLUDE) \  </div><div class="line">    -I$(PLATFORM_INCLUDE) \  </div><div class="line">    -L$(PLATFORM_LIB) \  </div><div class="line">    -nostdlib \  </div><div class="line">    -lgcc \  </div><div class="line">    -Bdynamic \  </div><div class="line">    -lc  </div><div class="line">  </div><div class="line">OBJS=$(MODULE_NAME).o \  </div><div class="line">    $(PLATFORM_LIB)/crtbegin_dynamic.o \  </div><div class="line">    $(PLATFORM_LIB)/crtend_android.o  </div><div class="line">  </div><div class="line">all:  </div><div class="line">    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) -c $(MODULE_NAME).c -o $(MODULE_NAME).o  </div><div class="line">    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) $(OBJS) -o $(MODULE_NAME)  </div><div class="line">clean:  </div><div class="line">    $(RM) *.o  </div><div class="line">install:  </div><div class="line">    adb push $(MODULE_NAME) /data/local/  </div><div class="line">    adb shell chmod 755 /data/local/$(MODULE_NAME)</div></pre></td></tr></table></figure>
<h1 id="四、编译"><a href="#四、编译" class="headerlink" title="四、编译"></a>四、编译</h1><p>我们把这些东西弄好了放到桌面上的文件夹gccNDKtest。<br>然后cmd命令打开这个文件夹<br>然后make<br>看到是这个样子，就说明没有问题了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101181021073" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>接下来，我们需要看效果，就需要一个Android的手机或者模拟器了。<br>依次输入</p>
<p>make install<br>adb shell /data/local/HelloNDK</p>
<p>就可以看到效果图了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101215510566" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="五、Linux"><a href="#五、Linux" class="headerlink" title="五、Linux"></a>五、Linux</h1><p>和Windows差不多，重点是环境需要配置好<br>我直接把Windows里面的C放进去，再编写makefile<br>makefile如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">NDK_ROOT=/home/tools/android-ndk-r13  </div><div class="line">TOOLCHAINS_ROOT=$(NDK_ROOT)/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64  </div><div class="line">TOOLCHAINS_PREFIX=$(TOOLCHAINS_ROOT)/bin/arm-linux-androideabi  </div><div class="line">TOOLCHAINS_INCLUDE=$(TOOLCHAINS_ROOT)/lib/gcc/arm-linux-androideabi/4.9.x/include-fixed  </div><div class="line">  </div><div class="line">PLATFORM_ROOT=$(NDK_ROOT)/platforms/android-17/arch-arm  </div><div class="line">PLATFORM_INCLUDE=$(PLATFORM_ROOT)/usr/include  </div><div class="line">PLATFORM_LIB=$(PLATFORM_ROOT)/usr/lib  </div><div class="line">  </div><div class="line">MODULE_NAME=HelloNDK  </div><div class="line">RM=rm -rf  </div><div class="line">  </div><div class="line">FLAGS=-I$(TOOLCHAINS_INCLUDE) \  </div><div class="line">    -I$(PLATFORM_INCLUDE) \  </div><div class="line">    -L$(PLATFORM_LIB) \  </div><div class="line">    -nostdlib \  </div><div class="line">    -lgcc \  </div><div class="line">    -Bdynamic \  </div><div class="line">    -lc  </div><div class="line">  </div><div class="line">OBJS=$(MODULE_NAME).o \  </div><div class="line">    $(PLATFORM_LIB)/crtbegin_dynamic.o \  </div><div class="line">    $(PLATFORM_LIB)/crtend_android.o  </div><div class="line">  </div><div class="line">all:  </div><div class="line">    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) -c $(MODULE_NAME).c -o $(MODULE_NAME).o  </div><div class="line">    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) $(OBJS) -o $(MODULE_NAME)  </div><div class="line">clean:  </div><div class="line">    $(RM) *.o  </div><div class="line">install:  </div><div class="line">    adb push $(MODULE_NAME) /data/local/  </div><div class="line">    adb shell chmod 755 /data/local/$(MODULE_NAME)</div></pre></td></tr></table></figure>
<p>然后放到Linux下面去，到这个文件的目录下make就OK的。<br>命令是</p>
<p>sorgs@sorgs-VirtualBox:/home/tools/gccNDKtest$ sudo make</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102203849529" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个就说明编译成功了。<br>因为我这Linux是虚拟机，所以不好用手机真是去测试<br>所以手续的测试就在Windows上测试的，效果和上面的一样。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>虽然看起来这很简单，但是实际上自己不去动手，永远不知道这点点东西来的多么艰辛，各种百度查。<br>其实这个还遗留了一个问题。本来说好的NDK用gcc编译，是可以编译C++的，但是我写了一个C++。不管怎么修改makefile都要报错。这个问题我查了很多资料，都没有结果。我在想等下，有空了，去问问我们的老师，看看能不能给出答案。如果可以的话，再回来更新，编写一个C++的代码尝试编译。<br>然后就是Linux，我的天啊。我之前都没有学过这个，然后为了写出来来尝试，才开始研究。各种报错，各种重装。<br>你不去动手，永远不知道这里面的辛酸和晚上连续几天熬夜到12点的汗水以及成功之后的喜悦。<br>所以说，不要看着简单，要实际去做做！<br>链接：<a href="http://pan.baidu.com/s/1boNj4IF" target="_blank" rel="external">http://pan.baidu.com/s/1boNj4IF</a> 密码：w4ec</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/5f1604f6f198619170536a950286921e.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、交叉工具链&quot;&gt;&lt;a href=&quot;#一、交叉工具链&quot; class=&quot;headerlink&quot; title=&quot;一、交叉工具链&quot;&gt;&lt;/a&gt;一、交叉工具链&lt;/h1&gt;&lt;p&gt;这些工具都在NDK的路径下：E:\Android\android-ndk-r13\toolchain
    
    </summary>
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
      <category term="ndk" scheme="http://sorgs.cn/tags/ndk/"/>
    
      <category term="gcc" scheme="http://sorgs.cn/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>Linux ubuntu的vbox和本机Windows文件共享以及Linux中的java环境配置</title>
    <link href="http://sorgs.cn/post/33593/"/>
    <id>http://sorgs.cn/post/33593/</id>
    <published>2016-11-17T08:12:37.000Z</published>
    <updated>2019-08-15T01:29:03.856Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>实验环境：本机Windows10<br>Vbox5.1.8 r111374<br>Linux：ubuntu</p>
</blockquote>
<h1 id="一、共享文件设置"><a href="#一、共享文件设置" class="headerlink" title="一、共享文件设置"></a>一、共享文件设置</h1><p>安装就不用说明了，安装完了需要再Linux把增强工具装好<br>安装完Linux之后，在Windows本机的E盘新建一个share文件夹<br>之后在VBOX里面设置挂在这个文件夹</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101212643116" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后打开Linux<br>在终端里面输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/shared   //新建一个文件夹</div><div class="line">sudo mount -t vboxsf share /home/shared  //把Windows的share</div></pre></td></tr></table></figure></p>
<p>文件夹加载到shared里来<br>需要注意的是：<br>1.shared和share不一样。不然会有如下错误：/sbin/mount.vboxsf: mounting failed with the error: Protocol error<br>2.每次开机都需要输入这命令<br>3.不想每次开机都输的话。我们接下来这样操作。<br>执行这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sorgs@sorgs-VirtualBox:~$ sudo nano /etc/rc.local</div></pre></td></tr></table></figure></p>
<p>然后在最后一行加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -t vboxsf share /home/shared</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161102115650696" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>意思就是开机就执行这句话<br>然后我们去放一个文件到本机的share里面，去Linux看看时候加载进去了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101213237509" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101213301203" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这就说明加载进去了</p>
<h1 id="二、java环境配置"><a href="#二、java环境配置" class="headerlink" title="二、java环境配置"></a>二、java环境配置</h1><p>设置之前需要先删一下系统原来自带的，不管有没有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@sorgs-VirtualBox:/home/sorgs# apt-get purge openjdk-\*</div></pre></td></tr></table></figure></p>
<p>确认：Y，等待一段时间后，卸载完成！<br>然后更具自己的系统去官网下一个jdk.gz<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>我是选择在本机上下好了，通过共享弄进去的。个人觉得方便。<br>然后提取出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@sorgs-VirtualBox:/mnt/shared# tar -xvf jdk-8u112-linux-64.gz -C /usr/local</div></pre></td></tr></table></figure></p>
<p>之后在使用 VI 打开 /etc/profile 文件，如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@sorgs-VirtualBox:/mnt/shared#  vi /etc/profile</div></pre></td></tr></table></figure></p>
<p>在文件的最后位置，写入 Java 的环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/local/jdk1.8.0_112</div><div class="line">PATH=$PATH:$HOME/bin:$JAVA_HOME/bin</div><div class="line">export JAVA_HOME</div><div class="line">export PATH</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101215116696" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>esc返回，输入 :wq 保存文件。<br>再分别输入一下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@sorgs-VirtualBox:/mnt/shared# update-alternatives --install &quot;/usr/bin/java&quot; &quot;java&quot; &quot;/usr/local/jdk1.8.0_112/bin/java&quot; 1</div><div class="line">root@sorgs-VirtualBox:/mnt/shared#  update-alternatives --install &quot;/usr/bin/javac&quot; &quot;javac&quot; &quot;/usr/local/jdk1.8.0_112/bin/javac&quot; 1</div><div class="line">root@sorgs-VirtualBox:/mnt/shared#  update-alternatives --install &quot;/usr/bin/javaws&quot; &quot;javaws&quot; &quot;/usr/local/jdk1.8.0_112/bin/javaws&quot; 1</div><div class="line">root@sorgs-VirtualBox:/mnt/shared# update-alternatives --set java /usr/local/jdk1.8.0_112/bin/java</div><div class="line">root@sorgs-VirtualBox:/mnt/shared# update-alternatives --set javac /usr/local/jdk1.8.0_112/bin/javac</div><div class="line">root@sorgs-VirtualBox:/mnt/shared# update-alternatives --set javaws /usr/local/jdk1.8.0_112/bin/javaws</div></pre></td></tr></table></figure></p>
<p>最后我们来测试看看：<br>java -version</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161101215226261" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这就说明已经配置成功了！</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/2f6ac9a2bf82cde2513579cd38dae4fc.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;实验环境：本机Windows10&lt;br&gt;Vbox5.1.8 r111374&lt;br&gt;Linux：ubuntu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、共享文件设置&quot;&gt;&lt;a href=&quot;#一、共享文件设置&quot; class=&quot;headerl
    
    </summary>
    
      <category term="java" scheme="http://sorgs.cn/categories/java/"/>
    
    
      <category term="linux" scheme="http://sorgs.cn/tags/linux/"/>
    
      <category term="windows" scheme="http://sorgs.cn/tags/windows/"/>
    
      <category term="java" scheme="http://sorgs.cn/tags/java/"/>
    
      <category term="文件共享" scheme="http://sorgs.cn/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向实例笔记—在so里对游戏的修改</title>
    <link href="http://sorgs.cn/post/47975/"/>
    <id>http://sorgs.cn/post/47975/</id>
    <published>2016-11-17T08:04:57.000Z</published>
    <updated>2019-08-15T01:29:03.851Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这里还是利用鬼哥的提供的样本，天天消联盟</p>
</blockquote>
<p>这里我就不玩了，直接AK看看。<br>这是一个移动的支付，直接搜索OnBillingFinish<br>来看看源码。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030203746079" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们从这里就很轻松知道了，关键就这这个paramInt。如果等于102或者104或者1001，我们就购买成功。<br>也就是说，我们在这if之前，给paramInt一个值也就是OK的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030204104893" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>像这样修改就是OK的。<br>我们今天的任务是从so来看看，那么继续跟入。<br>我们看到在if里面，有调用PopStar。我们过去看看。<br>在这个类的开始，有这个，也是个关键，先记住。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030204513393?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>说明，这里是调用的xinxin的so。<br>我们接着往下看看。<br>看到了关键的方法</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030204721942" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里看到了去掉的so，接下来我们去IDA里面看看了。<br>直接搜索我们刚刚调用。双击过去。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030204814521" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>找到关键的地方。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030204940008" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后双击过去看看。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030205435014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里我们就可以修改，鬼哥的教程也是在这里修改的。<br>可以直接把A41EE 这句改为mov R0，#FF也是可以的（我没有实验哈，有兴趣的可以自己去试试，理论上是可以的哈）<br>我们继续往下看<br>上面有个get去获取<br>那我们进去看看<br>F5之后，我们可以看到反正是返回了一个值，这个值就是我们要的。我们可以在这里动手脚</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030205935536" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030210102772" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里是一种方式，然后我们还看到有set，就是去设置金币。那我们去看看<br>同样F5之后，看到返回的东西</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030210220089" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>接下来使用无名侠的SH<br>依然使用仅加载的方式。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030215926209" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>改为255之后，我们使用两次道具之后</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161030215939535" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后就一直保持这个数据了。说明我们修改成功的</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/fdd39361bb85d874d27d291e19d94e95.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里还是利用鬼哥的提供的样本，天天消联盟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我就不玩了，直接AK看看。&lt;br&gt;这是一个移动的支付，直接搜索OnBillingFinish&lt;br&gt;来看看源码。&lt;/p&gt;
&lt;figure class=&quot;imag
    
    </summary>
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="so修改" scheme="http://sorgs.cn/tags/so%E4%BF%AE%E6%94%B9/"/>
    
      <category term="游戏" scheme="http://sorgs.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="IDA" scheme="http://sorgs.cn/tags/IDA/"/>
    
      <category term="反编译" scheme="http://sorgs.cn/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向实例笔记—初入so并还原分析出代码</title>
    <link href="http://sorgs.cn/post/64124/"/>
    <id>http://sorgs.cn/post/64124/</id>
    <published>2016-11-17T07:55:37.000Z</published>
    <updated>2019-08-15T01:29:03.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很久没有出基础教程了，这里做一个鬼哥的so的作业吧。很基础的东西，算是教学帖子吧。大牛路过吧。这里感谢鬼哥的apk和无名侠的软件</p>
</blockquote>
<p>首先我们打开鬼哥提供的apk看看。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029222034969?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其余没有发现什么，我们直接AK来看看吧。</p>
<p>直接看看Java的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle paramBundle)</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">super</span>.onCreate(paramBundle);  </div><div class="line">    setContentView(<span class="number">2130903040</span>);  </div><div class="line">    <span class="keyword">this</span>.tview = ((TextView)findViewById(<span class="number">2131230720</span>));  </div><div class="line">    <span class="keyword">this</span>.tview.setText(JniGg.ggPrintHello() + JniGg.VipLevel(<span class="number">5</span>));  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>我们发现往so里传入了一个很重要的参数5，这点是个关键。我们先记住。<br>接下来我们打开so的位置，拖入IDA了。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029222322607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>右键，打开文件路径-》打开文件位置，复制到桌面建一个test的文件夹。拖入IDA看看。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029222505174?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里，我喜欢先看看输出。（看个人习惯吧）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029222552268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里有个viplevel对吧，很明显了。<br>我们双击过去</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029223016285?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>几种等级都出来了，这个时候我们按下空格切换视图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029223158556?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里就非常的清晰了，对吧。<br>（这里还是需要懂得一些arm汇编知识的）</p>
<p>我们仔细分析下下。然后我写在了图上</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029223732018?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里就是和输入的数字有关<br>我整理出来的是这样的：<br>gold vip 1<br>silvery vip 2<br>copper vip 3<br>normal user other<br>分析完了，我们就知道该怎么修改了<br>那么方法一：<br>修改samli，就是我们之前看到的那个穿进去的参数了。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029224155384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这样汇编就OK了，但是我们今天是对so进行操作。<br>方法二：<br>PUSH    {R3,LR}<br>这个不能动，那我们就只有动第一个比较了。<br>剩下我们试试，so helper（无名侠大哥的作品）<br>拖进去，然后仅加载</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029230414535?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里最重点是指令长度了。其实我们利用00000C44减去00000C42就知道是2了。<br>这里已经改为了赋值，那么下面那个比较就没有用了，直接nop掉。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20161029230610442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后点击编译，去替换掉之前的so文件，记得名字要改为原来那个。</p>
<p>方法三就是把所有的比较改为Nop，就是执行每个比较，直接到后面的gold vip。这个大家就自己尝试一下下。<br>其实还有几种方法，有点思路，但是没去研究。<br>最后给出还原出来的函数（没完全还原，只还原这部分）</p>
<p><img src="http://img.blog.csdn.net/20161030111702929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/c1e175899395ee9736ad8f3103bcc185.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很久没有出基础教程了，这里做一个鬼哥的so的作业吧。很基础的东西，算是教学帖子吧。大牛路过吧。这里感谢鬼哥的apk和无名侠的软件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我们打开鬼哥提供的apk看看。&lt;/p&gt;
&lt;figure class=&quot;i
    
    </summary>
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="so修改" scheme="http://sorgs.cn/tags/so%E4%BF%AE%E6%94%B9/"/>
    
      <category term="IDA" scheme="http://sorgs.cn/tags/IDA/"/>
    
      <category term="反编译" scheme="http://sorgs.cn/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="破解" scheme="http://sorgs.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向实例笔记—手游中的内购破解（火柴人联盟最新版1.9.2 BB弹 ）</title>
    <link href="http://sorgs.cn/post/2575/"/>
    <id>http://sorgs.cn/post/2575/</id>
    <published>2016-11-16T14:53:25.000Z</published>
    <updated>2019-08-15T01:29:03.851Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近学到了一些内购的破解方式，就来试试手。然后找个了比较火爆的游戏BB弹，找个个没壳的就来练习。<br>这些东西都是大神写烂了的东西了，我这里只是写出我自己找不到方法的时候的思路。勿笑。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/%E8%B9%AD%E8%B9%AD%E8%B9%AD.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="一、BB弹"><a href="#一、BB弹" class="headerlink" title="一、BB弹"></a>一、BB弹</h1><p>BB弹的话比较简单，我们首先弄到模拟器上看看是什么支付。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906213930922?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们发现支付宝和话费都可以。<br>那说明我们有很多种方法去破解内购了。我们的目的就是取消就为购买！</p>
<p>我们先用支付宝的</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906214224462?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>该图为引用的。</p>
<p>我们直接搜索0x1771</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906214403253?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>把它改为0x1771 -&gt; :sswitch_0  就行了。</p>
<p>然后再来试试话费的，我们直接所搜索paysuccess</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906214732801?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>分别点进去看看</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">.class public interface abstract Lcn/egame/terminal/paysdk/EgamePayListener;  </div><div class="line">.super Ljava/lang/Object;  </div><div class="line">.source "EgamePayListener.java"  </div><div class="line">  </div><div class="line">  </div><div class="line"># virtual methods  </div><div class="line">.method public abstract payCancel(Ljava/util/Map;)V  </div><div class="line">    .annotation system Ldalvik/annotation/Signature;  </div><div class="line">        value = &#123;  </div><div class="line">            "(",  </div><div class="line">            "Ljava/util/Map",  </div><div class="line">            "&lt;",  </div><div class="line">            "Ljava/lang/String;",  </div><div class="line">            "Ljava/lang/String;",  </div><div class="line">            "&gt;;)V"  </div><div class="line">        &#125;  </div><div class="line">    .end annotation  </div><div class="line">.end method  </div><div class="line">  </div><div class="line">.method public abstract payFailed(Ljava/util/Map;I)V  </div><div class="line">    .annotation system Ldalvik/annotation/Signature;  </div><div class="line">        value = &#123;  </div><div class="line">            "(",  </div><div class="line">            "Ljava/util/Map",  </div><div class="line">            "&lt;",  </div><div class="line">            "Ljava/lang/String;",  </div><div class="line">            "Ljava/lang/String;",  </div><div class="line">            "&gt;;I)V"  </div><div class="line">        &#125;  </div><div class="line">    .end annotation  </div><div class="line">.end method  </div><div class="line">  </div><div class="line">.method public abstract paySuccess(Ljava/util/Map;)V  </div><div class="line">    .annotation system Ldalvik/annotation/Signature;  </div><div class="line">        value = &#123;  </div><div class="line">            "(",  </div><div class="line">            "Ljava/util/Map",  </div><div class="line">            "&lt;",  </div><div class="line">            "Ljava/lang/String;",  </div><div class="line">            "Ljava/lang/String;",  </div><div class="line">            "&gt;;)V"  </div><div class="line">        &#125;  </div><div class="line">    .end annotation  </div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>显然看不出太多的信息<br>第二处</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">.class Lcom/zplay/bbtan/plug/EgamePlug$2$1;  </div><div class="line">.super Ljava/lang/Object;  </div><div class="line">.source "EgamePlug.java"  </div><div class="line">  </div><div class="line"># interfaces  </div><div class="line">.implements Lcn/egame/terminal/paysdk/EgamePayListener;  </div><div class="line">  </div><div class="line">  </div><div class="line"># annotations  </div><div class="line">.annotation system Ldalvik/annotation/EnclosingMethod;  </div><div class="line">    value = Lcom/zplay/bbtan/plug/EgamePlug$2;-&gt;run()V  </div><div class="line">.end annotation  </div><div class="line">  </div><div class="line">.annotation system Ldalvik/annotation/InnerClass;  </div><div class="line">    accessFlags = 0x0  </div><div class="line">    name = null  </div><div class="line">.end annotation  </div><div class="line">  </div><div class="line">  </div><div class="line"># instance fields  </div><div class="line">.field final synthetic this$1:Lcom/zplay/bbtan/plug/EgamePlug$2;  </div><div class="line">  </div><div class="line">  </div><div class="line"># direct methods  </div><div class="line">.method constructor &lt;init&gt;(Lcom/zplay/bbtan/plug/EgamePlug$2;)V  </div><div class="line">    .locals 0  </div><div class="line">  </div><div class="line">    .prologue  </div><div class="line">    .line 1  </div><div class="line">    iput-object p1, p0, Lcom/zplay/bbtan/plug/EgamePlug$2$1;-&gt;this$1:Lcom/zplay/bbtan/plug/EgamePlug$2;  </div><div class="line">  </div><div class="line">    .line 79  </div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V  </div><div class="line">  </div><div class="line">    return-void  </div><div class="line">.end method  </div><div class="line">  </div><div class="line">  </div><div class="line"># virtual methods  </div><div class="line">.method public paySuccess(Ljava/util/Map;)V  </div><div class="line">    .locals 2  </div><div class="line">    .param p1, "params"    # Ljava/util/Map;  </div><div class="line">  </div><div class="line">    .prologue  </div><div class="line">    .line 90  </div><div class="line">    sget-object v0, Lcom/dubo/android/JniMsgType;-&gt;RechargeFail:Lcom/dubo/android/JniMsgType;  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v0&#125;, Lcom/dubo/android/JniMsgType;-&gt;ordinal()I  </div><div class="line">  </div><div class="line">    move-result v0  </div><div class="line">  </div><div class="line">    iget-object v1, p0, Lcom/zplay/bbtan/plug/EgamePlug$2$1;-&gt;this$1:Lcom/zplay/bbtan/plug/EgamePlug$2;  </div><div class="line">  </div><div class="line">    # getter for: Lcom/zplay/bbtan/plug/EgamePlug$2;-&gt;this$0:Lcom/zplay/bbtan/plug/EgamePlug;  </div><div class="line">    invoke-static &#123;v1&#125;, Lcom/zplay/bbtan/plug/EgamePlug$2;-&gt;access$0(Lcom/zplay/bbtan/plug/EgamePlug$2;)Lcom/zplay/bbtan/plug/EgamePlug;  </div><div class="line">  </div><div class="line">    move-result-object v1  </div><div class="line">  </div><div class="line">    # getter for: Lcom/zplay/bbtan/plug/EgamePlug;-&gt;_sku:Ljava/lang/String;  </div><div class="line">    invoke-static &#123;v1&#125;, Lcom/zplay/bbtan/plug/EgamePlug;-&gt;access$1(Lcom/zplay/bbtan/plug/EgamePlug;)Ljava/lang/String;  </div><div class="line">  </div><div class="line">    move-result-object v1  </div><div class="line">  </div><div class="line">    invoke-static &#123;v0, v1&#125;, Lcom/dubo/android/PlatformMessage;-&gt;SendPlatformMessage(ILjava/lang/String;)V  </div><div class="line">  </div><div class="line">    .line 91  </div><div class="line">    return-void  </div><div class="line">.end method  </div><div class="line">  </div><div class="line">.method public payFailed(Ljava/util/Map;I)V  </div><div class="line">    .locals 2  </div><div class="line">    .param p1, "params"    # Ljava/util/Map;  </div><div class="line">    .param p2, "errorInt"    # I  </div><div class="line">  </div><div class="line">    .prologue  </div><div class="line">    .line 86  </div><div class="line">    sget-object v0, Lcom/dubo/android/JniMsgType;-&gt;RechargeFail:Lcom/dubo/android/JniMsgType;  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v0&#125;, Lcom/dubo/android/JniMsgType;-&gt;ordinal()I  </div><div class="line">  </div><div class="line">    move-result v0  </div><div class="line">  </div><div class="line">    iget-object v1, p0, Lcom/zplay/bbtan/plug/EgamePlug$2$1;-&gt;this$1:Lcom/zplay/bbtan/plug/EgamePlug$2;  </div><div class="line">  </div><div class="line">    # getter for: Lcom/zplay/bbtan/plug/EgamePlug$2;-&gt;this$0:Lcom/zplay/bbtan/plug/EgamePlug;  </div><div class="line">    invoke-static &#123;v1&#125;, Lcom/zplay/bbtan/plug/EgamePlug$2;-&gt;access$0(Lcom/zplay/bbtan/plug/EgamePlug$2;)Lcom/zplay/bbtan/plug/EgamePlug;  </div><div class="line">  </div><div class="line">    move-result-object v1  </div><div class="line">  </div><div class="line">    # getter for: Lcom/zplay/bbtan/plug/EgamePlug;-&gt;_sku:Ljava/lang/String;  </div><div class="line">    invoke-static &#123;v1&#125;, Lcom/zplay/bbtan/plug/EgamePlug;-&gt;access$1(Lcom/zplay/bbtan/plug/EgamePlug;)Ljava/lang/String;  </div><div class="line">  </div><div class="line">    move-result-object v1  </div><div class="line">  </div><div class="line">    invoke-static &#123;v0, v1&#125;, Lcom/dubo/android/PlatformMessage;-&gt;SendPlatformMessage(ILjava/lang/String;)V  </div><div class="line">  </div><div class="line">    .line 87  </div><div class="line">    return-void  </div><div class="line">.end method  </div><div class="line">  </div><div class="line">.method public payCancel(Ljava/util/Map;)V  </div><div class="line">    .locals 2  </div><div class="line">    .param p1, "params"    # Ljava/util/Map;  </div><div class="line">  </div><div class="line">    .prologue  </div><div class="line">    .line 82  </div><div class="line">    sget-object v0, Lcom/dubo/android/JniMsgType;-&gt;Recharge:Lcom/dubo/android/JniMsgType;  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v0&#125;, Lcom/dubo/android/JniMsgType;-&gt;ordinal()I  </div><div class="line">  </div><div class="line">    move-result v0  </div><div class="line">  </div><div class="line">    iget-object v1, p0, Lcom/zplay/bbtan/plug/EgamePlug$2$1;-&gt;this$1:Lcom/zplay/bbtan/plug/EgamePlug$2;  </div><div class="line">  </div><div class="line">    # getter for: Lcom/zplay/bbtan/plug/EgamePlug$2;-&gt;this$0:Lcom/zplay/bbtan/plug/EgamePlug;  </div><div class="line">    invoke-static &#123;v1&#125;, Lcom/zplay/bbtan/plug/EgamePlug$2;-&gt;access$0(Lcom/zplay/bbtan/plug/EgamePlug$2;)Lcom/zplay/bbtan/plug/EgamePlug;  </div><div class="line">  </div><div class="line">    move-result-object v1  </div><div class="line">  </div><div class="line">    # getter for: Lcom/zplay/bbtan/plug/EgamePlug;-&gt;_sku:Ljava/lang/String;  </div><div class="line">    invoke-static &#123;v1&#125;, Lcom/zplay/bbtan/plug/EgamePlug;-&gt;access$1(Lcom/zplay/bbtan/plug/EgamePlug;)Ljava/lang/String;  </div><div class="line">  </div><div class="line">    move-result-object v1  </div><div class="line">  </div><div class="line">    invoke-static &#123;v0, v1&#125;, Lcom/dubo/android/PlatformMessage;-&gt;SendPlatformMessage(ILjava/lang/String;)V  </div><div class="line">  </div><div class="line">    .line 83  </div><div class="line">    return-void  </div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>这里就很关键了。这个看起来眼花的话，我们看看Java的</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906214941909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们惊奇的发现，这几个成功，取消和失败的代码只有一处不同。</p>
<p>方法一：<br>那么我们就可以把取消的RechargeFail换成Recharge就OK了。</p>
<p>方法二：<br>我们可以把paySuccess和payCancel的函数名调换。也就说说，我们点了取消，却调用的是paySuccess里面的代码。OK。BB弹就简单的破解了。</p>
<h1 id="二、火柴人联盟"><a href="#二、火柴人联盟" class="headerlink" title="二、火柴人联盟"></a>二、火柴人联盟</h1><p>破解BB弹之后，我本以为内购破解起来很简单。也很好玩，然后逛吾爱的时候，看到一篇破解火柴人的帖子。我也就去下了个官方版本去试试破解。（版本比帖子的高，帖子地址：<a href="http://www.52pojie.cn/thread-522841-1-1.html）" target="_blank" rel="external">http://www.52pojie.cn/thread-522841-1-1.html）</a></p>
<p>这不是重点，重点是。这个游戏在模拟器上打不开。我也不知道为什么，直接反编译。</p>
<p>发现了这个游戏的购买方式很多，移动，电信，联通，支付宝都有。然后还是按照之前破解BB弹的方式去破解。</p>
<p>却发现根本不行。把取消的RechargeFail换成Recharge，不行</p>
<p>把支付宝的代码换掉也不行。</p>
<p>于是认真参考了刚刚那个帖子，发现很多代码已经被原作者改了。那就只有自己研究了</p>
<p>这里就是重点了，我来说说我自己的思路。后来发现这个游戏坑爹的只能移动购买。</p>
<p>首先是住入口去看看<br>然后在这个函数去看看移动购买的函数。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906215959361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后点过去看看，发现信息不是太多。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">.<span class="function">method <span class="keyword">private</span> <span class="title">payInYidong</span><span class="params">()</span>V  </span></div><div class="line">    .locals 6  </div><div class="line">  </div><div class="line">    .prologue  </div><div class="line">    <span class="keyword">const</span>/4 v1, 0x1  </div><div class="line">  </div><div class="line">    .line 735  </div><div class="line">    sget v0, Lcom/DBGame/DiabloLOL/DiabloLOL;-&gt;sCMCC_OPEN:I  </div><div class="line">  </div><div class="line">    <span class="keyword">if</span>-nez v0, :cond_0  </div><div class="line">  </div><div class="line">    .line <span class="number">736</span>  </div><div class="line">    <span class="keyword">const</span>-string v0, <span class="string">"\u6b63\u5728\u5904\u7406,\u8bf7\u7a0d\u540e....."</span>  </div><div class="line">  </div><div class="line">    invoke-<span class="keyword">static</span> &#123;v0&#125;, Lcom/DBGame/Common/BLHelper;-&gt;showShieldLayer(Ljava/lang/String;)V  </div><div class="line">  </div><div class="line">    .line <span class="number">738</span>  </div><div class="line">    :cond_0  </div><div class="line">    iget-object v0, p0, Lcom/DBGame/DiabloLOL/DiabloLOL;-&gt;PAY_CODE_MM:[Ljava/lang/String;  </div><div class="line">  </div><div class="line">    iget v2, p0, Lcom/DBGame/DiabloLOL/DiabloLOL;-&gt;mPayIndex:I  </div><div class="line">  </div><div class="line">    aget-object v3, v0, v2  </div><div class="line">  </div><div class="line">    <span class="keyword">const</span>/<span class="number">4</span> v4, <span class="number">0x0</span>  </div><div class="line">  </div><div class="line">    iget-object v5, p0, Lcom/DBGame/DiabloLOL/DiabloLOL;-&gt;payCallback:Lcn/cmgame/billing/api/GameInterface$IPayCallback;  </div><div class="line">  </div><div class="line">    move-object v0, p0  </div><div class="line">  </div><div class="line">    move v2, v1  </div><div class="line">  </div><div class="line">    invoke-<span class="keyword">static</span>/range &#123;v0 .. v5&#125;, Lcn/cmgame/billing/api/GameInterface;-&gt;doBilling(Landroid/content/Context;ZZLjava/lang/String;Ljava/lang/String;Lcn/cmgame/billing/api/GameInterface$IPayCallback;)V  </div><div class="line">  </div><div class="line">    .line <span class="number">739</span>  </div><div class="line">    <span class="keyword">return</span>-<span class="keyword">void</span>  </div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>但是我们好像发现了payCallback这个东西。感觉又价值。我们搜索看看。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906220334808?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>发现了两处，有用的是第一处的。<br>于是我们过去看看</p>
<p>这个时候我们就看出来了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.DBGame.DiabloLOL;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> cn.cmgame.billing.api.GameInterface.IPayCallback;  </div><div class="line"><span class="keyword">import</span> com.DBGame.Common.BLHelper;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiabloLOL</span>$4  </span></div><div class="line">  <span class="keyword">implements</span> <span class="title">GameInterface</span>.<span class="title">IPayCallback</span>  </div><div class="line">&#123;  </div><div class="line">  DiabloLOL$<span class="number">4</span>(DiabloLOL paramDiabloLOL) &#123;&#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(<span class="keyword">int</span> paramInt, String paramString, Object paramObject)</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">switch</span> (paramInt)  </div><div class="line">    &#123;  </div><div class="line">    <span class="keyword">default</span>:   </div><div class="line">      <span class="keyword">new</span> StringBuilder().append(<span class="string">"购买道具：["</span>).append(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>.PAY_NAME[DiabloLOL.access$<span class="number">800</span>(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>)]).append(<span class="string">"] 取消！"</span>).toString();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span> (;;)  </div><div class="line">    &#123;  </div><div class="line">      BLHelper.closeShieldLayer();  </div><div class="line">      <span class="keyword">return</span>;  </div><div class="line">      <span class="keyword">if</span> (!<span class="string">"10"</span>.equals(paramObject.toString()))  </div><div class="line">      &#123;  </div><div class="line">        <span class="keyword">new</span> StringBuilder().append(<span class="string">"购买道具：["</span>).append(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>.PAY_NAME[DiabloLOL.access$<span class="number">800</span>(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>)]).append(<span class="string">"] 成功！"</span>).toString();  </div><div class="line">        BLHelper.purchaseComplete(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>.PRO_ID_Str[DiabloLOL.access$<span class="number">800</span>(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>)], <span class="number">1</span>);  </div><div class="line">        <span class="keyword">continue</span>;  </div><div class="line">        <span class="keyword">new</span> StringBuilder().append(<span class="string">"购买道具：["</span>).append(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>.PAY_NAME[DiabloLOL.access$<span class="number">800</span>(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>)]).append(<span class="string">"] 失败！"</span>).toString();  </div><div class="line">      &#125;  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就说packed-switch p1, :pswitch_data_0，然后pswitch_data_0就购买成功。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160906220522259?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>直接来个goto大发。OK了<br>教程就到这里了，本破解只为学习交流。</p>
<p>提供样本<br>BB弹：<a href="https://yunpan.cn/cMN8KD5h2IUg2" target="_blank" rel="external">https://yunpan.cn/cMN8KD5h2IUg2</a>  访问密码 9456<br>火柴人去官网下就是了<br>成本：<br>BB弹：<a href="https://yunpan.cn/cM4jkAt4u7m5n" target="_blank" rel="external">https://yunpan.cn/cM4jkAt4u7m5n</a>  访问密码 5c1b<br>火柴人：<a href="https://yunpan.cn/cMN89LIBLqjPq" target="_blank" rel="external">https://yunpan.cn/cMN89LIBLqjPq</a>  访问密码 67a6</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/d6d81702746eeb383e5776eeb8acc46e.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近学到了一些内购的破解方式，就来试试手。然后找个了比较火爆的游戏BB弹，找个个没壳的就来练习。&lt;br&gt;这些东西都是大神写烂了的东西了，我这里只是写出我自己找不到方法的时候的思路。勿笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure clas
    
    </summary>
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="游戏" scheme="http://sorgs.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="破解" scheme="http://sorgs.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="支付" scheme="http://sorgs.cn/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向实例笔记—同步家教王及其升级版的破解</title>
    <link href="http://sorgs.cn/post/40324/"/>
    <id>http://sorgs.cn/post/40324/</id>
    <published>2016-11-16T14:45:30.000Z</published>
    <updated>2019-08-15T01:29:03.850Z</updated>
    
    <content type="html"><![CDATA[<p>一朋友让我来破解下一软件，我拿来一看是这玩意。我以为很难，结果发现没壳。兴趣就来了，弄了一天，就弄出来了。这里把过程和思路分享一下。其实很简单，大神一看就知道。因为这个没加壳，只是加了混淆的。<br>这算是我第一次破解玩玩整整的apk了。<br>然后我们就开始吧。</p>
<h1 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h1><p>这次我用的是AndroidKiller，感觉很不错的样子<br>然后就是我每次都要用的蓝叠</p>
<h1 id="二、同步家教王"><a href="#二、同步家教王" class="headerlink" title="二、同步家教王"></a>二、同步家教王</h1><h2 id="1-看情况"><a href="#1-看情况" class="headerlink" title="1.看情况"></a>1.看情况</h2><p>老规矩，还是先拖蓝叠看看情况</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901110124258?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901110131602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>随便输了123，出现了激活码错误。我们记下来</p>
<h2 id="2-反编译"><a href="#2-反编译" class="headerlink" title="2.反编译"></a>2.反编译</h2><p>这个就不多说了，前面说的够多了。直接拖进去，反编译就OK。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901110418650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h2><p>我们先去string.xml中没有信息，然后转码搜索激活码错误</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901110609042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们跳过去，看看源码。右键，查看-查看源码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&lt;span style="font-size:14px;"&gt;package com.school.app.activity.login;  </div><div class="line">  </div><div class="line">import android.os.Handler;  </div><div class="line">import android.os.Message;  </div><div class="line">import android.widget.Button;  </div><div class="line">import android.widget.EditText;  </div><div class="line">import android.widget.TextView;  </div><div class="line">import com.school.app.utils.SharedPreHandler;  </div><div class="line">  </div><div class="line">class LoginActivity$3  </div><div class="line">  extends Handler  </div><div class="line">&#123;  </div><div class="line">  LoginActivity$3(LoginActivity paramLoginActivity, String paramString) &#123;&#125;  </div><div class="line">    </div><div class="line">  public void handleMessage(Message paramMessage)  </div><div class="line">  &#123;  </div><div class="line">    try  </div><div class="line">    &#123;  </div><div class="line">      if (paramMessage.obj != null)  </div><div class="line">      &#123;  </div><div class="line">        paramMessage = ((String)paramMessage.obj).split("&amp;");  </div><div class="line">        if (paramMessage[0].equals("yes"))  </div><div class="line">        &#123;  </div><div class="line">          SharedPreHandler.getShared().setSharedPreKey("activation_code", this.val$text);  </div><div class="line">          SharedPreHandler.getShared().setSharedPreKey("activation_deviceId", LoginActivity.access$1(this.this$0));  </div><div class="line">          SharedPreHandler.getShared().setSharedPreKey("activation_model", LoginActivity.access$2(this.this$0));  </div><div class="line">          if (paramMessage[1].equals("-1")) &#123;&#125;  </div><div class="line">          for (paramMessage = "激活成功";; paramMessage = String.format(LoginActivity.access$3(this.this$0), new Object[] &#123; paramMessage[1], paramMessage[2] &#125;))  </div><div class="line">          &#123;  </div><div class="line">            SharedPreHandler.getShared().setSharedPreKey("activation_msg", paramMessage);  </div><div class="line">            LoginActivity.access$4(this.this$0);  </div><div class="line">            this.this$0.finish();  </div><div class="line">            return;  </div><div class="line">          &#125;  </div><div class="line">        &#125;  </div><div class="line">      &#125;  </div><div class="line">      return;  </div><div class="line">    &#125;  </div><div class="line">    catch (Exception paramMessage)  </div><div class="line">    &#123;  </div><div class="line">      paramMessage.printStackTrace();  </div><div class="line">      this.this$0.title.setText("激活码错误");  </div><div class="line">      this.this$0.back.setVisibility(0);  </div><div class="line">      this.this$0.exit.setVisibility(0);  </div><div class="line">      this.this$0.yes.setVisibility(8);  </div><div class="line">      this.this$0.clear.setVisibility(8);  </div><div class="line">      this.this$0.edit.setVisibility(8);  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">&#125;  </div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>我们可以很容易的看到激活码出错的字样。再来分析一下java代码。<br>我们发现激活码错误并没有跳转到这里，但是之前的代码却有个 :cond_1跳转这里来。所以我们明显知道是加了混淆的。<br>那我们只有从激活成功去看看下手了。<br>再次搜索</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901111256279?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>发现有两处<br>刚刚这出看过了，我们去看看另一处的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.school.app.service;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> android.app.Service;  </div><div class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.Handler;  </div><div class="line"><span class="keyword">import</span> android.os.IBinder;  </div><div class="line"><span class="keyword">import</span> android.os.Message;  </div><div class="line"><span class="keyword">import</span> android.widget.Toast;  </div><div class="line"><span class="keyword">import</span> com.school.app.activity.login.LoginActivity;  </div><div class="line"><span class="keyword">import</span> com.school.app.utils.CommTool;  </div><div class="line"><span class="keyword">import</span> com.school.app.utils.SharedPreHandler;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeCountService</span>  </span></div><div class="line">  <span class="keyword">extends</span> <span class="title">Service</span>  </div><div class="line">&#123;  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> sMinute = <span class="number">1L</span>;  </div><div class="line">  <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()  </div><div class="line">  &#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message paramAnonymousMessage)</span>  </span></div><div class="line">    &#123;  </div><div class="line">      <span class="keyword">try</span>  </div><div class="line">      &#123;  </div><div class="line">        <span class="keyword">if</span> ((paramAnonymousMessage.obj != <span class="keyword">null</span>) &amp;&amp; (((String)paramAnonymousMessage.obj).contains(<span class="string">"stop"</span>)))  </div><div class="line">        &#123;  </div><div class="line">          SharedPreHandler.getShared().setSharedPreKey(<span class="string">"activation_code"</span>, <span class="string">""</span>);  </div><div class="line">          SharedPreHandler.getShared().setSharedPreKey(<span class="string">"activation_msg"</span>, <span class="string">""</span>);  </div><div class="line">          paramAnonymousMessage = <span class="keyword">new</span> Intent();  </div><div class="line">          paramAnonymousMessage.setFlags(<span class="number">268435456</span>);  </div><div class="line">          paramAnonymousMessage.setClass(TimeCountService.<span class="keyword">this</span>, LoginActivity.class);  </div><div class="line">          TimeCountService.<span class="keyword">this</span>.startActivity(paramAnonymousMessage);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">      &#125;  </div><div class="line">      <span class="keyword">catch</span> (Exception paramAnonymousMessage)  </div><div class="line">      &#123;  </div><div class="line">        paramAnonymousMessage.printStackTrace();  </div><div class="line">      &#125;  </div><div class="line">    &#125;  </div><div class="line">  &#125;;  </div><div class="line">  <span class="keyword">private</span> MyReceiver myReceiver;  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">long</span> time;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestLoginInfo</span><span class="params">()</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">if</span> (CommTool.isNetworkAvailable(<span class="keyword">this</span>))  </div><div class="line">    &#123;  </div><div class="line">      String str = SharedPreHandler.getShared().getSharedStrPreKey(<span class="string">"activation_code"</span>, <span class="string">""</span>);  </div><div class="line">      CommTool.getActivationCode(SharedPreHandler.getShared().getSharedStrPreKey(<span class="string">"activation_deviceId"</span>, <span class="string">""</span>), SharedPreHandler.getShared().getSharedStrPreKey(<span class="string">"activation_model"</span>, <span class="string">""</span>), str, <span class="keyword">this</span>.mHandler);  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopTimeCountService</span><span class="params">()</span>  </span></div><div class="line">  &#123;  </div><div class="line">    Intent localIntent = <span class="keyword">new</span> Intent();  </div><div class="line">    localIntent.setClass(<span class="keyword">this</span>, TimeCountService.class);  </div><div class="line">    stopService(localIntent);  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent paramIntent)</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">super</span>.onCreate();  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">super</span>.onDestroy();  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.myReceiver != <span class="keyword">null</span>) &#123;  </div><div class="line">      unregisterReceiver(<span class="keyword">this</span>.myReceiver);  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent paramIntent, <span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2)</span>  </span></div><div class="line">  &#123;  </div><div class="line">    String str = SharedPreHandler.getShared().getSharedStrPreKey(<span class="string">"activation_msg"</span>, <span class="string">""</span>);  </div><div class="line">    <span class="keyword">if</span> ((!str.equals(<span class="string">""</span>)) &amp;&amp; (!str.equals(<span class="string">"激活成功"</span>))) &#123;  </div><div class="line">      Toast.makeText(<span class="keyword">this</span>, str, <span class="number">1</span>).show();  </div><div class="line">    &#125;  </div><div class="line">    requestLoginInfo();  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(paramIntent, paramInt1, paramInt2);  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span>  </span></div><div class="line">    <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span>  </div><div class="line">  &#123;  </div><div class="line">    MyReceiver() &#123;&#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context paramContext, Intent paramIntent)</span> </span>&#123;&#125;  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的话，我们还可以清晰看到激活的只是一个判断，然后Toast出来的，那我们去修改前面那一处的跳转试试。<br>在研究一下之前的源码，发现很混乱。但是明确知道，有个地方会跳转来验证。<br>的确很混乱，我研究了半天，才在这个地方破解出来。这个不写出出来这个方法，因为我自己也不是太清楚。我是自己不清楚，就绝不误人子弟的，这里大家可以自行尝试。<br>这里给大家就说另一个简单点的。我想起来wnagzihxain大神写的移动恶意APP分析的心得分享<br>于是想到了这个思路。<br>从入口去看看</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901134008546?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其实这个工具挺好的，直接把入口写这了，都不用我们去AndroidManifest.xml里面找了<br>好吧，直接点过。看看源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.school.app.activity;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.support.v4.app.FragmentActivity;  </div><div class="line"><span class="keyword">import</span> com.school.app.activity.login.LoginActivity;  </div><div class="line"><span class="keyword">import</span> com.school.app.service.TimeCountService;  </div><div class="line"><span class="keyword">import</span> com.school.app.utils.SharedPreHandler;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span>  </span></div><div class="line">  <span class="keyword">extends</span> <span class="title">FragmentActivity</span>  </div><div class="line">&#123;  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startCountTimeService</span><span class="params">()</span>  </span></div><div class="line">  &#123;  </div><div class="line">    Intent localIntent = <span class="keyword">new</span> Intent();  </div><div class="line">    localIntent.setClass(<span class="keyword">this</span>, TimeCountService.class);  </div><div class="line">    startService(localIntent);  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActivationCode</span><span class="params">()</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">if</span> (SharedPreHandler.getShared().getSharedStrPreKey(<span class="string">"activation_code"</span>, <span class="string">""</span>).equals(<span class="string">""</span>))  </div><div class="line">    &#123;  </div><div class="line">      Intent localIntent = <span class="keyword">new</span> Intent();  </div><div class="line">      localIntent.setClass(<span class="keyword">this</span>, LoginActivity.class);  </div><div class="line">      startActivityForResult(localIntent, <span class="number">10085</span>);  </div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">    &#125;  </div><div class="line">    startCountTimeService();  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2, Intent paramIntent)</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">if</span> ((paramInt1 == <span class="number">10085</span>) &amp;&amp; (paramInt2 == <span class="number">10086</span>)) &#123;  </div><div class="line">      finish();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">super</span>.onActivityResult(paramInt1, paramInt2, paramIntent);  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle paramBundle)</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">super</span>.onCreate(paramBundle);  </div><div class="line">    setContentView(<span class="number">2130903040</span>);  </div><div class="line">    isActivationCode();  </div><div class="line">  &#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">super</span>.onRestart();  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>仔细一看，这不太简单了么。大概意思就是跳过去验证。这个时候，我们想到了，如果我们不去验证，不就完了么。<br>有了思路，就直接上手，找到地方。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901134535284?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h2><p>这里就不多说了，修改完了保存。打开就直接没有验证了。</p>
<h1 id="三、学习平台-综合版"><a href="#三、学习平台-综合版" class="headerlink" title="三、学习平台(综合版)"></a>三、学习平台(综合版)</h1><p>这个怎么说呢，算我是投机取巧吧。因为就上上面那个的升级版。更复杂。我估计要是没有前面那个，后面这个我也许还不能弄出来呢。害羞<br>同样找到跳转验证的地方，给修改掉。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901141538109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160901141610734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>还是改为nez就OK了</p>
<p>此处，没有太多的技术含量。写这个的主要目的一是记记自己第一次破解完整的apk，然后就是写点换个思路的方式。</p>
<p>最后给出两个apk的下载地址：</p>
<p><a href="https://yunpan.cn/cMeIDvXGmzBjP" target="_blank" rel="external">https://yunpan.cn/cMeIDvXGmzBjP</a>  访问密码 1603</p>
<p><a href="https://yunpan.cn/cMeIpjDyebQPw" target="_blank" rel="external">https://yunpan.cn/cMeIpjDyebQPw</a>  访问密码 2eae</p>
<p>最后需要这两个破解的app的话，就去吾爱搜索吧，我把破解好的在吾爱发过帖子。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/c3a2cfb64cfa6899bf2b8c58a60524fc.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一朋友让我来破解下一软件，我拿来一看是这玩意。我以为很难，结果发现没壳。兴趣就来了，弄了一天，就弄出来了。这里把过程和思路分享一下。其实很简单，大神一看就知道。因为这个没加壳，只是加了混淆的。&lt;br&gt;这算是我第一次破解玩玩整整的apk了。&lt;br&gt;然后我们就开始吧。&lt;/p&gt;

    
    </summary>
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="反编译" scheme="http://sorgs.cn/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="破解" scheme="http://sorgs.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="同步学习" scheme="http://sorgs.cn/tags/%E5%90%8C%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="AndroidKiller" scheme="http://sorgs.cn/tags/AndroidKiller/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向基础笔记—巧用蓝叠和Android Studio进行动态调试</title>
    <link href="http://sorgs.cn/post/15334/"/>
    <id>http://sorgs.cn/post/15334/</id>
    <published>2016-11-16T14:36:33.000Z</published>
    <updated>2019-08-15T01:29:03.849Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道很多apk光是静态调试时远远满足不了我们对apk的分析，这个时候，我们就需要来一波静态调试。<br>此处为个人笔记，也为入门小白引路，这里就不看结果了，主要是教大家怎么结合调试。<br>起因是昨天刚看了动态调试的方法，我就想来试试。结果电脑上只有Android studio。好吧，那我就百度了Android studio的调试。然后用模拟器，结果那个模拟器太恼火了，慢死人，还卡。（学生党，只能苦逼用低配笔记本）然后身边唯一一根数据线居然罢工。没办法，后来突然想起来，蓝叠模拟器很快了，可不可以试试。于是就有了下文。好了，不废话了，进入正题。</p>
<h1 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h1><p>毫无疑问：Android studio（附带SDK，这个不多说）  蓝叠<br>然后有个大家可能大家不知道的东西  smalidea  这个百度一大堆。我就不多说了，自己去下一个就是了<br>然后一个反编译的工具 jeb apkIDE AndroidKiller等等，都可以<br>我用的是jeb</p>
<h1 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h1><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>java那些环境我想这个不应该说了，然后就是adb的环境，最好是加到环境配置中去，方便，省事。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831213525667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>smalidea  这个是配置到Android studio的，配置了才能看smali文件<br>具体步骤：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831214232454?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831214237939?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831214321892?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后选择你本地smalidea文件，这里说一句，最好不要有中文路径。也行不一定会出问题，但是不一定不会出问题。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831214620487?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831214632086?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个样子就是OK了<br>一般会重启一下Android studio</p>
<h1 id="三、准备"><a href="#三、准备" class="headerlink" title="三、准备"></a>三、准备</h1><p>这部分是反编译出文件，然后导入到Android studio中去。<br>我这里用的jeb反编译的，各位请用自己喜欢的，都可以哈。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831215122817?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>看到反编译成功，我们就去把文件提取出来<br>这里最好是也是不要放中文路径最好<br>接来下比较重要，一步一步操作。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831215458176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后选择我们放进去的反编译的文件夹</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831215517989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后点那个三角</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831220024711?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831220036262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>添加一个remote<br>名字随便取，端口号为8700</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831220127889?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>之后我们打开cmd。进行adb的安装<br>adb install -r apk的位置\apk全名</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831220452019?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>看到succe就知道成功了，蓝叠也会有提示的（一直默认蓝叠是开启的，没开的我就无语了）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://ogrop3bok.bkt.clouddn.com/f7f2201d8371b028eb865bec0a5b54fa.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后进去调试状态<br>adb shell am start -D -n packageName/ActivityName</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831220902650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831221203905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>蓝叠也会这样显示</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831221239622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>说明进入了调试状态，这个时候千万不要去点Force Close</p>
<h1 id="四、进入调试"><a href="#四、进入调试" class="headerlink" title="四、进入调试"></a>四、进入调试</h1><p>进入调试之前我们还需要去monitor看看我们是否端口号给正确了。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831222416408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>点击我们需要调试的apk包名，把8700端口给它<br>然后我们就可以调试了<br>这个时候我们需要去源码看看我们在哪里下断点了。这里就不多说了<br>我直接点断点了。在这行代码前面点一下，就断好了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831222806272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后点上面那个就可以进行调试了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831222846441?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>下面是我们的信息地方，我们可以点加，进行添加寄存器</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160831223013161?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>最后就可以进行调试，看看寄存器的值的变化了。F7是进入方法，F8是单步。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/fdd39361bb85d874d27d291e19d94e95.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道很多apk光是静态调试时远远满足不了我们对apk的分析，这个时候，我们就需要来一波静态调试。&lt;br&gt;此处为个人笔记，也为入门小白引路，这里就不看结果了，主要是教大家怎么结合调试。&lt;br&gt;起因是昨天刚看了动态调试的方法，我就想来试试。结果电脑上只有Android st
    
    </summary>
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
      <category term="反编译" scheme="http://sorgs.cn/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="破解" scheme="http://sorgs.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="动态调试" scheme="http://sorgs.cn/tags/%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    
      <category term="调试" scheme="http://sorgs.cn/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向实例笔记—那些搜不到的中文怎么办</title>
    <link href="http://sorgs.cn/post/9560/"/>
    <id>http://sorgs.cn/post/9560/</id>
    <published>2016-11-16T14:25:36.000Z</published>
    <updated>2019-08-15T01:29:03.854Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>该crackme为吾爱培训教程的课后作业，简单到爆，大神请路过</p>
</blockquote>
<h1 id="1-源apk"><a href="#1-源apk" class="headerlink" title="1.源apk"></a>1.源apk</h1><p>废话不多说，蓝叠看看错误提示。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826104703212?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826104706793?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>记住我们的错误信息。</p>
<h1 id="2-反编译"><a href="#2-反编译" class="headerlink" title="2.反编译"></a>2.反编译</h1><p>首先去string.xml中</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_action_mode_done"</span>&gt;</span>Done<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_action_bar_home_description"</span>&gt;</span>Navigate home<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_action_bar_up_description"</span>&gt;</span>Navigate up<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_action_menu_overflow_description"</span>&gt;</span>More options<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_toolbar_collapse_description"</span>&gt;</span>Collapse<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_action_bar_home_description_format"</span>&gt;</span>%1$s, %2$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_action_bar_home_subtitle_description_format"</span>&gt;</span>%1$s, %2$s, %3$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_searchview_description_search"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_search_hint"</span>&gt;</span>Search…<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_searchview_description_query"</span>&gt;</span>Search query<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_searchview_description_clear"</span>&gt;</span>Clear query<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_searchview_description_submit"</span>&gt;</span>Submit query<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_searchview_description_voice"</span>&gt;</span>Voice search<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_activitychooserview_choose_application"</span>&gt;</span>Choose an app<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_activity_chooser_view_see_all"</span>&gt;</span>See all<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_shareactionprovider_share_with_application"</span>&gt;</span>Share with %s<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"abc_shareactionprovider_share_with"</span>&gt;</span>Share with<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"status_bar_notification_info_overflow"</span>&gt;</span>999+<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>CrackMe<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello_world"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"action_settings"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>看吧，没有可用信息。<br>那么我看就只有搜索了噻</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826104934341?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>什么情况。没有？？？懵逼了。<br>这个时候我们就来试试unicode</p>
<p>把我们需要转换的写这里。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826105955688?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>点后点击转换为unicode</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826105549624?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>最后一步，把转化好的，放到搜索内容去。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826110026657?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个时候我们搜搜看看吧。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826110127095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这下就出来了，双击过去。</p>
<p>然后往上找找跳转。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826110551206?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们去看看关键的类源码。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826110853006?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们可以看到，关键就是那个if&lt;30,试想我们怎么可能大于30呢，所以可以直接修改为小于30。或者说，我们直接跳过这个if。</p>
<p>好吧，那我们有两种方法。</p>
<p> 1）.把ge改为le，改为小于</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826111231058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>2）直接goto无条件跳转<br>我们可以直接让goto去跳过这个if语句块</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826111819925?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h1><p>编译生成拖蓝叠</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826112007274?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>直接点击升级，然后重启</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160826112029241?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>OK，已经成功破解。</p>
<p>apk下载    <a href="https://yunpan.cn/cMqFIzEa2y4UT" target="_blank" rel="external">https://yunpan.cn/cMqFIzEa2y4UT</a>  访问密码 93db</p>
<font color="red">后记:这些都是很简单，很基础的apk。这个就是学习一下都不到中文怎么办。这里也就是自己做做笔记，很简单的东西。</font>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/bc35d148d533bff0abbb4f5aeb38376a.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该crackme为吾爱培训教程的课后作业，简单到爆，大神请路过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-源apk&quot;&gt;&lt;a href=&quot;#1-源apk&quot; class=&quot;headerlink&quot; title=&quot;1.源apk&quot;&gt;&lt;/a&gt;1.
    
    </summary>
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="转码" scheme="http://sorgs.cn/tags/%E8%BD%AC%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>A ndroid逆向基础笔记—Dalvik字节码小记_const/4 v2, 0x1</title>
    <link href="http://sorgs.cn/post/10311/"/>
    <id>http://sorgs.cn/post/10311/</id>
    <published>2016-11-16T09:23:32.000Z</published>
    <updated>2019-08-15T01:29:03.837Z</updated>
    
    <content type="html"><![CDATA[<p><font color="goldenrod">这几天认真研读了一下dalvik字节码，因为这个是重点，对以后的Android逆向分析很重要。<br>我是学过汇编的，但是感觉还是不是太懂。这玩意也太乱了吧。然后我有些看不懂，就百度一阵，也没有结果。就自己研究了下下，把自己不懂的地方写出来。不对的地方，大家请指出。<br>我主要是集中在赋值哪里。我开始没弄懂，后来才明白过来。<br>const/4 v1, 0x1 这里大家应该知道 v1=1。但是真真正正想过为什么？也许很多人都知道，这里是写给不知道的。<br>首先4代表4字节，那么就是4位的。所以呢 v1=0<em>4+1=1<br>const/16 v2, 0x10  这里的话，16字节，那么16位对吧。所以v2 = 1</em>16+0 = 16<br>const/16 v3, 0x28  16字节，16位。v3 = 2*16+8 = 40；<br>这里就解释完了。后面给点dalvik的实例吧。</font><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.local <span class="number">4</span>                   <span class="comment">//本地4个寄存器，也就是下面的v0,v1,v2,v3</span></div><div class="line"><span class="keyword">const</span>/<span class="number">4</span> v2, <span class="number">0x1</span>            <span class="comment">//4字节常量   v2=1</span></div><div class="line"><span class="keyword">const</span>/<span class="number">16</span> v1, <span class="number">0x10</span>          <span class="comment">//16字节常量  v1=16</span></div><div class="line">:local v1, <span class="string">"length"</span>:I      <span class="comment">//int length=v1</span></div><div class="line"><span class="keyword">if</span>-nez v1，：cond_1        <span class="comment">//如果v1不等于0，这跳转至cond_1</span></div><div class="line">:cond_0                    <span class="comment">//cond_0标签</span></div><div class="line">:goto_0                    <span class="comment">//goto_0标签</span></div><div class="line"><span class="keyword">return</span> v2                  <span class="comment">//返回v2的值</span></div><div class="line">:cond_1                    <span class="comment">//开始执行cond_1标签代码</span></div><div class="line"><span class="keyword">const</span>/<span class="number">4</span> v0,<span class="number">0x0</span>             <span class="comment">//4字节常量  v0=0</span></div><div class="line">:local v0, <span class="string">"i"</span>:I           <span class="comment">//int i=v0</span></div><div class="line">:goto_1                    <span class="comment">//开始执行goto_1标签代码</span></div><div class="line"><span class="keyword">if</span>-lt v0, v1, :cond_2      <span class="comment">//如果v0小于v1,则跳转至cond_2</span></div><div class="line"><span class="keyword">const</span>/<span class="number">16</span> v3,<span class="number">0x28</span>           <span class="comment">//如果v0大于等于v1，则执行下面语句： 16字节常量v3=40</span></div><div class="line"><span class="keyword">if</span>-le v1,v3, :cond_0       <span class="comment">//如果v1小于等于v3,则跳转至cond_0,即返回v2的值</span></div><div class="line"><span class="keyword">const</span>/<span class="number">4</span> v2, <span class="number">0x0</span>            <span class="comment">//如果v1大于v3,则4字节常量v2=0</span></div><div class="line">goto:goto_0                <span class="comment">//跳转至goto_0,即返回v2的值</span></div><div class="line">:cond_2                    <span class="comment">//cond_2标签</span></div><div class="line">xor-<span class="keyword">int</span>/lit8 v1, v1, <span class="number">0x3b</span>  <span class="comment">//将第二个v1寄存器中的值与0x3b（59）进行异或运算，得到的值赋值给第一个v1寄存器中</span></div><div class="line">add-<span class="keyword">int</span>/lit8 v0, v0, <span class="number">0x1</span>   <span class="comment">//将第二个v0寄存器中的值加上0x1(1)，所得的值放入第一个v0寄存器中</span></div><div class="line">goto:goto_1                <span class="comment">//跳转值goto_1标签</span></div></pre></td></tr></table></figure></p>
<p>翻译成java代码就是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> v2 = <span class="number">1</span>;  </div><div class="line"><span class="keyword">int</span> v1 = <span class="number">16</span>;  </div><div class="line"><span class="keyword">if</span> (v1 != <span class="number">0</span>)&#123;  </div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> v0 = <span class="number">0</span>; v0 &lt; v1;)&#123;  </div><div class="line">         v1 = v1 ^ <span class="number">59</span>;  </div><div class="line">         v0++;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span> (v1 &gt; <span class="number">40</span>)&#123;  </div><div class="line">        v2 = <span class="number">0</span>;  </div><div class="line">    &#125;  </div><div class="line"> &#125;  </div><div class="line"><span class="keyword">return</span> v2;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/b04494d27eb61243ab4157c58da60e97.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;goldenrod&quot;&gt;这几天认真研读了一下dalvik字节码，因为这个是重点，对以后的Android逆向分析很重要。&lt;br&gt;我是学过汇编的，但是感觉还是不是太懂。这玩意也太乱了吧。然后我有些看不懂，就百度一阵，也没有结果。就自己研究了下下，把自己不
    
    </summary>
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向实例笔记—续力破解三个Android程序</title>
    <link href="http://sorgs.cn/post/50997/"/>
    <id>http://sorgs.cn/post/50997/</id>
    <published>2016-11-16T09:03:08.000Z</published>
    <updated>2019-08-15T01:29:03.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个首先感谢鱼C论坛的cbs大神，我是看了他的视频。自己再动手破解他给出这三个小程序。真心这样无私把技术分享给大家的人真的不多。再次感谢他。<br>这里我就我自己破解的三个小程序自己做做笔记吧，方便自己以后查看，也方便刚刚入门的童鞋。这些都是些没啥技术含量的东西，大神请飘过。</p>
</blockquote>
<h1 id="一、认识新工具"><a href="#一、认识新工具" class="headerlink" title="一、认识新工具"></a>一、认识新工具</h1><p>这里我先给出一个新的工具。jeb。给个我找的。分别有32和64的。<a href="https://yunpan.cn/cMuBpvug7qjc2" target="_blank" rel="external">https://yunpan.cn/cMuBpvug7qjc2</a>  访问密码 da4a<br>还是照例给个样图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824212829108?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="二、Crackme03"><a href="#二、Crackme03" class="headerlink" title="二、Crackme03"></a>二、Crackme03</h1><h2 id="1-查看原apk"><a href="#1-查看原apk" class="headerlink" title="1.查看原apk"></a>1.查看原apk</h2><p>还是拖拽到蓝叠里面看看吧。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824213332273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824213337273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们看到错误的提示是Bad boy。<br>那就让我们开心的打开apkIDE吧</p>
<h2 id="2-反编译"><a href="#2-反编译" class="headerlink" title="2.反编译"></a>2.反编译</h2><p>反编译之后打开strings.xml。发现，没有Bad boy。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Android Crackme03 - [by deurus]<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name2"</span>&gt;</span>About Crackme03<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"textoPrueba2"</span>&gt;</span>This is the third crackme of the Android collection crackmes, in this, the crackme take another phone values and with our name make something. For this reason, the crackme dont run in the emulator, only in the phone. Good luck for all!.<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"textodeurus"</span>&gt;</span>by deurus [29-10-10] [Made in Basque Country]<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"imei"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"temp"</span>&gt;</span>Enter Name<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"labelserial"</span>&gt;</span>Enter Serial<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"line"</span>&gt;</span>--------------------------------------<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>那我们就只能看看smali里面的东西了。<br>搜索结果只有一处，还好。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824213837637?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>双击过去，并往上找跳转。结果发现，这代码有混淆。没有办法了？<br>这个时候就该我们的jeb上了。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824214200901?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>点击File-Open，然后选择我们的Crackme03。<br>然后点到Decompiled Java选项卡。双击左边的HelloAndroid。我们惊喜的发现这不是源码么？</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824214807872?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其实不是哈。只是很类似了。而已。<br>其实，这里的话，我们也可以不用jeb哈。直接用apkIDE带一个东西。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824214554506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>点击打开，选择打开。也是一样的</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824214640085?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>让我们来看看代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.helloandroid;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.content.Intent;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.telephony.TelephonyManager;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.view.View$OnClickListener;  </div><div class="line"><span class="keyword">import</span> android.widget.TextView;  </div><div class="line"><span class="keyword">import</span> android.widget.Toast;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAndroid</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> View$OnClickListener pulsarBoton;  </div><div class="line">    <span class="keyword">private</span> View$OnClickListener pulsarBotonabout;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloAndroid</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>();  </div><div class="line">        <span class="keyword">this</span>.pulsarBotonabout = <span class="keyword">new</span> View$OnClickListener() &#123;  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                HelloAndroid.<span class="keyword">this</span>.setContentView(<span class="number">2130903041</span>);  </div><div class="line">                Intent v0 = <span class="keyword">new</span> Intent();  </div><div class="line">                v0.setClass(HelloAndroid.<span class="keyword">this</span>, prueba2.class);  </div><div class="line">                HelloAndroid.<span class="keyword">this</span>.startActivity(v0);  </div><div class="line">                HelloAndroid.<span class="keyword">this</span>.finish();  </div><div class="line">            &#125;  </div><div class="line">        &#125;;  </div><div class="line">        <span class="keyword">this</span>.pulsarBoton = <span class="keyword">new</span> View$OnClickListener() &#123;  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                String v10 = HelloAndroid.<span class="keyword">this</span>.findViewById(<span class="number">2131034116</span>).getText().toString();  </div><div class="line">                <span class="keyword">int</span> v11 = v10.length();  </div><div class="line">                String v12 = <span class="string">""</span>;  </div><div class="line">                String v15 = HelloAndroid.<span class="keyword">this</span>.findViewById(<span class="number">2131034118</span>).getText().toString();  </div><div class="line">                <span class="keyword">if</span>(v11 &gt;= <span class="number">4</span>) &#123;  </div><div class="line">                    goto label_29;  </div><div class="line">                &#125;  </div><div class="line">  </div><div class="line">                <span class="keyword">try</span> &#123;  </div><div class="line">                    Toast.makeText(HelloAndroid.<span class="keyword">this</span>.getApplicationContext(), <span class="string">"Min 4 chars"</span>, <span class="number">1</span>).show  </div><div class="line">                            ();  </div><div class="line">                    <span class="keyword">return</span>;  </div><div class="line">                label_29:  </div><div class="line">                    <span class="keyword">int</span> v5;  </div><div class="line">                    <span class="keyword">for</span>(v5 = <span class="number">0</span>; v5 &lt; v10.length(); ++v5) &#123;  </div><div class="line">                        v12 = String.valueOf(v12) + v10.charAt(v5);  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">                    v12 = String.valueOf(Integer.parseInt(v12.substring(<span class="number">0</span>, <span class="number">5</span>)) ^ <span class="number">438294</span>);  </div><div class="line">                    Object v8 = HelloAndroid.<span class="keyword">this</span>.getSystemService(<span class="string">"phone"</span>);  </div><div class="line">                    String v6 = ((TelephonyManager)v8).getDeviceId();  </div><div class="line">                    String v16 = ((TelephonyManager)v8).getSimSerialNumber();  </div><div class="line">                    String v19 = v6.substring(<span class="number">0</span>, <span class="number">6</span>);  </div><div class="line">                    <span class="keyword">if</span>(!String.valueOf(v12) + <span class="string">"-"</span> + String.valueOf(((<span class="keyword">long</span>)(Integer.parseInt(v19) ^ Integer  </div><div class="line">                            .parseInt(v16.substring(<span class="number">0</span>, <span class="number">6</span>))))) + <span class="string">"-"</span> + v19.equals(v15)) &#123;  </div><div class="line">                        goto label_114;  </div><div class="line">                    &#125;  </div><div class="line">  </div><div class="line">                    Toast.makeText(HelloAndroid.<span class="keyword">this</span>.getApplicationContext(), <span class="string">"God boy"</span>, <span class="number">1</span>).show();  </div><div class="line">                    <span class="keyword">return</span>;  </div><div class="line">                label_114:  </div><div class="line">                    Toast.makeText(HelloAndroid.<span class="keyword">this</span>.getApplicationContext(), <span class="string">"Bad boy "</span>, <span class="number">1</span>).show();  </div><div class="line">                    <span class="keyword">return</span>;  </div><div class="line">                &#125;  </div><div class="line">                <span class="keyword">catch</span>(Exception v22) &#123;  </div><div class="line">                    Toast.makeText(HelloAndroid.<span class="keyword">this</span>.getApplicationContext(), <span class="string">"Another Error Ocurred :("</span>  </div><div class="line">                            , <span class="number">1</span>).show();  </div><div class="line">                    <span class="keyword">return</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        <span class="keyword">this</span>.setContentView(<span class="number">2130903040</span>);  </div><div class="line">        Object v3 = <span class="keyword">this</span>.getSystemService(<span class="string">"phone"</span>);  </div><div class="line">        String v2 = ((TelephonyManager)v3).getDeviceId();  </div><div class="line">        <span class="keyword">new</span> TextView(((Context)<span class="keyword">this</span>));  </div><div class="line">        <span class="keyword">this</span>.findViewById(<span class="number">2131034112</span>).setText(<span class="string">"HardwareID 01: "</span> + v2);  </div><div class="line">        String v5 = ((TelephonyManager)v3).getSimSerialNumber();  </div><div class="line">        <span class="keyword">new</span> TextView(((Context)<span class="keyword">this</span>));  </div><div class="line">        <span class="keyword">this</span>.findViewById(<span class="number">2131034113</span>).setText(<span class="string">"HardwareID 02: "</span> + v5);  </div><div class="line">        String v8 = v2.substring(<span class="number">0</span>, <span class="number">6</span>);  </div><div class="line">        String v9 = v5.substring(<span class="number">0</span>, <span class="number">6</span>);  </div><div class="line">        Integer.parseInt(v8);  </div><div class="line">        Integer.parseInt(v9);  </div><div class="line">        <span class="keyword">new</span> TextView(((Context)<span class="keyword">this</span>));  </div><div class="line">        <span class="keyword">this</span>.findViewById(<span class="number">2131034116</span>).setText(<span class="string">""</span>);  </div><div class="line">        <span class="keyword">this</span>.findViewById(<span class="number">2131034120</span>).setOnClickListener(<span class="keyword">this</span>.pulsarBotonabout);  </div><div class="line">        <span class="keyword">this</span>.findViewById(<span class="number">2131034119</span>).setOnClickListener(<span class="keyword">this</span>.pulsarBoton);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们很容易的发现Bad boy，上面有God boy。猜测就知道这就是正确信息。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824215101747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>那就让我们看看这代码。我们发现上面有个<br>goto label_114; </p>
<p>就从这个就跳转到Bad boy。那么我们就得让它不跳转，对吧。大致知道那里之后回到apkIDE。<br>我们往上找语句块，发现了 ：cond_2<br>那我们搜索这个。到了这里就是我们之前看到的那个跳转。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824223358518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>OK,我们果断改为nez，保存，生成。</p>
<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3.验证"></a>3.验证</h2><p>拖拽到蓝叠，打开。不错，God boy和我们见面</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824223651191?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这个我们就是KO了。</p>
<h1 id="三、CrackMe-F1F2"><a href="#三、CrackMe-F1F2" class="headerlink" title="三、CrackMe-F1F2"></a>三、CrackMe-F1F2</h1><h2 id="1-查看原apk-1"><a href="#1-查看原apk-1" class="headerlink" title="1.查看原apk"></a>1.查看原apk</h2><p>无需多说，进蓝叠</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824224046441?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这不是是写的EditView，居然不是hint属性，表示无语。懂的就懂，不懂也不重要。这里扯远了，我们继续。<br>既然有东西，我就懒得输了。直接验证</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824224312256?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们知道了错误代码就是Lisence Uncorrect.。</p>
<h2 id="2-反汇编"><a href="#2-反汇编" class="headerlink" title="2.反汇编"></a>2.反汇编</h2><p>apkIDE，常规操作。照样，string.xml没有信息。<br>只有smali里面搜索一波。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824224504851?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>双击过去。找找跳转。<br>这里给出代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div></pre></td><td class="code"><pre><div class="line">.class Lcom/mstar/test/LisenceCheck$1;  </div><div class="line">.super Ljava/lang/Object;  </div><div class="line">.source "LisenceCheck.java"  </div><div class="line">  </div><div class="line"># interfaces  </div><div class="line">.implements Landroid/view/View$OnClickListener;  </div><div class="line">  </div><div class="line">  </div><div class="line"># annotations  </div><div class="line">.annotation system Ldalvik/annotation/EnclosingClass;  </div><div class="line">    value = Lcom/mstar/test/LisenceCheck;  </div><div class="line">.end annotation  </div><div class="line">  </div><div class="line">.annotation system Ldalvik/annotation/InnerClass;  </div><div class="line">    accessFlags = 0x0  </div><div class="line">    name = null  </div><div class="line">.end annotation  </div><div class="line">  </div><div class="line">  </div><div class="line"># instance fields  </div><div class="line">.field final synthetic this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">  </div><div class="line"># direct methods  </div><div class="line">.method constructor &lt;init&gt;(Lcom/mstar/test/LisenceCheck;)V  </div><div class="line">    .locals 0  </div><div class="line">  </div><div class="line">    .prologue  </div><div class="line">    .line 1  </div><div class="line">    iput-object p1, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    .line 51  </div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V  </div><div class="line">  </div><div class="line">    return-void  </div><div class="line">.end method  </div><div class="line">  </div><div class="line">  </div><div class="line"># virtual methods  </div><div class="line">.method public onClick(Landroid/view/View;)V  </div><div class="line">    .locals 10  </div><div class="line">    .param p1, "v"    # Landroid/view/View;  </div><div class="line">  </div><div class="line">    .prologue  </div><div class="line">    const/4 v9, 0x0  </div><div class="line">  </div><div class="line">    const-string v8, ""  </div><div class="line">  </div><div class="line">    .line 53  </div><div class="line">    check-cast p1, Landroid/widget/Button;  </div><div class="line">  </div><div class="line">    .end local p1    # "v":Landroid/view/View;  </div><div class="line">    iget-object v6, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    iget-object v6, v6, Lcom/mstar/test/LisenceCheck;-&gt;mbutton:Landroid/widget/Button;  </div><div class="line">  </div><div class="line">    if-ne p1, v6, :cond_5  </div><div class="line">  </div><div class="line">    .line 55  </div><div class="line">    new-instance v4, Ljava/lang/String;  </div><div class="line">  </div><div class="line">    const-string v6, ""  </div><div class="line">  </div><div class="line">    invoke-direct &#123;v4, v8&#125;, Ljava/lang/String;-&gt;&lt;init&gt;(Ljava/lang/String;)V  </div><div class="line">  </div><div class="line">    .line 56  </div><div class="line">    .local v4, "s1":Ljava/lang/String;  </div><div class="line">    iget-object v6, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    iget-object v6, v6, Lcom/mstar/test/LisenceCheck;-&gt;meditun:Landroid/widget/EditText;  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6&#125;, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable;  </div><div class="line">  </div><div class="line">    move-result-object v6  </div><div class="line">  </div><div class="line">    invoke-interface &#123;v6&#125;, Landroid/text/Editable;-&gt;toString()Ljava/lang/String;  </div><div class="line">  </div><div class="line">    move-result-object v4  </div><div class="line">  </div><div class="line">    .line 57  </div><div class="line">    new-instance v5, Ljava/lang/String;  </div><div class="line">  </div><div class="line">    const-string v6, ""  </div><div class="line">  </div><div class="line">    invoke-direct &#123;v5, v8&#125;, Ljava/lang/String;-&gt;&lt;init&gt;(Ljava/lang/String;)V  </div><div class="line">  </div><div class="line">    .line 58  </div><div class="line">    .local v5, "s2":Ljava/lang/String;  </div><div class="line">    iget-object v6, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    iget-object v6, v6, Lcom/mstar/test/LisenceCheck;-&gt;meditsn:Landroid/widget/EditText;  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6&#125;, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable;  </div><div class="line">  </div><div class="line">    move-result-object v6  </div><div class="line">  </div><div class="line">    invoke-interface &#123;v6&#125;, Landroid/text/Editable;-&gt;toString()Ljava/lang/String;  </div><div class="line">  </div><div class="line">    move-result-object v5  </div><div class="line">  </div><div class="line">    .line 60  </div><div class="line">    const/4 v1, 0x0  </div><div class="line">  </div><div class="line">    .local v1, "i":I  </div><div class="line">    const/4 v2, 0x0  </div><div class="line">  </div><div class="line">    .line 62  </div><div class="line">    .local v2, "k1":I  </div><div class="line">    const/4 v1, 0x0  </div><div class="line">  </div><div class="line">    :goto_0  </div><div class="line">    invoke-virtual &#123;v4&#125;, Ljava/lang/String;-&gt;length()I  </div><div class="line">  </div><div class="line">    move-result v6  </div><div class="line">  </div><div class="line">    if-lt v1, v6, :cond_1  </div><div class="line">  </div><div class="line">    .line 69  </div><div class="line">    :cond_0  </div><div class="line">    xor-int/lit16 v2, v2, 0x5678  </div><div class="line">  </div><div class="line">    .line 72  </div><div class="line">    const/4 v3, 0x0  </div><div class="line">  </div><div class="line">    .line 73  </div><div class="line">    .local v3, "k2":I  </div><div class="line">    const/4 v1, 0x0  </div><div class="line">  </div><div class="line">    :goto_1  </div><div class="line">    invoke-virtual &#123;v5&#125;, Ljava/lang/String;-&gt;length()I  </div><div class="line">  </div><div class="line">    move-result v6  </div><div class="line">  </div><div class="line">    if-lt v1, v6, :cond_3  </div><div class="line">  </div><div class="line">    .line 78  </div><div class="line">    xor-int/lit16 v3, v3, 0x1234  </div><div class="line">  </div><div class="line">    .line 80  </div><div class="line">    if-ne v2, v3, :cond_4  </div><div class="line">  </div><div class="line">    .line 81  </div><div class="line">    iget-object v6, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6&#125;, Lcom/mstar/test/LisenceCheck;-&gt;getApplicationContext()Landroid/content/Context;  </div><div class="line">  </div><div class="line">    move-result-object v6  </div><div class="line">  </div><div class="line">    const-string v7, "Lisence Correct\uff01"  </div><div class="line">  </div><div class="line">    invoke-static &#123;v6, v7, v9&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;  </div><div class="line">  </div><div class="line">    move-result-object v6  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6&#125;, Landroid/widget/Toast;-&gt;show()V  </div><div class="line">  </div><div class="line">    .line 92  </div><div class="line">    .end local v1    # "i":I  </div><div class="line">    .end local v2    # "k1":I  </div><div class="line">    .end local v3    # "k2":I  </div><div class="line">    .end local v4    # "s1":Ljava/lang/String;  </div><div class="line">    .end local v5    # "s2":Ljava/lang/String;  </div><div class="line">    :goto_2  </div><div class="line">    return-void  </div><div class="line">  </div><div class="line">    .line 64  </div><div class="line">    .restart local v1    # "i":I  </div><div class="line">    .restart local v2    # "k1":I  </div><div class="line">    .restart local v4    # "s1":Ljava/lang/String;  </div><div class="line">    .restart local v5    # "s2":Ljava/lang/String;  </div><div class="line">    :cond_1  </div><div class="line">    invoke-virtual &#123;v4, v1&#125;, Ljava/lang/String;-&gt;charAt(I)C  </div><div class="line">  </div><div class="line">    move-result v0  </div><div class="line">  </div><div class="line">    .line 65  </div><div class="line">    .local v0, "ch":C  </div><div class="line">    const/16 v6, 0x41  </div><div class="line">  </div><div class="line">    if-lt v0, v6, :cond_0  </div><div class="line">  </div><div class="line">    .line 66  </div><div class="line">    const/16 v6, 0x5a  </div><div class="line">  </div><div class="line">    if-le v0, v6, :cond_2  </div><div class="line">  </div><div class="line">    const/16 v6, 0x20  </div><div class="line">  </div><div class="line">    sub-int v6, v0, v6  </div><div class="line">  </div><div class="line">    int-to-char v0, v6  </div><div class="line">  </div><div class="line">    .line 67  </div><div class="line">    :cond_2  </div><div class="line">    add-int/2addr v2, v0  </div><div class="line">  </div><div class="line">    .line 62  </div><div class="line">    add-int/lit8 v1, v1, 0x1  </div><div class="line">  </div><div class="line">    goto :goto_0  </div><div class="line">  </div><div class="line">    .line 74  </div><div class="line">    .end local v0    # "ch":C  </div><div class="line">    .restart local v3    # "k2":I  </div><div class="line">    :cond_3  </div><div class="line">    invoke-virtual &#123;v5, v1&#125;, Ljava/lang/String;-&gt;charAt(I)C  </div><div class="line">  </div><div class="line">    move-result v0  </div><div class="line">  </div><div class="line">    .line 75  </div><div class="line">    .restart local v0    # "ch":C  </div><div class="line">    const/16 v6, 0x30  </div><div class="line">  </div><div class="line">    sub-int v6, v0, v6  </div><div class="line">  </div><div class="line">    int-to-char v0, v6  </div><div class="line">  </div><div class="line">    .line 76  </div><div class="line">    mul-int/lit8 v6, v3, 0xa  </div><div class="line">  </div><div class="line">    add-int v3, v6, v0  </div><div class="line">  </div><div class="line">    .line 73  </div><div class="line">    add-int/lit8 v1, v1, 0x1  </div><div class="line">  </div><div class="line">    goto :goto_1  </div><div class="line">  </div><div class="line">    .line 83  </div><div class="line">    .end local v0    # "ch":C  </div><div class="line">    :cond_4  </div><div class="line">    iget-object v6, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6&#125;, Lcom/mstar/test/LisenceCheck;-&gt;getApplicationContext()Landroid/content/Context;  </div><div class="line">  </div><div class="line">    move-result-object v6  </div><div class="line">  </div><div class="line">    const-string v7, "Lisence Uncorrect\uff01"  </div><div class="line">  </div><div class="line">    invoke-static &#123;v6, v7, v9&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;  </div><div class="line">  </div><div class="line">    move-result-object v6  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6&#125;, Landroid/widget/Toast;-&gt;show()V  </div><div class="line">  </div><div class="line">    goto :goto_2  </div><div class="line">  </div><div class="line">    .line 88  </div><div class="line">    .end local v1    # "i":I  </div><div class="line">    .end local v2    # "k1":I  </div><div class="line">    .end local v3    # "k2":I  </div><div class="line">    .end local v4    # "s1":Ljava/lang/String;  </div><div class="line">    .end local v5    # "s2":Ljava/lang/String;  </div><div class="line">    :cond_5  </div><div class="line">    iget-object v6, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    iget-object v6, v6, Lcom/mstar/test/LisenceCheck;-&gt;meditun:Landroid/widget/EditText;  </div><div class="line">  </div><div class="line">    const-string v7, ""  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6, v8&#125;, Landroid/widget/EditText;-&gt;setText(Ljava/lang/CharSequence;)V  </div><div class="line">  </div><div class="line">    .line 89  </div><div class="line">    iget-object v6, p0, Lcom/mstar/test/LisenceCheck$1;-&gt;this$0:Lcom/mstar/test/LisenceCheck;  </div><div class="line">  </div><div class="line">    iget-object v6, v6, Lcom/mstar/test/LisenceCheck;-&gt;meditsn:Landroid/widget/EditText;  </div><div class="line">  </div><div class="line">    const-string v7, ""  </div><div class="line">  </div><div class="line">    invoke-virtual &#123;v6, v8&#125;, Landroid/widget/EditText;-&gt;setText(Ljava/lang/CharSequence;)V  </div><div class="line">  </div><div class="line">    goto :goto_2  </div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>还是一片大乱，还是用jeb。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824230444926?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>看我框出来的地方。很显然，如果前面不等于后面这一段，那么就跳转到下面去，Toast出来错误。<br>OK，我们回到smali里面，去找这个跳转。<br>其实大胆一点，我们直接可以在错误的上面看到:cond_4。然后搜素这个，但是我们还是稳一点，看看类似的源码，找找思路。<br>搜索:cond_4，双击过去</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824231333453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>ne就是等于，那我们改成等于就OK了。eq改上。</p>
<h2 id="3-验证-1"><a href="#3-验证-1" class="headerlink" title="3.验证"></a>3.验证</h2><p>保存，生成apk。拖蓝叠。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824231600723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>又是我们熟悉又激动的正确Toast。</p>
<h1 id="四、EX0501"><a href="#四、EX0501" class="headerlink" title="四、EX0501"></a>四、EX05<em>01</em></h1><h2 id="1-原apk"><a href="#1-原apk" class="headerlink" title="1.原apk"></a>1.原apk</h2><p>不废话，上蓝叠。看看错误提示</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825104817903?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>这里是直接不用输什么，直接来error–</p>
<h2 id="2-反编译-1"><a href="#2-反编译-1" class="headerlink" title="2.反编译"></a>2.反编译</h2><p>来看看我们的apkIDE怎么说。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825105036534?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>不用多想。依然那个问题。string没信息。那我们就搜索error–看看</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825105209611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>只有一处结果就是极好的，双击过去找跳转。<br>显然没有什么可用信息。还是看看类源码吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> irdc.ex05_01;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> android.text.util.Linkify;  </div><div class="line"><span class="keyword">import</span> android.view.KeyEvent;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.view.View.OnKeyListener;  </div><div class="line"><span class="keyword">import</span> android.widget.TextView;  </div><div class="line"><span class="keyword">import</span> android.widget.Toast;  </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EX05_01</span>$1  </span></div><div class="line">  <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnKeyListener</span>  </div><div class="line">&#123;  </div><div class="line">  EX05_01$<span class="number">1</span>(EX05_01 paramEX05_01) &#123;&#125;  </div><div class="line">    </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(View paramView, <span class="keyword">int</span> paramInt, KeyEvent paramKeyEvent)</span>  </span></div><div class="line">  &#123;  </div><div class="line">    <span class="keyword">if</span> (<span class="string">"gogo"</span>.equals(<span class="string">"11"</span>))  </div><div class="line">    &#123;  </div><div class="line">      EX05_01.access$<span class="number">0</span>(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>).setText(<span class="string">"gogo"</span>);  </div><div class="line">      Toast.makeText(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>, <span class="string">"right++"</span>, <span class="number">1</span>).show();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span> (;;)  </div><div class="line">    &#123;  </div><div class="line">      Linkify.addLinks(EX05_01.access$<span class="number">0</span>(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>), <span class="number">7</span>);  </div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">      EX05_01.access$<span class="number">0</span>(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>).setText(<span class="string">"gogo"</span>);  </div><div class="line">      Toast.makeText(<span class="keyword">this</span>.<span class="keyword">this</span>$<span class="number">0</span>, <span class="string">"error--"</span>, <span class="number">1</span>).show();  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个很清晰明了。代码很少，而且可以看到思路的地方。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825105501145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们知道，意思就是“gogo”等于“11”才会跳转到正确的地方。但是怎么可能“gogo”等于“11”呢。这里我们就直接修改为不等于就OK了。<br>回到apkIDE，找到跳转到错误的地方。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825105713884?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>那么就直接把eqz改为nez。让它不等于</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825105810505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="3-验证-2"><a href="#3-验证-2" class="headerlink" title="3.验证"></a>3.验证</h2><p>保存，生成，拖蓝叠。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825110048435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>打完收工！！！</p>
<p>这三个app都不是很难。但是主要的目的就是练练手，然后去理理思路。各位看官，看的开心就给个五星好评。</p>
<p>还是最后给出三个apk下载地址吧  <a href="https://yunpan.cn/cMu6crr4vXq5t" target="_blank" rel="external">https://yunpan.cn/cMu6crr4vXq5t</a>  访问密码 21bc</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/af77339d0c8558cb2d7a5b369c3e326b.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个首先感谢鱼C论坛的cbs大神，我是看了他的视频。自己再动手破解他给出这三个小程序。真心这样无私把技术分享给大家的人真的不多。再次感谢他。&lt;br&gt;这里我就我自己破解的三个小程序自己做做笔记吧，方便自己以后查看，也方便刚刚入门的童鞋。这些都是些没啥
    
    </summary>
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向实例笔记—破解第一个Android程序_crackme02</title>
    <link href="http://sorgs.cn/post/24104/"/>
    <id>http://sorgs.cn/post/24104/</id>
    <published>2016-11-16T08:46:17.000Z</published>
    <updated>2019-08-15T01:29:03.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本实例来源于《Android软件安全与逆向分析》这本书，作者是看雪的非虫，感谢提供这么好的书和实例。</p>
</blockquote>
<h1 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h1><p>干什么都得一个好工具对吧。</p>
<h2 id="1-apkIDE"><a href="#1-apkIDE" class="headerlink" title="1.apkIDE"></a>1.apkIDE</h2><p>反编译呢，我这里使用的是apkIDE（apk改之理），工具的话自己百度吧。个人不喜欢留一些不需要的东西在网盘里，难得整理，百度一大堆。我这里就给一个官网吧，免得有些童鞋找错了地方。现在这下下载网站一不小心，什么全家福都来了。好了，扯得有点远了。我用的就是最新版，我个人就喜欢最新版。（最新版可能有些问题）<a href="http://www.popotu.com/popo/apkide.html" target="_blank" rel="external">http://www.popotu.com/popo/apkide.html</a><br>上个样图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824200112039?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="2-蓝叠"><a href="#2-蓝叠" class="headerlink" title="2.蓝叠"></a>2.蓝叠</h2><p>只要是模拟器都可以，我个人觉得这个好用。随便找一个都行。官网：<a href="http://www.bluestacks.cn/" target="_blank" rel="external">http://www.bluestacks.cn/</a></p>
<p>样图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824200125352?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="二、查看源程序"><a href="#二、查看源程序" class="headerlink" title="二、查看源程序"></a>二、查看源程序</h2><p>这里我们直接拖拽crackme02到蓝叠中，安装。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824200501403?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后我们点开看看效果。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824200616092?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们可以看到左上角有个程序未注册。我们随便输入字符，点击注册。发现Toast提示我们，无效用户名或注册码。<br>此时，我们就该上我们的工具了</p>
<h1 id="三、反编译"><a href="#三、反编译" class="headerlink" title="三、反编译"></a>三、反编译</h1><h2 id="1-工具的使用"><a href="#1-工具的使用" class="headerlink" title="1.工具的使用"></a>1.工具的使用</h2><p>这里详细介绍一下apkIDE的使用。<br>打开apkIDE<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825101837703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>点击项目，然后点击打开apk，选择我们的crackme02。<br>看输出框的进度，之后就可以进行我们的操作了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825101932272?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>反编译之后的文件目录</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825102002298?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其中smali中存放的是反汇编的代码。<br>res是所有的资源文件。<br>都与开发目录一致。</p>
<h2 id="2-strings-xml"><a href="#2-strings-xml" class="headerlink" title="2.strings.xml"></a>2.strings.xml</h2><p>我们知道在开始的时候，我们一般会一些字符放到strings.xml文件中去。这里我就打开strings.xml文件。<br>文件在：res-values-strings.xml</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825102042445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>现在我们看看strings.xml中的内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Crackme0201<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello_world"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"menu_settings"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"title_activity_main"</span>&gt;</span>crackme02<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span>Android程序破解演示实例<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"sn"</span>&gt;</span>注册码：<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"register"</span>&gt;</span>注 册<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hint_username"</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hint_sn"</span>&gt;</span>请输入16位的注册码<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"unregister"</span>&gt;</span>程序未注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"registered"</span>&gt;</span>程序已注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"unsuccessed"</span>&gt;</span>无效用户名或注册码<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"successed"</span>&gt;</span>恭喜您！注册成功<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们可以很容易的看到，Toast提示我们错误的地方</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825102648234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="3-public-xml"><a href="#3-public-xml" class="headerlink" title="3.public.xml"></a>3.public.xml</h2><p>我们知道每个字符都有唯一的int类型的索引值。<br>于是我们打开strings.xml上面的public.xml文件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"drawable"</span> <span class="attr">name</span>=<span class="string">"ic_launcher"</span> <span class="attr">id</span>=<span class="string">"0x7f020001"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"drawable"</span> <span class="attr">name</span>=<span class="string">"ic_action_search"</span> <span class="attr">id</span>=<span class="string">"0x7f020000"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"layout"</span> <span class="attr">name</span>=<span class="string">"activity_main"</span> <span class="attr">id</span>=<span class="string">"0x7f030000"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"dimen"</span> <span class="attr">name</span>=<span class="string">"padding_small"</span> <span class="attr">id</span>=<span class="string">"0x7f040000"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"dimen"</span> <span class="attr">name</span>=<span class="string">"padding_medium"</span> <span class="attr">id</span>=<span class="string">"0x7f040001"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"dimen"</span> <span class="attr">name</span>=<span class="string">"padding_large"</span> <span class="attr">id</span>=<span class="string">"0x7f040002"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"app_name"</span> <span class="attr">id</span>=<span class="string">"0x7f050000"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"hello_world"</span> <span class="attr">id</span>=<span class="string">"0x7f050001"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"menu_settings"</span> <span class="attr">id</span>=<span class="string">"0x7f050002"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"title_activity_main"</span> <span class="attr">id</span>=<span class="string">"0x7f050003"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"info"</span> <span class="attr">id</span>=<span class="string">"0x7f050004"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"0x7f050005"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"sn"</span> <span class="attr">id</span>=<span class="string">"0x7f050006"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"register"</span> <span class="attr">id</span>=<span class="string">"0x7f050007"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"hint_username"</span> <span class="attr">id</span>=<span class="string">"0x7f050008"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"hint_sn"</span> <span class="attr">id</span>=<span class="string">"0x7f050009"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"unregister"</span> <span class="attr">id</span>=<span class="string">"0x7f05000a"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"registered"</span> <span class="attr">id</span>=<span class="string">"0x7f05000b"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"unsuccessed"</span> <span class="attr">id</span>=<span class="string">"0x7f05000c"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">name</span>=<span class="string">"successed"</span> <span class="attr">id</span>=<span class="string">"0x7f05000d"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"style"</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">id</span>=<span class="string">"0x7f060000"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"menu"</span> <span class="attr">name</span>=<span class="string">"activity_main"</span> <span class="attr">id</span>=<span class="string">"0x7f070000"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"textView1"</span> <span class="attr">id</span>=<span class="string">"0x7f080000"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"edit_username"</span> <span class="attr">id</span>=<span class="string">"0x7f080001"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"edit_sn"</span> <span class="attr">id</span>=<span class="string">"0x7f080002"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"button_register"</span> <span class="attr">id</span>=<span class="string">"0x7f080003"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"menu_settings"</span> <span class="attr">id</span>=<span class="string">"0x7f080004"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>找到我们需要的unsuccessed。如果觉得很难找，那么我们搜索功能就来了。<br>在搜索内容里面写上unsuccessed，然后搜索范围选择选中的文件或文件夹，左边我们选择public.xml。然后点击搜索全部。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825102801818?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们可以看到下面的搜索结果显示了出来，我们双击这一行，就会跳到我们所需要找的位置。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825102859097?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>然后我们记住id：0x7f05000c。</p>
<h2 id="3-smali"><a href="#3-smali" class="headerlink" title="3.smali"></a>3.smali</h2><p>这个时候我们还得使用我们的搜索。方法类似，不在赘述。我们要选择搜索smail</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825102938363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们发现有两处。<br>第一处const v1, 0x7f05000c<br>于是我们双击过去。<br>然后往上找跳转的地方。<br>    move-result v0<br>    if-nez v0, :cond_0</p>
<p>这里第一行代码返回的结果存到v0中去，第二行是对v0进行判断。如果值为0，就往下运行，也就是弹出未注册的地方。如果不为0，就跳转到cond_0处。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825103131647?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>那么也就是这里如果跳转成功就会跳转，那么程序就是成功。</p>
<h1 id="四、修改smali"><a href="#四、修改smali" class="headerlink" title="四、修改smali"></a>四、修改smali</h1><p>这里是nez，不等于0，那我们就修改为eqz，等于0。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825103219773?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><font color="red">重点中的重点，修改完之后，一定记得保存。不然可能编译错误或者，没有编译修改后的代码</font>。</p>
<p>然后我们点击编译，编译生成apk<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825103416775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>看输出框的进度和文件路径，我们就去查找我们的apk。一般来说就在原apk旁边。重新编译签名后的apk名字前面会加上ApkIDE_</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825103454102?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="五、验证"><a href="#五、验证" class="headerlink" title="五、验证"></a>五、验证</h1><p>重新编译好的apk我们需要来验证一下是否成功。<br>我们拖拽到蓝叠中，安装打开。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160825103542274?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>这里发现我们已经破解成功了。</p>
<p>最后给出apk的下载吧。<br><a href="https://yunpan.cn/cMuPerPjatc6S" target="_blank" rel="external">https://yunpan.cn/cMuPerPjatc6S</a>  访问密码 24ce<br>说的有错误或者不对的地方欢迎指正讨论。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/9ba4099a701fc56788c10f1e9289af6c.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本实例来源于《Android软件安全与逆向分析》这本书，作者是看雪的非虫，感谢提供这么好的书和实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、工具&quot;&gt;&lt;a href=&quot;#一、工具&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Android逆向实例" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向基础笔记—初识逆向</title>
    <link href="http://sorgs.cn/post/15339/"/>
    <id>http://sorgs.cn/post/15339/</id>
    <published>2016-11-16T08:24:13.000Z</published>
    <updated>2019-08-15T01:29:03.849Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>（本笔记来源于吾爱以及吾爱坛友，加上本人自己的整理）</p>
</blockquote>
<h1 id="一-初识-APK、Dalvik字节码以及Smali"><a href="#一-初识-APK、Dalvik字节码以及Smali" class="headerlink" title="一.初识 APK、Dalvik字节码以及Smali"></a>一.初识 APK、Dalvik字节码以及Smali</h1><h2 id="1-apk是什么？"><a href="#1-apk是什么？" class="headerlink" title="1. apk是什么？"></a>1. apk是什么？</h2><p>apk实质上是一个zip压缩包，将apk后缀修改为zip，解压之后可以看到其内部结构：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160824145048356?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="2-apk-的组成"><a href="#2-apk-的组成" class="headerlink" title="2. apk 的组成"></a>2. apk 的组成</h2><font color="red">assets： 资源目录1</font>

<p>assets 和 res 都是资源目录但有所区别：</p>
<p>res 目录下的资源文件在编译时会自动生成索引文件（R.java），在Java代码中用R.xxx.yyy来引用；而asset目录下的资源文件不需要生成索引，在Java 代码中需要用AssetManager来访问；</p>
<p>一般来说，除了音频和视频资源（需要放在raw或asset下），使用Java开发的Android工程使用到的资源文件都<br>会放在res下；</p>
<p>使用C++游戏引擎（或使用 Lua Unity3D等）的资源文件均需要放在 assets 下。</p>
<font color="red">lib： so 库存放位置，一般由NDK编译得到，常见于使用游戏引擎或 JNI native调用的工程中</font>

<font color="red">META-INF： 存放工程一些属性文件，例如 Manifest.MF</font>

<font color="red">res： 资源目录2</font>

<font color="red">AndroidManifest.xml： Android工程的基础配置属性文件</font>

<font color="red">classes.dex： Java代码编译得到的 Dalvik VM 能直接执行的文件</font>

<font color="red">resources.arsc： 对res 目录下的资源的一个索引文件，保存了原工程中 </font>

<font color="red">strings.xml等文件内</font>

<font color="red">apktool.yml - 重新打包必须文件<br></font>

<font color="red">lib - native 动态库 so</font>

<p><font color="red">META-INF -签名</font>   </p>
<h2 id="3-Dalvik字节码（重点来了）"><a href="#3-Dalvik字节码（重点来了）" class="headerlink" title="3. Dalvik字节码（重点来了）"></a>3. Dalvik字节码（重点来了）</h2><p>Dalvik 是 google 专门为 Android 操作系统设计的一个虚拟机，经过深度优化。虽然 Android 上的程序是使用java 来开发的，但是 Dalvik 和标准的 java 虚拟机 JVM 还是两回事。</p>
<p>Dalvik VM 是基于寄存器的，而 JVM 是基于栈的；</p>
<p>Dalvik有专属的文件执行格式 dex （dalvik executable），而 JVM 则执行的是 java 字节码。</p>
<p>Dalvik VM 比 JVM 速度更快，占用空间更少。</p>
<p>通过 Dalvik 的字节码我们不能直接看到原来的逻辑代码，这时需要借助如 Apktool 或 dex2jar+jd-gui 工具来帮助查看。但是，我们最终修改 APK 需要操作的文件是 .smali 文件，而不是导出来的 Java 文件重新编译。</p>
<h2 id="4-Smali（破解的重点。好吧还是重点）"><a href="#4-Smali（破解的重点。好吧还是重点）" class="headerlink" title="4. Smali（破解的重点。好吧还是重点）"></a>4. Smali（破解的重点。好吧还是重点）</h2><h3 id="1）Smali，Baksmali"><a href="#1）Smali，Baksmali" class="headerlink" title="1）Smali，Baksmali"></a>1）Smali，Baksmali</h3><p>分别是指安卓系统里的 Java 虚拟机（Dalvik）所使用的一种 dex 格式文件的汇编器，反汇编器。其语法是一种宽松式的 Jasmin/dedexer 语法，而且它实现了 .dex 格式所有功能（注解，调试信息，线路信息等）</p>
<p>当我们对 APK 文件进行反编译后，便会生成此类文件。在Davlik字节码中，寄存器都是32位的，能够支持任何类型，64位类（Long/Double）用2个寄存器表示；Dalvik字节码有两种类型：原始类型；引用类型（包括对象和数组）</p>
<h3 id="2）原始类型："><a href="#2）原始类型：" class="headerlink" title="2）原始类型："></a>2）原始类型：</h3><p>B—byte</p>
<p>C—char</p>
<p>D—double</p>
<p>F—float</p>
<p>I—int</p>
<p>J—long</p>
<p>S—short</p>
<p>V—void</p>
<p>Z—boolean</p>
<p>[XXX—array</p>
<p>Lxxx/yyy—object</p>
<p>这里解析下最后两项，数组的表示方式是：在基本类型前加上前中括号“[”，例如 int 数组和 float 数组分别表示为：[I、[F；</p>
<p>对象的表示则以 L 作为开头，格式是 LpackageName/objectName;（注意必须有个分号跟在最后），例如 String 对象在 smali 中为：Ljava/lang/String;其中 java/lang 对应 java.lang包，String 就是定义在该包中的一个对象。</p>
<p>内部类又如何在 smali 中：LpackageName/objectName$subObjectName;也就是在内部类前加“$”符号。</p>
<h3 id="3）方法的定义"><a href="#3）方法的定义" class="headerlink" title="3）方法的定义"></a>3）方法的定义</h3><p>Func-Name (Para-Type1Para-Type2Para-Type3…)Return-Type注意参数与参数之间没有任何分隔符，举例如下：</p>
<p>A ()V   这就是void A()。</p>
<p>B (II)Z  这个则是boolean B(int, int)。</p>
<p>C (Z[I[ILjava/lang/String;J)Ljava/lang/String;    这是String C (boolean, int[], int[], String, long) 。</p>
<h3 id="4）Smali基本语法"><a href="#4）Smali基本语法" class="headerlink" title="4）Smali基本语法"></a>4）Smali基本语法</h3><p>.field private isFlag:z　　定义变量</p>
<p>.method　　方法</p>
<p>.parameter　　方法参数</p>
<p>.prologue　　方法开始</p>
<p>.line 123　　此方法位于第123行</p>
<p>invoke-super　　调用父函数</p>
<p>const/high16 v0, 0x7fo3　　把0x7fo3赋值给v0</p>
<p>invoke-direct　　调用函数</p>
<p>return-void　　函数返回void</p>
<p>.end method　　函数结束</p>
<p>new-instance　　创建实例</p>
<p>iput-object　　对象赋值</p>
<p>iget-object　　调用对象</p>
<p>invoke-static　　调用静态函数</p>
<h3 id="5）条件跳转分支"><a href="#5）条件跳转分支" class="headerlink" title="5）条件跳转分支"></a>5）条件跳转分支</h3><p>“if-eq vA, vB, :cond<em>**” 如果vA等于vB则跳转到:cond</em>**</p>
<p>“if-ne vA, vB, :cond<em>**” 如果vA不等于vB则跳转到:cond</em>**</p>
<p>“if-lt vA, vB, :cond<em>**” 如果vA小于vB则跳转到:cond</em>**</p>
<p>“if-ge vA, vB, :cond<em>**” 如果vA大于等于vB则跳转到:cond</em>**</p>
<p>“if-gt vA, vB, :cond<em>**” 如果vA大于vB则跳转到:cond</em>**</p>
<p>“if-le vA, vB, :cond<em>**” 如果vA小于等于vB则跳转到:cond</em>**</p>
<p>“if-eqz vA, :cond<em>**” 如果vA等于0则跳转到:cond</em>**</p>
<p>“if-nez vA, :cond<em>**” 如果vA不等于0则跳转到:cond</em>**</p>
<p>“if-ltz vA, :cond<em>**” 如果vA小于0则跳转到:cond</em>**</p>
<p>“if-gez vA, :cond<em>**” 如果vA大于等于0则跳转到:cond</em>**</p>
<p>“if-gtz vA, :cond<em>**” 如果vA大于0则跳转到:cond</em>**</p>
<p>“if-lez vA, :cond<em>**” 如果vA小于等于0则跳转到:cond</em>**</p>
<h1 id="二-Smali-文件"><a href="#二-Smali-文件" class="headerlink" title="二.Smali 文件"></a>二.Smali 文件</h1><h2 id="1-Smali中的包信息"><a href="#1-Smali中的包信息" class="headerlink" title="1. Smali中的包信息"></a>1. Smali中的包信息</h2><p>.class public Lcom/aaaaa; （它是com.aaaaa这个package下的一个类）</p>
<p>.super Lcom/bbbbb; （继承自com.bbbbb这个类）</p>
<p>.source “ccccc.java” （一个由ccccc.java编译得到的smali文件）</p>
<h2 id="2-Smali中的声明"><a href="#2-Smali中的声明" class="headerlink" title="2. Smali中的声明"></a>2. Smali中的声明</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#annotations</div><div class="line">.annotation system Ldalvik/annotation/MemberClasses;</div><div class="line">value = &#123;</div><div class="line">Lcom/aaa$qqq;,</div><div class="line">Lcom/aaa$www;</div><div class="line">&#125;.</div><div class="line">end annotation</div></pre></td></tr></table></figure>
<p>//这个声明是内部类的声明：aaa这个类它有两个成员内部类——qqq和www，内部类将在后面小节中会有提及。</p>
<h2 id="3-关于寄存器"><a href="#3-关于寄存器" class="headerlink" title="3.关于寄存器"></a>3.关于寄存器</h2><p>寄存器是什么意思呢？在 smali 里的所有操作都必须经过寄存器来进行：本地寄存器用 v 开头，数字结尾的符号来表示，如v0、v1、v2、…</p>
<p>参数寄存器则使用 p 开头，数字结尾的符号来表示，如p0、p1、p2、…</p>
<p>特别注意的是，p0 不一定是函数中的第一个参数，在非 static 函数中，p0 代指“this”，p1 表示函数的第一个参数，p2 代表函数中的第二个参数。</p>
<p>而在 static 函数中 p0 才对应第一个参数（因为 Java 的 static 方法中没有 this 方法。</p>
<h2 id="4-寄存器简单实例分析"><a href="#4-寄存器简单实例分析" class="headerlink" title="4. 寄存器简单实例分析"></a>4. 寄存器简单实例分析</h2><p>const/4 v0, 0x1</p>
<p>iput-boolean v0, p0, Lcom/aaa;-&gt;IsRegistered:Z</p>
<p>我们来分析一下上面的两句 smali 代码，首先它使用了 v0 本地寄存器，并把值 0x1 存到 v0 中，然后第二句用 iput-boolean 这个指令把 v0 中的值存放到 com.aaa.IsRegistered 这个成员变量中。</p>
<p>即相当于：this.IsRegistered= true;（上面说过，在非static函数中p0代表的是“this”，在这里就是com.aaa 实例）。</p>
<p>##　5. Smali中的成员变量<br>成员变量格式是：.field public/private [static] [final] varName:&lt;类型&gt;。</p>
<p>对于不同的成员变量也有不同的指令。</p>
<p>一般来说，获取的指令有：iget、sget、iget-boolean、sget-boolean、iget-object、sget-object等。</p>
<p>操作的指令有：iput、sput、iput-boolean、sput-boolean、iput-object、sput-object等。</p>
<p>没有“-object”后缀的表示操作的成员变量对象是基本数据类型，带“-object”表示操作的成员变量是对象类</p>
<p>型，特别地，boolean 类型则使用带“-boolean”的指令操作。</p>
<h2 id="6-Smali成员变量指令简析"><a href="#6-Smali成员变量指令简析" class="headerlink" title="6. Smali成员变量指令简析"></a>6. Smali成员变量指令简析</h2><h3 id="1-简析一"><a href="#1-简析一" class="headerlink" title="1) 简析一"></a>1) 简析一</h3><p>sget-object v0, Lcom/aaa;-&gt;ID:Ljava/lang/String;</p>
<p>sget-object就是用来获取变量值并保存到紧接着的参数的寄存器中，本例中，它获取ID这个String类型的成员变量并放到v0这个寄器中。</p>
<p>注意：前面需要该变量所属的类的类型，后面需要加一个冒号和该成员变量的类型，中间是“-&gt;”表示所属关系。</p>
<h3 id="2-简析二"><a href="#2-简析二" class="headerlink" title="2) 简析二"></a>2) 简析二</h3><p>iget-object v0, p0, Lcom/aaa;-&gt;view:Lcom/aaa/view;</p>
<p>可以看到iget-object指令比sget-object多了一个参数，就是该变量所在类的实例，在这里就是p0即“this”。</p>
<p>获取array的话我们用aget和aget-object，指令使用和上述一致</p>
<h3 id="3-简析三"><a href="#3-简析三" class="headerlink" title="3) 简析三"></a>3) 简析三</h3><p>（put指令的使用和get指令是统一的）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span>/<span class="number">4</span> v3, <span class="number">0x0</span></div><div class="line">sput-object v3, Lcom/aaa;-&gt;timer:Lcom/aaa/timer;</div></pre></td></tr></table></figure></p>
<p>相当于：this.timer= null;</p>
<p>注意，这里因为是赋值object 所以是null</p>
<h3 id="4-简析四"><a href="#4-简析四" class="headerlink" title="4) 简析四"></a>4) 简析四</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.local v0, args:Landroid/os/Message;</div><div class="line"><span class="keyword">const</span>/<span class="number">4</span> v1, <span class="number">0x12</span></div><div class="line">iput v1, v0, Landroid/os/Message;-&gt;what:I</div></pre></td></tr></table></figure>
<p>相当于：args.what = 18;（args 是 Message 的实例）</p>
<h1 id="三-Smali函数分析"><a href="#三-Smali函数分析" class="headerlink" title="三.Smali函数分析"></a>三.Smali函数分析</h1><h2 id="1-Smali中函数的调用"><a href="#1-Smali中函数的调用" class="headerlink" title="1. Smali中函数的调用"></a>1. Smali中函数的调用</h2><h3 id="1）smali中的函数和成员变量一样也分为两种类型，分别为direct和virtual之分。"><a href="#1）smali中的函数和成员变量一样也分为两种类型，分别为direct和virtual之分。" class="headerlink" title="1）smali中的函数和成员变量一样也分为两种类型，分别为direct和virtual之分。"></a>1）smali中的函数和成员变量一样也分为两种类型，分别为direct和virtual之分。</h3><p>direct method和virtualmethod的区别：简单来说，direct method 就是 private 函数，其余的 public 和 protected 函数都属于 virtual method。</p>
<p>所以在调用函数时，有invoke-direct，invoke-virtual，另外还有invoke-static、invoke-super以及invokeinterface等几种不同的指令。当然其实还有invoke-XXX/range 指令的，这是参数多于4个的时候调用的指令。</p>
<h3 id="2）invoke-static："><a href="#2）invoke-static：" class="headerlink" title="2）invoke-static："></a>2）invoke-static：</h3><p>用于调用static函数，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">invoke-<span class="keyword">static</span> &#123;&#125;, Lcom/aaa;-&gt;CheckSignature()Z</div></pre></td></tr></table></figure></p>
<p>这里注意到 invoke-static 后面有一对大括号“{}”，其实是调用该方法的实例+参数列表，由于这个方法既不需参数也是static的，所以{}内为空</p>
<p>再看一个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span>-string v0, <span class="string">"NDKLIB"</span></div><div class="line">invoke-<span class="keyword">static</span> &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V</div></pre></td></tr></table></figure></p>
<p>这个是调用 static void System.loadLibrary(String) 来加载 NDK 编译的 so 库用的方法，同样也是这里 v0 就是参数”NDKLIB”了。</p>
<h3 id="3）invoke-super："><a href="#3）invoke-super：" class="headerlink" title="3）invoke-super："></a>3）invoke-super：</h3><p>调用父类方法用的指令，一般用于调用onCreate、onDestroy等方法。</p>
<h3 id="4）invoke-direct："><a href="#4）invoke-direct：" class="headerlink" title="4）invoke-direct："></a>4）invoke-direct：</h3><p>调用private函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">invoke-direct &#123;p0&#125;, Landroid/app/TabActivity;-&gt;()V</div></pre></td></tr></table></figure></p>
<p>这里init()就是定义在TabActivity中的一个private函数</p>
<h3 id="5）invoke-virtual："><a href="#5）invoke-virtual：" class="headerlink" title="5）invoke-virtual："></a>5）invoke-virtual：</h3><p>用于调用 protected 或 public 函数，同样注意修改smali时不要错用 invoke-direct或 invoke-static：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sget-object v0, Lcom/dddd;-&gt;bbb:Lcom/ccc;</div><div class="line">invoke-virtual &#123;v0, v1&#125;, Lcom/ccc;-&gt;Messages(Ljava/lang/Object;)V</div></pre></td></tr></table></figure></p>
<p>v0是bbb:Lcom/ccc</p>
<p>v1是传递给Messages方法的Ljava/lang/Object参数。</p>
<h3 id="6）invoke-xxxxx-range："><a href="#6）invoke-xxxxx-range：" class="headerlink" title="6）invoke-xxxxx/range："></a>6）invoke-xxxxx/range：</h3><p>当方法的参数多于5个时（含5个），不能直接使用以上的指令，而是在后面加上“/range”，range表示范围，使用方法也有所不同：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">invoke-direct/range &#123;v0 .. v5&#125;, Lcmb/pb/ui/PBContainerActivity;-&gt;h(ILjava/lang/CharSequence;Ljava/lang/</div><div class="line">String;Landroid/content/</div></pre></td></tr></table></figure></p>
<p>需要传递v0到v5一共6个参数，这时候大括号内的参数采用省略形式，且需要连续。</p>
<h2 id="2-Smali中函数返回结果操作"><a href="#2-Smali中函数返回结果操作" class="headerlink" title="2. Smali中函数返回结果操作"></a>2. Smali中函数返回结果操作</h2><p>在Java代码中调用函数和返回函数结果可以用一条语句完成，而在Smali里则需要分开来完成，在使用上述指令后，如果调用的函数返回非void，那么还需要用到move-result（返回基本数据类型）和move-result-object（返回对象）指令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span>-string v0, <span class="string">"Eric"</span></div><div class="line">invoke-<span class="keyword">static</span> &#123;v0&#125;, Lcmb/pbi;-&gt;t(Ljava/lang/String;)Ljava/lang/String;</div><div class="line">move-result-object v2</div></pre></td></tr></table></figure></p>
<p>v2保存的就是调用t方法返回的String字符串。</p>
<h2 id="3-Smali中函数实体分析–if函数分析"><a href="#3-Smali中函数实体分析–if函数分析" class="headerlink" title="3. Smali中函数实体分析–if函数分析"></a>3. Smali中函数实体分析–if函数分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.<span class="function">method <span class="keyword">private</span> <span class="title">ifRegistered</span><span class="params">()</span>Z</span></div><div class="line">.locals 2 <span class="comment">//在这个函数中本地寄存器的个数</span></div><div class="line">.prologue</div><div class="line"><span class="keyword">const</span>/4 v0, 0x1 <span class="comment">// v0赋值为1</span></div><div class="line">.local v0, tempFlag:Z</div><div class="line"><span class="keyword">if</span>-eqz v0, :cond0 <span class="comment">// 判断v0是否等于0，等于0则跳到cond0执行</span></div><div class="line"><span class="keyword">const</span>/4 v1, 0x1 <span class="comment">// 符合条件分支</span></div><div class="line">:goto_0 <span class="comment">//标签</span></div><div class="line">return v1 <span class="comment">//返回v1的值</span></div><div class="line">:cond_0 <span class="comment">//标签</span></div><div class="line"><span class="keyword">const</span>/4 v1, 0x0 <span class="comment">// cond_0分支</span></div><div class="line">goto :goto0 <span class="comment">//跳到goto0执行 即返回v1的值 这里可以改成return v1 也是一样的</span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/4870cb9773e6bc42f836727f0e177890.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;（本笔记来源于吾爱以及吾爱坛友，加上本人自己的整理）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一-初识-APK、Dalvik字节码以及Smali&quot;&gt;&lt;a href=&quot;#一-初识-APK、Dalvik字节码以及Smali&quot; class=&quot;
    
    </summary>
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/categories/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android逆向基础" scheme="http://sorgs.cn/tags/Android%E9%80%86%E5%90%91%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android 最最最简单的浏览器代码</title>
    <link href="http://sorgs.cn/post/12244/"/>
    <id>http://sorgs.cn/post/12244/</id>
    <published>2016-11-16T08:09:07.000Z</published>
    <updated>2019-08-15T01:29:03.839Z</updated>
    
    <content type="html"><![CDATA[<font color="red">学了WebView之后，心血来潮，写了这个简易的浏览器。虽然很简单，但是也查了不少没学到东西。大神就忽略吧。这里分享出来，给需要的人参考参考。</font>

<h1 id="首先是我们的xml"><a href="#首先是我们的xml" class="headerlink" title="首先是我们的xml"></a>首先是我们的xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#F5F5DC"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/text"</span>  </div><div class="line">        <span class="attr">android:autoText</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:selectAllOnFocus</span>=<span class="string">"true"</span>  </div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span>  </div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#FFA500"</span>  </div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"@string/url"</span>  </div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"left|top"</span>/&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span>  </div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/next"</span>  </div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#FAEBD7"</span>  </div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right|top"</span> /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">WebView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/webview"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<font color="#00ffff">代码简单，就是LinearLayou里面再套一个LinearLayou，加上一个edittext和button。下面就是一个WebView。edittext里面有些属性虽然我写了，但是没感觉出来用处。android:autoText=”true”。自动补全，我感觉没有用处。android:singleLine=”true”这个呢就是单行显示，也就是说，有些网址很长，我们只显示一行就行了。这个为后面的实时显示网址有用的。android:selectAllOnFocus=”true”这个呢就是获取焦点，便于后面点edittext可以全选。</font>

<h1 id="最后是重点啦，看看Java的代码。"><a href="#最后是重点啦，看看Java的代码。" class="headerlink" title="最后是重点啦，看看Java的代码。"></a>最后是重点啦，看看Java的代码。</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sorgs.administrator.webview;  </div><div class="line">  </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.app.ProgressDialog;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.view.KeyEvent;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebChromeClient;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebSettings;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebView;  </div><div class="line"><span class="keyword">import</span> android.webkit.WebViewClient;  </div><div class="line"><span class="keyword">import</span> android.widget.Button;  </div><div class="line"><span class="keyword">import</span> android.widget.EditText;  </div><div class="line"><span class="keyword">import</span> android.widget.Toast;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> String url = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">private</span> WebView webView;  </div><div class="line">    <span class="keyword">private</span> ProgressDialog dialog;  </div><div class="line">    <span class="keyword">private</span> EditText text;  </div><div class="line">    <span class="keyword">private</span> Button button;  </div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"欢迎使用简易浏览器_by sorgs"</span>,Toast.LENGTH_SHORT).show(); <span class="comment">//弹出欢迎  </span></div><div class="line">        init();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  </div><div class="line">        webView = (WebView) findViewById(R.id.webview);  </div><div class="line">        text = (EditText) findViewById(R.id.text);  </div><div class="line">        button = (Button) findViewById(R.id.button);  </div><div class="line">        webView.loadUrl(url);  </div><div class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">                String str = text.getText().toString();  <span class="comment">//去获取text中输入的网址  </span></div><div class="line">                url = <span class="string">"http://"</span>+ str;  </div><div class="line">                webView.loadUrl(url);            <span class="comment">//设置到webView中去  </span></div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">        <span class="comment">//覆盖WebView默认通过第三方或者是系统浏览器打开网页的行为，使网页可以再WebView中打开  </span></div><div class="line">        webView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;  </div><div class="line">                <span class="comment">//返回值是true的时候控制网页在WebView中去打开，如果为false调用系统浏览器或者第三方浏览器打开  </span></div><div class="line">  </div><div class="line">                view.loadUrl(url);  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">            &#125;<span class="comment">//WebViewClient帮助WebView去处理一些页面控制和请求通知  </span></div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">        <span class="comment">//启用支持javaScript  </span></div><div class="line">        WebSettings settings = webView.getSettings();  </div><div class="line">        settings.setJavaScriptEnabled(<span class="keyword">true</span>);  </div><div class="line">        <span class="comment">//WebView加载页面优先使用缓存加载  </span></div><div class="line">        settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  </div><div class="line">        webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;  </div><div class="line">                <span class="comment">//newProgress 1-100之间的整数  </span></div><div class="line">                <span class="keyword">if</span> (newProgress == <span class="number">100</span>) &#123;  </div><div class="line">                    <span class="comment">//网页加载完毕,关闭ProgressDialog  </span></div><div class="line">                    closeDialo();  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    <span class="comment">//网页正在加载，打开ProgressDialog  </span></div><div class="line">                    openDialog(newProgress);  </div><div class="line">                    text.setText(webView.getUrl()); <span class="comment">//实时显示当前网址  </span></div><div class="line">                    text.requestFocus();           <span class="comment">//把输入焦点放在调用这个方法的控件上  </span></div><div class="line">                    text.setSelectAllOnFocus(<span class="keyword">true</span>); <span class="comment">//点击之后就被全选  </span></div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeDialo</span><span class="params">()</span> </span>&#123;  </div><div class="line">                <span class="keyword">if</span> (dialog != <span class="keyword">null</span> &amp;&amp; dialog.isShowing()) &#123;  </div><div class="line">                    dialog.dismiss();  </div><div class="line">                    dialog = <span class="keyword">null</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openDialog</span><span class="params">(<span class="keyword">int</span> newProgress)</span> </span>&#123;  </div><div class="line">                <span class="keyword">if</span> (dialog == <span class="keyword">null</span>) &#123;  </div><div class="line">                    dialog = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);  </div><div class="line">                    dialog.setTitle(<span class="string">"加载中..."</span>);  </div><div class="line">                    dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);  </div><div class="line">                    dialog.setProgress(newProgress);  </div><div class="line">                    dialog.show();  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                    dialog.setProgress(newProgress);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span> <span class="comment">//改写物理按键——返回的逻辑  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.KEYCODE_BACK)&#123;  </div><div class="line">            <span class="keyword">if</span>(webView.canGoBack())&#123;  </div><div class="line">                webView.goBack();   <span class="comment">//返回上一页面  </span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">            &#125;<span class="keyword">else</span> &#123;  </div><div class="line">                System.exit(<span class="number">0</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode,event);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<font color="lavender">代码中呢很多注释写的很详细了。这个就不在赘述了。</font>

<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/349ebd550d3598f292948b7e70038878.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="最后来几张效果图好啦。"><a href="#最后来几张效果图好啦。" class="headerlink" title="最后来几张效果图好啦。"></a>最后来几张效果图好啦。</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160804121324553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160804121511825?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160804121502960?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/43516b2742abbcd120260c38d8804df3.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;red&quot;&gt;学了WebView之后，心血来潮，写了这个简易的浏览器。虽然很简单，但是也查了不少没学到东西。大神就忽略吧。这里分享出来，给需要的人参考参考。&lt;/font&gt;

&lt;h1 id=&quot;首先是我们的xml&quot;&gt;&lt;a href=&quot;#首先是我们的xml&quot; cl
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>自己第一个Android作品，Android计算器</title>
    <link href="http://sorgs.cn/post/37302/"/>
    <id>http://sorgs.cn/post/37302/</id>
    <published>2016-11-16T00:40:48.000Z</published>
    <updated>2019-08-15T01:29:03.862Z</updated>
    
    <content type="html"><![CDATA[<p> 写此时为了记录自己的开发历程，方便以后的查询。二则运算（能力有限，也没有想往更深处写），菜鸟级别，代码为参考慕课网上，听课代码，并加上自己的理解和参考的一些博客！有问题的地方欢迎指正，感激不尽！开发工具为Android studio。（第一次写博客，可读性估计很差）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160717155748879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>废话不多说，代码轮上来（顺序按慕课老师讲解顺序）</p>
</blockquote>
<h1 id="1-先是xml（UI吧）"><a href="#1-先是xml（UI吧）" class="headerlink" title="1.先是xml（UI吧）"></a>1.先是xml（UI吧）</h1><p>&#160;&#160;效果图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160717160159993?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">EditText</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"70dip"</span>  </div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/et_input"</span>  </div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/white"</span>  </div><div class="line">    <span class="attr">android:editable</span>=<span class="string">"false"</span>  </div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">    /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>  </div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>  </div><div class="line">    &gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"C"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_clear"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"DEL"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_del"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"÷"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_divide"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"×"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_multiply"</span>  </div><div class="line">        /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>  </div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>  </div><div class="line">    &gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"7"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_7"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"8"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_8"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"9"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_9"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"-"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_minus"</span>  </div><div class="line">        /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>  </div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>  </div><div class="line">    &gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"4"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_4"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"5"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_5"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"6"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_6"</span>  </div><div class="line">        /&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"+"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_plus"</span>  </div><div class="line">        /&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>  </div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span>  </div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;  </div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;  </div><div class="line">  </div><div class="line">            <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:text</span>=<span class="string">"1"</span>  </div><div class="line">                <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/btn_1"</span>  </div><div class="line">                /&gt;  </div><div class="line">            <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:text</span>=<span class="string">"2"</span>  </div><div class="line">                <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/btn_2"</span>  </div><div class="line">                /&gt;  </div><div class="line">            <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:text</span>=<span class="string">"3"</span>  </div><div class="line">                <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/btn_3"</span>  </div><div class="line">                /&gt;  </div><div class="line">  </div><div class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span>  </span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>  </div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span>&gt;  </div><div class="line">  </div><div class="line">            <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span>  </div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:text</span>=<span class="string">"0"</span>  </div><div class="line">                <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/btn_0"</span>  </div><div class="line">                /&gt;  </div><div class="line">            <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"70dp"</span>  </div><div class="line">                <span class="attr">android:text</span>=<span class="string">"."</span>  </div><div class="line">                <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@drawable/white_select"</span>  </div><div class="line">                <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">                <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/btn_point"</span>  </div><div class="line">                /&gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">Button</span>  </span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"70dp"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span>  </div><div class="line">        <span class="attr">android:text</span>=<span class="string">"="</span>  </div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/orange_select"</span>  </div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"10dp"</span>  </div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>  </div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"right|bottom"</span>  </div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_equal"</span>/&gt;  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span>  </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span>  </span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </div><div class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|center"</span>  </div><div class="line">    <span class="attr">android:editable</span>=<span class="string">"false"</span>  </div><div class="line">    <span class="attr">android:text</span>=<span class="string">"能力有限，只能进行二则运算——by sorgs"</span>  </div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"16dp"</span>  </div><div class="line">    <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span>  </div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"30dp"</span>  </div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/sandybrown"</span>  </div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/textureView"</span> /&gt;</div></pre></td></tr></table></figure>
<p>xml里面注释不多，想必也不需太多解释，都是很简单布局和控件。其中有个背景颜色的问题需要详细说明</p>
<h2 id="1-存放颜色"><a href="#1-存放颜色" class="headerlink" title="1.存放颜色"></a>1.存放颜色</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160717160632972?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>首先我们需要一个在value/下添加一个colors.xml文件用来存放我们需要的颜色不然你全用#xxxxxx得多累，而且还不还用颜色，这里我们可以百度，有配好的颜色的代码。我们直接复制到我们的代码中，然后引用。</p>
<h2 id="建立xml"><a href="#建立xml" class="headerlink" title="建立xml"></a>建立xml</h2><p>为了在方便我们布局和颜色的搭配，也是在慕课老师那里学了一招。可以在res/drawable下面建立xml。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160717161054349?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>我们来依次看看这些文件都是怎么做的。</p>
<p>###（1）.ashend_bg.xml（几个_bg都是颜色不一样，意义差不多）<br>目的是提供背景颜色，其实也可以不要颜色。直接在xml中添加颜色，这个主要是提供圆角</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </div><div class="line"> <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"5dp"</span>/&gt;</span>  </div><div class="line">   <span class="tag">&lt;<span class="name">solid</span>  </span></div><div class="line">       <span class="attr">android:color</span>=<span class="string">"@color/beige"</span> /&gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此处使用shape。（这里有更加完美的解释 <a href="http://www.cnblogs.com/cyanfei/archive/2012/07/27/2612023.html" target="_blank" rel="external">http://www.cnblogs.com/cyanfei/archive/2012/07/27/2612023.html</a>）</p>
<h3 id="（2）-orange-select-xml（select也是颜色不一样，内容差不多）"><a href="#（2）-orange-select-xml（select也是颜色不一样，内容差不多）" class="headerlink" title="（2）.orange_select.xml（select也是颜色不一样，内容差不多）"></a>（2）.orange_select.xml（select也是颜色不一样，内容差不多）</h3><p>目的是为了按钮提供颜色和点击时会有另外一种颜色</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:18px;"</span>&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ashend_bg"</span>  </span></div><div class="line">        <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>/&gt;  </div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/orange_bg"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此处使用select（详细用法请参考<a href="http://blog.csdn.net/shakespeare001/article/details/7788400/" target="_blank" rel="external">http://blog.csdn.net/shakespeare001/article/details/7788400/</a>）</p>
<h1 id="2-然后是我们的Activity-代码都很简单，认真学了java都不会看不懂，而且注释很详细。只有几处需要解释下下的"><a href="#2-然后是我们的Activity-代码都很简单，认真学了java都不会看不懂，而且注释很详细。只有几处需要解释下下的" class="headerlink" title="2.然后是我们的Activity(代码都很简单，认真学了java都不会看不懂，而且注释很详细。只有几处需要解释下下的)"></a>2.然后是我们的Activity(代码都很简单，认真学了java都不会看不懂，而且注释很详细。只有几处需要解释下下的)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sorgs.administrator.caclulatordemo;   </div><div class="line"><span class="keyword">import</span> android.app.Activity;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.view.View;  </div><div class="line"><span class="keyword">import</span> android.view.View.OnClickListener;  </div><div class="line"><span class="keyword">import</span> android.widget.Button;  </div><div class="line"><span class="keyword">import</span> android.widget.EditText;  </div><div class="line"><span class="keyword">import</span> android.widget.Toast;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;  `</div><div class="line">    Button btn_0;<span class="comment">//0数字按钮  </span></div><div class="line">    Button btn_1;<span class="comment">//1数字按钮  </span></div><div class="line">    Button btn_2;<span class="comment">//2数字按钮  </span></div><div class="line">    Button btn_3;<span class="comment">//3数字按钮  </span></div><div class="line">    Button btn_4;<span class="comment">//4数字按钮  </span></div><div class="line">    Button btn_5;<span class="comment">//5数字按钮  </span></div><div class="line">    Button btn_6;<span class="comment">//6数字按钮  </span></div><div class="line">    Button btn_7;<span class="comment">//7数字按钮  </span></div><div class="line">    Button btn_8;<span class="comment">//8数字按钮  </span></div><div class="line">    Button btn_9;<span class="comment">//9数字按钮  </span></div><div class="line">    Button btn_point;<span class="comment">//小数点按钮  </span></div><div class="line">    Button btn_clear;<span class="comment">//清除按钮  </span></div><div class="line">    Button btn_del;<span class="comment">//删除按钮  </span></div><div class="line">    Button btn_plus;<span class="comment">//加好按钮  </span></div><div class="line">    Button btn_minus;<span class="comment">//减号按钮  </span></div><div class="line">    Button btn_divide;<span class="comment">//除号按钮  </span></div><div class="line">    Button btn_multiply;<span class="comment">//乘号按钮  </span></div><div class="line">    Button btn_equle;<span class="comment">//等于按钮  </span></div><div class="line">    <span class="comment">//以上建立按钮  </span></div><div class="line">    EditText et_input;<span class="comment">//显示输出内容的显示屏  </span></div><div class="line">    <span class="keyword">boolean</span> clear_flag;<span class="comment">//清空标识，用于等号之后清空  </span></div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.content_main);<span class="comment">//控制xml为content_main  </span></div><div class="line">  </div><div class="line">        btn_0 = (Button) findViewById(R.id.btn_0);  </div><div class="line">        btn_1 = (Button) findViewById(R.id.btn_1);  </div><div class="line">        btn_2 = (Button) findViewById(R.id.btn_2);  </div><div class="line">        btn_3 = (Button) findViewById(R.id.btn_3);  </div><div class="line">        btn_4 = (Button) findViewById(R.id.btn_4);  </div><div class="line">        btn_5 = (Button) findViewById(R.id.btn_5);  </div><div class="line">        btn_6 = (Button) findViewById(R.id.btn_6);  </div><div class="line">        btn_7 = (Button) findViewById(R.id.btn_7);  </div><div class="line">        btn_8 = (Button) findViewById(R.id.btn_8);  </div><div class="line">        btn_9 = (Button) findViewById(R.id.btn_9);  </div><div class="line">        btn_point = (Button) findViewById(R.id.btn_point);  </div><div class="line">        btn_del = (Button) findViewById(R.id.btn_del);  </div><div class="line">        btn_plus = (Button) findViewById(R.id.btn_plus);  </div><div class="line">        btn_clear = (Button) findViewById(R.id.btn_clear);  </div><div class="line">        btn_minus = (Button) findViewById(R.id.btn_minus);  </div><div class="line">        btn_multiply = (Button) findViewById(R.id.btn_multiply);  </div><div class="line">        btn_divide = (Button) findViewById(R.id.btn_divide);  </div><div class="line">        btn_equle = (Button) findViewById(R.id.btn_equal);  </div><div class="line">        <span class="comment">//以上是实例化按钮  </span></div><div class="line">  </div><div class="line">        et_input = (EditText) findViewById(R.id.et_input);<span class="comment">//实例化显示屏  </span></div><div class="line">  </div><div class="line">        btn_0.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_1.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_2.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_3.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_4.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_5.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_6.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_7.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_8.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_9.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_point.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_del.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_plus.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_clear.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_minus.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_multiply.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_divide.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        btn_equle.setOnClickListener(<span class="keyword">this</span>);  </div><div class="line">        <span class="comment">//以上设置按钮的点击事件  </span></div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </div><div class="line">        String str = et_input.getText().toString();  <span class="comment">//取出显示屏内容  </span></div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;  <span class="comment">//判断点的是那个按钮  </span></div><div class="line">           <span class="keyword">case</span> R.id.btn_0:  <span class="comment">//建立数字0—9和.  </span></div><div class="line">           <span class="keyword">case</span> R.id.btn_1:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_2:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_3:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_4:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_5:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_6:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_7:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_8:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_9:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_point:  </div><div class="line">               <span class="keyword">if</span>(clear_flag)&#123;  <span class="comment">//  </span></div><div class="line">                   clear_flag =<span class="keyword">false</span>;  </div><div class="line">                   str = <span class="string">""</span>;  <span class="comment">//计算下一个时候，应将原来的设置为空  </span></div><div class="line">                   et_input.setText(<span class="string">""</span>);  </div><div class="line">               &#125;  </div><div class="line">               et_input.setText(str+((Button)v).getText());  <span class="comment">//将点击的文字添加到输入框里面（str原来输入框中内容）  </span></div><div class="line">           <span class="keyword">break</span>;  </div><div class="line">           <span class="keyword">case</span> R.id.btn_plus:  <span class="comment">//建立+-×÷  </span></div><div class="line">           <span class="keyword">case</span> R.id.btn_minus:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_multiply:  </div><div class="line">           <span class="keyword">case</span> R.id.btn_divide:  </div><div class="line">               <span class="keyword">if</span>(clear_flag)&#123;  </div><div class="line">                   clear_flag =<span class="keyword">false</span>;  </div><div class="line">                   str = <span class="string">""</span>;  <span class="comment">//计算下一个时候，应将原来的设置为空  </span></div><div class="line">                   et_input.setText(<span class="string">""</span>);  </div><div class="line">               &#125;  </div><div class="line">               et_input.setText(str+<span class="string">" "</span>+((Button)v).getText()+<span class="string">" "</span>);<span class="comment">//将点击的运算符添加到输入框前后有“ ”用于区别  </span></div><div class="line">           <span class="keyword">break</span>;  </div><div class="line">           <span class="keyword">case</span> R.id.btn_del: <span class="comment">//建立删除  </span></div><div class="line">               <span class="keyword">if</span>(clear_flag)&#123;  </div><div class="line">                   clear_flag= <span class="keyword">false</span>;  </div><div class="line">                   str = <span class="string">""</span>;  <span class="comment">//计算下一个时候，应将原来的设置为空  </span></div><div class="line">                   et_input.setText(<span class="string">""</span>);  </div><div class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp;!str.equals(<span class="string">""</span>)) &#123; <span class="comment">//如果显示屏里面不是NULL也不是空  </span></div><div class="line">                   et_input.setText(str.substring(<span class="number">0</span>,str.length()-<span class="number">1</span>)); <span class="comment">//从后面长度减一  </span></div><div class="line">               &#125;  </div><div class="line">           <span class="keyword">break</span>;  </div><div class="line">           <span class="keyword">case</span> R.id.btn_clear:  <span class="comment">//建立清除  </span></div><div class="line">               clear_flag = <span class="keyword">false</span>;  </div><div class="line">               str = <span class="string">""</span>;  <span class="comment">//计算下一个时候，应将原来的设置为空  </span></div><div class="line">               et_input.setText(<span class="string">""</span>);   <span class="comment">//将显示屏内容置空  </span></div><div class="line">           <span class="keyword">break</span>;  </div><div class="line">           <span class="keyword">case</span> R.id.btn_equal:  <span class="comment">//建立等于  </span></div><div class="line">               getResult();     <span class="comment">//获取结算结果  </span></div><div class="line">           <span class="keyword">break</span>;  </div><div class="line">       &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//进行计算  </span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getResult</span><span class="params">()</span></span>&#123;  </div><div class="line">        String exp = et_input.getText().toString(); <span class="comment">//取出显示屏内容并转化为String  </span></div><div class="line">        <span class="keyword">if</span> (exp == <span class="keyword">null</span>||exp.equals(<span class="string">""</span>))&#123;<span class="comment">//如果内容为null和空，直接返回  </span></div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(!exp.contains(<span class="string">" "</span>))&#123;<span class="comment">//如果不包含空格（运算符前面有空格），直接返回（比如点了数字，没有运算符）  </span></div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(clear_flag)&#123;  </div><div class="line">            clear_flag = <span class="keyword">false</span>;  </div><div class="line">            <span class="keyword">return</span>;  </div><div class="line">        &#125;  </div><div class="line">        clear_flag = <span class="keyword">true</span>;  </div><div class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;  <span class="comment">//定义一个double的result=0  </span></div><div class="line">        String s1 = exp.substring(<span class="number">0</span>,exp.indexOf(<span class="string">' '</span>));<span class="comment">//截取运算符前面的字符  </span></div><div class="line">        String op = exp.substring(exp.indexOf(<span class="string">' '</span>)+<span class="number">1</span>,exp.indexOf(<span class="string">' '</span>)+<span class="number">2</span>);<span class="comment">//截取运算符  </span></div><div class="line">        String s2 = exp.substring(exp.indexOf(<span class="string">' '</span>)+<span class="number">3</span>);<span class="comment">//截取运算符后面的字符  </span></div><div class="line">        <span class="keyword">if</span>(!s1.equals(<span class="string">""</span>)&amp;&amp;!s2.equals(<span class="string">""</span>))&#123; <span class="comment">//如果S1或者S2不为空  </span></div><div class="line">            <span class="keyword">double</span> d1 = Double.parseDouble(s1);  <span class="comment">//强制将S1转换为double类型  </span></div><div class="line">            <span class="keyword">double</span> d2 = Double.parseDouble(s2);  <span class="comment">//强制将S2转换为double类型  </span></div><div class="line">            <span class="keyword">if</span>(op.equals(<span class="string">"+"</span>))&#123;  <span class="comment">//如果op为四中情况的方案  </span></div><div class="line">                result = d1+d2;  </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"-"</span>))&#123;  </div><div class="line">                result = d1-d2;  </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"×"</span>))&#123;  </div><div class="line">                result = d1*d2;  </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"÷"</span>))&#123;  </div><div class="line">                <span class="keyword">if</span>(d2==<span class="number">0</span>)&#123;  </div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"除数不能为0！！！"</span>,Toast.LENGTH_LONG).show();  </div><div class="line">                    et_input.setText(<span class="string">"0"</span>);  </div><div class="line">                &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                    result = d1/d2;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span>(!s1.contains(<span class="string">"."</span>)&amp;&amp;!s2.contains(<span class="string">"."</span>)&amp;&amp;!op.equals(<span class="string">"÷"</span>))&#123;  <span class="comment">//如果没有小数点则为int类型且op不为÷  </span></div><div class="line">                <span class="keyword">int</span> r = (<span class="keyword">int</span>)result;  <span class="comment">//强制转换为int类型  </span></div><div class="line">                et_input.setText(r+<span class="string">""</span>);  </div><div class="line">            &#125;<span class="keyword">else</span>&#123;    <span class="comment">//其中含有小数点，则输出double类型  </span></div><div class="line">                et_input.setText(result+<span class="string">""</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!s1.equals(<span class="string">""</span>)&amp;&amp;s2.equals(<span class="string">""</span>))&#123;  <span class="comment">//S1不为空，S2为空  </span></div><div class="line">            <span class="keyword">double</span> d1 = Double.parseDouble(s1);  </div><div class="line">            result = d1;  </div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"不具备运算"</span>,Toast.LENGTH_LONG).show();  </div><div class="line">            et_input.setText(result+<span class="string">""</span>);  <span class="comment">//不进行计算,返回S1  </span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1.equals(<span class="string">""</span>)&amp;&amp;!s2.equals(<span class="string">""</span>))&#123;  <span class="comment">//S1为空，S2不为空  </span></div><div class="line">            <span class="keyword">double</span> d2 = Double.parseDouble(s2);  </div><div class="line">            <span class="keyword">if</span>(op.equals(<span class="string">"+"</span>))&#123;  </div><div class="line">                result = <span class="number">0</span>+d2;  </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"-"</span>))&#123;  </div><div class="line">                result = <span class="number">0</span>-d2;  </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"×"</span>))&#123;  </div><div class="line">                result = <span class="number">0</span>;  </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"÷"</span>))&#123;  </div><div class="line">                result = <span class="number">0</span>;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">if</span>(!s2.contains(<span class="string">"."</span>))&#123;  </div><div class="line">            <span class="keyword">int</span> r = (<span class="keyword">int</span>)result;  </div><div class="line">            et_input.setText(r+<span class="string">""</span>);  </div><div class="line">            &#125;<span class="keyword">else</span>&#123;  </div><div class="line">            et_input.setText(result+<span class="string">""</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;<span class="keyword">else</span>&#123;  </div><div class="line">            et_input.setText(<span class="string">""</span>);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里采用消息显示的一个方法，个人觉得这样很好看。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"除数不能为0！！！"</span>,Toast.LENGTH_LONG).show();</div></pre></td></tr></table></figure></p>
<p>效果图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img.blog.csdn.net/20160717163226751" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure> </p>
<p>Toast.makeText的方法也不在赘述了，因为很多博客都有写（<a href="http://www.cnblogs.com/ycxyyzw/archive/2013/03/12/2955845.html" target="_blank" rel="external">http://www.cnblogs.com/ycxyyzw/archive/2013/03/12/2955845.html</a>）  </p>
<p><img src="http://pic.sorgs.cn/349ebd550d3598f292948b7e70038878.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 写此时为了记录自己的开发历程，方便以后的查询。二则运算（能力有限，也没有想往更深处写），菜鸟级别，代码为参考慕课网上，听课代码，并加上自己的理解和参考的一些博客！有问题的地方欢迎指正，感激不尽！开发工具为Android studio。（第一次写博客，可读性估计很差）&lt;/p
    
    </summary>
    
      <category term="Android开发" scheme="http://sorgs.cn/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://sorgs.cn/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>还是来个Hello吧</title>
    <link href="http://sorgs.cn/post/52407/"/>
    <id>http://sorgs.cn/post/52407/</id>
    <published>2016-11-15T02:07:01.000Z</published>
    <updated>2019-08-15T01:29:03.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="还是来个Hello吧"><a href="#还是来个Hello吧" class="headerlink" title="还是来个Hello吧"></a>还是来个Hello吧</h1><p>&#160; &#160; &#160; &#160;捣鼓了好几天，终于把我的博客给建立了起来在，真是心累啊。</p>
<p>&#160; &#160; &#160; &#160;从最最最开始的购买腾讯云的学生什么东东开始，发现WordPress不是太看看，这就很尴尬了，于是就发现装逼的hexo强力驱动还不多，还不花钱。就搞了过来。</p>
<p>&#160; &#160; &#160; &#160;从最最最开始的GitHub开始部署，结果国内访问太慢了，看到网上很多说还可以部署到coding上面，发现不是太好弄，于是再加上部署到七牛上。虽然确实很是麻烦，但是保证了数据的安全些。狡兔三窟嘛。</p>
<p>&#160; &#160; &#160; &#160;最后大家对hexo装逼部署不懂的，可以来问问我，我有时间一定耐心解答的</p>
<p>&#160; &#160; &#160; &#160;最后呢，我的<a href="http://blog.csdn.net/qq_24349189" target="_blank" rel="external">CSDN的博客</a>在这里。我会逐渐把我的博客搬过来的哈哈哈！！</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.sorgs.cn/2f6ac9a2bf82cde2513579cd38dae4fc.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;还是来个Hello吧&quot;&gt;&lt;a href=&quot;#还是来个Hello吧&quot; class=&quot;headerlink&quot; title=&quot;还是来个Hello吧&quot;&gt;&lt;/a&gt;还是来个Hello吧&lt;/h1&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;捣鼓了好几天，终于把我
    
    </summary>
    
      <category term="杂记" scheme="http://sorgs.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://sorgs.cn/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
